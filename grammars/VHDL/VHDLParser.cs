//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\VHDLParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace VHDL {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class VHDLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KW_PROCESS=1, KW_CONTEXT=2, KW_POSTPONED=3, KW_LINKAGE=4, KW_COMPONENT=5, 
		KW_ABS=6, KW_DEFAULT=7, KW_THEN=8, KW_BLOCK=9, KW_REM=10, KW_INERTIAL=11, 
		KW_NEXT=12, KW_ENTITY=13, KW_ON=14, KW_GROUP=15, KW_XNOR=16, KW_FILE=17, 
		KW_PURE=18, KW_GUARDED=19, KW_GENERIC=20, KW_RANGE=21, KW_ELSE=22, KW_USE=23, 
		KW_SHARED=24, KW_MOD=25, KW_LOOP=26, KW_RECORD=27, KW_SIGNAL=28, KW_REJECT=29, 
		KW_BEGIN=30, KW_SLA=31, KW_DISCONNECT=32, KW_OF=33, KW_PROCEDURE=34, KW_SRL=35, 
		KW_VUNIT=36, KW_ATTRIBUTE=37, KW_VARIABLE=38, KW_PROPERTY=39, KW_UNAFFECTED=40, 
		KW_XOR=41, KW_REGISTER=42, KW_SUBTYPE=43, KW_TO=44, KW_NEW=45, KW_REPORT=46, 
		KW_CONSTANT=47, KW_BUFFER=48, KW_BODY=49, KW_AFTER=50, KW_TRANSPORT=51, 
		KW_FUNCTION=52, KW_END=53, KW_SELECT=54, KW_OR=55, KW_LIBRARY=56, KW_ELSIF=57, 
		KW_SLL=58, KW_MAP=59, KW_SRA=60, KW_PROTECTED=61, KW_DOWNTO=62, KW_LABEL=63, 
		KW_ALL=64, KW_ALIAS=65, KW_GENERATE=66, KW_NOR=67, KW_IN=68, KW_RELEASE=69, 
		KW_EXIT=70, KW_RETURN=71, KW_WITH=72, KW_UNTIL=73, KW_AND=74, KW_INOUT=75, 
		KW_WAIT=76, KW_NAND=77, KW_ARRAY=78, KW_FORCE=79, KW_WHILE=80, KW_IMPURE=81, 
		KW_PACKAGE=82, KW_UNITS=83, KW_ASSERT=84, KW_PARAMETER=85, KW_SEVERITY=86, 
		KW_LITERAL=87, KW_FOR=88, KW_ROR=89, KW_IF=90, KW_OUT=91, KW_ROL=92, KW_IS=93, 
		KW_SEQUENCE=94, KW_OTHERS=95, KW_TYPE=96, KW_CASE=97, KW_NOT=98, KW_CONFIGURATION=99, 
		KW_OPEN=100, KW_ARCHITECTURE=101, KW_BUS=102, KW_ACCESS=103, KW_WHEN=104, 
		KW_PORT=105, KW_NULL=106, BASIC_IDENTIFIER=107, EXTENDED_IDENTIFIER=108, 
		DECIMAL_LITERAL=109, INTEGER=110, BASED_LITERAL=111, CHARACTER_LITERAL=112, 
		STRING_LITERAL=113, BIT_STRING_LITERAL=114, COMMENT=115, BLOCK_COMMENT=116, 
		TAB=117, SPACE=118, NEWLINE=119, CR=120, SPACE_CHARACTER=121, DBLQUOTE=122, 
		UNDERSCORE=123, DIGIT=124, SEMI=125, LPAREN=126, RPAREN=127, LSQUARE_BR=128, 
		RSQUARE_BR=129, APOSTROPHE=130, SHIFT_LEFT=131, SHIFT_RIGHT=132, AT=133, 
		HASHTAG=134, COMMA=135, DOT=136, QUESTIONMARK=137, COLON=138, EQ=139, 
		NE=140, LT=141, GT=142, GE=143, EQ_MATCH=144, NE_MATCH=145, LT_MATCH=146, 
		LE_MATCH=147, GT_MATCH=148, GE_MATCH=149, PLUS=150, MINUS=151, AMPERSAND=152, 
		BAR=153, BACKSLASH=154, MUL=155, DIV=156, DOUBLESTAR=157, CONASGN=158, 
		GRAVE_ACCENT=159, UP=160, VARASGN=161, BOX=162, ARROW=163, COND_OP=164;
	public const int
		RULE_any_keyword = 0, RULE_name_literal = 1, RULE_name = 2, RULE_name_slice_part = 3, 
		RULE_name_attribute_part = 4, RULE_attribute_name = 5, RULE_suffix = 6, 
		RULE_explicit_range = 7, RULE_selected_name = 8, RULE_entity_declaration = 9, 
		RULE_entity_declarative_item = 10, RULE_entity_statement = 11, RULE_architecture_body = 12, 
		RULE_block_declarative_item = 13, RULE_configuration_declaration = 14, 
		RULE_configuration_declarative_item = 15, RULE_block_configuration = 16, 
		RULE_block_specification = 17, RULE_generate_specification = 18, RULE_configuration_item = 19, 
		RULE_component_configuration = 20, RULE_subprogram_declaration = 21, RULE_subprogram_specification = 22, 
		RULE_procedure_specification = 23, RULE_function_specification = 24, RULE_subprogram_header = 25, 
		RULE_designator = 26, RULE_operator_symbol = 27, RULE_formal_parameter_list = 28, 
		RULE_subprogram_body = 29, RULE_subprogram_kind = 30, RULE_subprogram_instantiation_declaration = 31, 
		RULE_signature = 32, RULE_package_declaration = 33, RULE_package_declarative_item = 34, 
		RULE_package_body = 35, RULE_package_instantiation_declaration = 36, RULE_scalar_type_definition = 37, 
		RULE_range_constraint = 38, RULE_range = 39, RULE_direction = 40, RULE_enumeration_type_definition = 41, 
		RULE_enumeration_literal = 42, RULE_integer_type_definition = 43, RULE_physical_type_definition = 44, 
		RULE_primary_unit_declaration = 45, RULE_secondary_unit_declaration = 46, 
		RULE_floating_type_definition = 47, RULE_composite_type_definition = 48, 
		RULE_array_type_definition = 49, RULE_unbounded_array_definition = 50, 
		RULE_constrained_array_definition = 51, RULE_index_subtype_definition = 52, 
		RULE_array_constraint = 53, RULE_array_element_constraint = 54, RULE_index_constraint = 55, 
		RULE_discrete_range = 56, RULE_record_type_definition = 57, RULE_element_declaration = 58, 
		RULE_identifier_list = 59, RULE_element_subtype_definition = 60, RULE_record_constraint = 61, 
		RULE_record_element_constraint = 62, RULE_access_type_definition = 63, 
		RULE_incomplete_type_declaration = 64, RULE_file_type_definition = 65, 
		RULE_protected_type_definition = 66, RULE_protected_type_declaration = 67, 
		RULE_protected_type_declarative_item = 68, RULE_protected_type_body = 69, 
		RULE_type_declaration = 70, RULE_full_type_declaration = 71, RULE_type_definition = 72, 
		RULE_subtype_declaration = 73, RULE_subtype_indication = 74, RULE_resolution_indication = 75, 
		RULE_element_resolution = 76, RULE_array_element_resolution = 77, RULE_record_resolution = 78, 
		RULE_record_element_resolution = 79, RULE_type_mark = 80, RULE_constraint = 81, 
		RULE_element_constraint = 82, RULE_object_declaration = 83, RULE_constant_declaration = 84, 
		RULE_signal_declaration = 85, RULE_signal_kind = 86, RULE_variable_declaration = 87, 
		RULE_file_declaration = 88, RULE_file_open_information = 89, RULE_file_logical_name = 90, 
		RULE_interface_declaration = 91, RULE_interface_object_declaration = 92, 
		RULE_interface_constant_declaration = 93, RULE_interface_signal_declaration = 94, 
		RULE_interface_variable_declaration = 95, RULE_interface_file_declaration = 96, 
		RULE_signal_mode = 97, RULE_interface_type_declaration = 98, RULE_interface_incomplete_type_declaration = 99, 
		RULE_interface_subprogram_declaration = 100, RULE_interface_subprogram_specification = 101, 
		RULE_interface_procedure_specification = 102, RULE_interface_function_specification = 103, 
		RULE_interface_subprogram_default = 104, RULE_interface_package_declaration = 105, 
		RULE_interface_package_generic_map_aspect = 106, RULE_interface_list = 107, 
		RULE_interface_element = 108, RULE_generic_clause = 109, RULE_generic_list = 110, 
		RULE_port_clause = 111, RULE_port_list = 112, RULE_association_list = 113, 
		RULE_association_element = 114, RULE_formal_part = 115, RULE_actual_part = 116, 
		RULE_actual_designator = 117, RULE_generic_map_aspect = 118, RULE_port_map_aspect = 119, 
		RULE_alias_declaration = 120, RULE_alias_designator = 121, RULE_attribute_declaration = 122, 
		RULE_component_declaration = 123, RULE_group_template_declaration = 124, 
		RULE_entity_class_entry_list = 125, RULE_entity_class_entry = 126, RULE_group_declaration = 127, 
		RULE_group_constituent_list = 128, RULE_group_constituent = 129, RULE_attribute_specification = 130, 
		RULE_entity_specification = 131, RULE_entity_class = 132, RULE_entity_name_list = 133, 
		RULE_entity_designator = 134, RULE_entity_tag = 135, RULE_configuration_specification = 136, 
		RULE_simple_configuration_specification = 137, RULE_compound_configuration_specification = 138, 
		RULE_component_specification = 139, RULE_instantiation_list = 140, RULE_binding_indication = 141, 
		RULE_entity_aspect = 142, RULE_verification_unit_binding_indication = 143, 
		RULE_verification_unit_list = 144, RULE_disconnection_specification = 145, 
		RULE_guarded_signal_specification = 146, RULE_signal_list = 147, RULE_attribute_designator = 148, 
		RULE_external_name = 149, RULE_external_pathname = 150, RULE_package_pathname = 151, 
		RULE_absolute_pathname = 152, RULE_relative_pathname = 153, RULE_partial_pathname = 154, 
		RULE_pathname_element = 155, RULE_expression = 156, RULE_simple_expression = 157, 
		RULE_primary = 158, RULE_logical_operator = 159, RULE_relational_operator = 160, 
		RULE_shift_operator = 161, RULE_adding_operator = 162, RULE_sign = 163, 
		RULE_multiplying_operator = 164, RULE_miscellaneous_operator = 165, RULE_numeric_literal = 166, 
		RULE_physical_literal = 167, RULE_aggregate = 168, RULE_element_association = 169, 
		RULE_choices = 170, RULE_choice = 171, RULE_qualified_expression = 172, 
		RULE_allocator = 173, RULE_sequence_of_statements = 174, RULE_sequential_statement = 175, 
		RULE_wait_statement = 176, RULE_sensitivity_clause = 177, RULE_sensitivity_list = 178, 
		RULE_condition_clause = 179, RULE_condition = 180, RULE_timeout_clause = 181, 
		RULE_assertion_statement = 182, RULE_assertion = 183, RULE_report_statement = 184, 
		RULE_signal_assignment_statement = 185, RULE_simple_signal_assignment = 186, 
		RULE_simple_waveform_assignment = 187, RULE_simple_force_assignment = 188, 
		RULE_simple_release_assignment = 189, RULE_force_mode = 190, RULE_delay_mechanism = 191, 
		RULE_target = 192, RULE_waveform = 193, RULE_waveform_element = 194, RULE_conditional_signal_assignment = 195, 
		RULE_conditional_waveform_assignment = 196, RULE_conditional_waveforms = 197, 
		RULE_conditional_force_assignment = 198, RULE_conditional_expressions = 199, 
		RULE_selected_signal_assignment = 200, RULE_selected_waveform_assignment = 201, 
		RULE_selected_waveforms = 202, RULE_selected_force_assignment = 203, RULE_selected_expressions = 204, 
		RULE_variable_assignment_statement = 205, RULE_simple_variable_assignment = 206, 
		RULE_conditional_variable_assignment = 207, RULE_selected_variable_assignment = 208, 
		RULE_procedure_call_statement = 209, RULE_procedure_call = 210, RULE_if_statement = 211, 
		RULE_case_statement = 212, RULE_case_statement_alternative = 213, RULE_loop_statement = 214, 
		RULE_iteration_scheme = 215, RULE_parameter_specification = 216, RULE_next_statement = 217, 
		RULE_exit_statement = 218, RULE_return_statement = 219, RULE_null_statement = 220, 
		RULE_concurrent_statement_with_optional_label = 221, RULE_concurrent_statement = 222, 
		RULE_block_statement = 223, RULE_block_header = 224, RULE_process_statement = 225, 
		RULE_process_sensitivity_list = 226, RULE_process_or_package_declarative_item = 227, 
		RULE_process_declarative_item = 228, RULE_concurrent_procedure_call_statement = 229, 
		RULE_concurrent_assertion_statement = 230, RULE_concurrent_signal_assignment_statement = 231, 
		RULE_concurrent_signal_assignment_any = 232, RULE_concurrent_selected_signal_assignment = 233, 
		RULE_component_instantiation_statement = 234, RULE_instantiated_unit = 235, 
		RULE_generate_statement = 236, RULE_for_generate_statement = 237, RULE_if_generate_statement = 238, 
		RULE_case_generate_statement = 239, RULE_case_generate_alternative = 240, 
		RULE_generate_statement_body_with_begin_end = 241, RULE_generate_statement_body = 242, 
		RULE_label = 243, RULE_use_clause = 244, RULE_design_file = 245, RULE_design_unit = 246, 
		RULE_library_unit = 247, RULE_primary_unit = 248, RULE_secondary_unit = 249, 
		RULE_library_clause = 250, RULE_logical_name_list = 251, RULE_context_declaration = 252, 
		RULE_context_clause = 253, RULE_context_item = 254, RULE_context_reference = 255, 
		RULE_identifier = 256;
	public static readonly string[] ruleNames = {
		"any_keyword", "name_literal", "name", "name_slice_part", "name_attribute_part", 
		"attribute_name", "suffix", "explicit_range", "selected_name", "entity_declaration", 
		"entity_declarative_item", "entity_statement", "architecture_body", "block_declarative_item", 
		"configuration_declaration", "configuration_declarative_item", "block_configuration", 
		"block_specification", "generate_specification", "configuration_item", 
		"component_configuration", "subprogram_declaration", "subprogram_specification", 
		"procedure_specification", "function_specification", "subprogram_header", 
		"designator", "operator_symbol", "formal_parameter_list", "subprogram_body", 
		"subprogram_kind", "subprogram_instantiation_declaration", "signature", 
		"package_declaration", "package_declarative_item", "package_body", "package_instantiation_declaration", 
		"scalar_type_definition", "range_constraint", "range", "direction", "enumeration_type_definition", 
		"enumeration_literal", "integer_type_definition", "physical_type_definition", 
		"primary_unit_declaration", "secondary_unit_declaration", "floating_type_definition", 
		"composite_type_definition", "array_type_definition", "unbounded_array_definition", 
		"constrained_array_definition", "index_subtype_definition", "array_constraint", 
		"array_element_constraint", "index_constraint", "discrete_range", "record_type_definition", 
		"element_declaration", "identifier_list", "element_subtype_definition", 
		"record_constraint", "record_element_constraint", "access_type_definition", 
		"incomplete_type_declaration", "file_type_definition", "protected_type_definition", 
		"protected_type_declaration", "protected_type_declarative_item", "protected_type_body", 
		"type_declaration", "full_type_declaration", "type_definition", "subtype_declaration", 
		"subtype_indication", "resolution_indication", "element_resolution", "array_element_resolution", 
		"record_resolution", "record_element_resolution", "type_mark", "constraint", 
		"element_constraint", "object_declaration", "constant_declaration", "signal_declaration", 
		"signal_kind", "variable_declaration", "file_declaration", "file_open_information", 
		"file_logical_name", "interface_declaration", "interface_object_declaration", 
		"interface_constant_declaration", "interface_signal_declaration", "interface_variable_declaration", 
		"interface_file_declaration", "signal_mode", "interface_type_declaration", 
		"interface_incomplete_type_declaration", "interface_subprogram_declaration", 
		"interface_subprogram_specification", "interface_procedure_specification", 
		"interface_function_specification", "interface_subprogram_default", "interface_package_declaration", 
		"interface_package_generic_map_aspect", "interface_list", "interface_element", 
		"generic_clause", "generic_list", "port_clause", "port_list", "association_list", 
		"association_element", "formal_part", "actual_part", "actual_designator", 
		"generic_map_aspect", "port_map_aspect", "alias_declaration", "alias_designator", 
		"attribute_declaration", "component_declaration", "group_template_declaration", 
		"entity_class_entry_list", "entity_class_entry", "group_declaration", 
		"group_constituent_list", "group_constituent", "attribute_specification", 
		"entity_specification", "entity_class", "entity_name_list", "entity_designator", 
		"entity_tag", "configuration_specification", "simple_configuration_specification", 
		"compound_configuration_specification", "component_specification", "instantiation_list", 
		"binding_indication", "entity_aspect", "verification_unit_binding_indication", 
		"verification_unit_list", "disconnection_specification", "guarded_signal_specification", 
		"signal_list", "attribute_designator", "external_name", "external_pathname", 
		"package_pathname", "absolute_pathname", "relative_pathname", "partial_pathname", 
		"pathname_element", "expression", "simple_expression", "primary", "logical_operator", 
		"relational_operator", "shift_operator", "adding_operator", "sign", "multiplying_operator", 
		"miscellaneous_operator", "numeric_literal", "physical_literal", "aggregate", 
		"element_association", "choices", "choice", "qualified_expression", "allocator", 
		"sequence_of_statements", "sequential_statement", "wait_statement", "sensitivity_clause", 
		"sensitivity_list", "condition_clause", "condition", "timeout_clause", 
		"assertion_statement", "assertion", "report_statement", "signal_assignment_statement", 
		"simple_signal_assignment", "simple_waveform_assignment", "simple_force_assignment", 
		"simple_release_assignment", "force_mode", "delay_mechanism", "target", 
		"waveform", "waveform_element", "conditional_signal_assignment", "conditional_waveform_assignment", 
		"conditional_waveforms", "conditional_force_assignment", "conditional_expressions", 
		"selected_signal_assignment", "selected_waveform_assignment", "selected_waveforms", 
		"selected_force_assignment", "selected_expressions", "variable_assignment_statement", 
		"simple_variable_assignment", "conditional_variable_assignment", "selected_variable_assignment", 
		"procedure_call_statement", "procedure_call", "if_statement", "case_statement", 
		"case_statement_alternative", "loop_statement", "iteration_scheme", "parameter_specification", 
		"next_statement", "exit_statement", "return_statement", "null_statement", 
		"concurrent_statement_with_optional_label", "concurrent_statement", "block_statement", 
		"block_header", "process_statement", "process_sensitivity_list", "process_or_package_declarative_item", 
		"process_declarative_item", "concurrent_procedure_call_statement", "concurrent_assertion_statement", 
		"concurrent_signal_assignment_statement", "concurrent_signal_assignment_any", 
		"concurrent_selected_signal_assignment", "component_instantiation_statement", 
		"instantiated_unit", "generate_statement", "for_generate_statement", "if_generate_statement", 
		"case_generate_statement", "case_generate_alternative", "generate_statement_body_with_begin_end", 
		"generate_statement_body", "label", "use_clause", "design_file", "design_unit", 
		"library_unit", "primary_unit", "secondary_unit", "library_clause", "logical_name_list", 
		"context_declaration", "context_clause", "context_item", "context_reference", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'\\n'", 
		"'\\r'", "' '", "'\"'", "'_'", null, "';'", "'('", "')'", "'['", "']'", 
		"'''", "'<<'", "'>>'", "'@'", "'#'", "','", "'.'", "'?'", "':'", "'='", 
		"'/='", "'<'", "'>'", "'>='", "'?='", "'?/='", "'?<'", "'?<='", "'?>'", 
		"'?>='", "'+'", "'-'", "'&'", "'|'", "'\\'", "'*'", "'/'", "'**'", "'<='", 
		"'`'", "'^'", "':='", "'<>'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KW_PROCESS", "KW_CONTEXT", "KW_POSTPONED", "KW_LINKAGE", "KW_COMPONENT", 
		"KW_ABS", "KW_DEFAULT", "KW_THEN", "KW_BLOCK", "KW_REM", "KW_INERTIAL", 
		"KW_NEXT", "KW_ENTITY", "KW_ON", "KW_GROUP", "KW_XNOR", "KW_FILE", "KW_PURE", 
		"KW_GUARDED", "KW_GENERIC", "KW_RANGE", "KW_ELSE", "KW_USE", "KW_SHARED", 
		"KW_MOD", "KW_LOOP", "KW_RECORD", "KW_SIGNAL", "KW_REJECT", "KW_BEGIN", 
		"KW_SLA", "KW_DISCONNECT", "KW_OF", "KW_PROCEDURE", "KW_SRL", "KW_VUNIT", 
		"KW_ATTRIBUTE", "KW_VARIABLE", "KW_PROPERTY", "KW_UNAFFECTED", "KW_XOR", 
		"KW_REGISTER", "KW_SUBTYPE", "KW_TO", "KW_NEW", "KW_REPORT", "KW_CONSTANT", 
		"KW_BUFFER", "KW_BODY", "KW_AFTER", "KW_TRANSPORT", "KW_FUNCTION", "KW_END", 
		"KW_SELECT", "KW_OR", "KW_LIBRARY", "KW_ELSIF", "KW_SLL", "KW_MAP", "KW_SRA", 
		"KW_PROTECTED", "KW_DOWNTO", "KW_LABEL", "KW_ALL", "KW_ALIAS", "KW_GENERATE", 
		"KW_NOR", "KW_IN", "KW_RELEASE", "KW_EXIT", "KW_RETURN", "KW_WITH", "KW_UNTIL", 
		"KW_AND", "KW_INOUT", "KW_WAIT", "KW_NAND", "KW_ARRAY", "KW_FORCE", "KW_WHILE", 
		"KW_IMPURE", "KW_PACKAGE", "KW_UNITS", "KW_ASSERT", "KW_PARAMETER", "KW_SEVERITY", 
		"KW_LITERAL", "KW_FOR", "KW_ROR", "KW_IF", "KW_OUT", "KW_ROL", "KW_IS", 
		"KW_SEQUENCE", "KW_OTHERS", "KW_TYPE", "KW_CASE", "KW_NOT", "KW_CONFIGURATION", 
		"KW_OPEN", "KW_ARCHITECTURE", "KW_BUS", "KW_ACCESS", "KW_WHEN", "KW_PORT", 
		"KW_NULL", "BASIC_IDENTIFIER", "EXTENDED_IDENTIFIER", "DECIMAL_LITERAL", 
		"INTEGER", "BASED_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "BIT_STRING_LITERAL", 
		"COMMENT", "BLOCK_COMMENT", "TAB", "SPACE", "NEWLINE", "CR", "SPACE_CHARACTER", 
		"DBLQUOTE", "UNDERSCORE", "DIGIT", "SEMI", "LPAREN", "RPAREN", "LSQUARE_BR", 
		"RSQUARE_BR", "APOSTROPHE", "SHIFT_LEFT", "SHIFT_RIGHT", "AT", "HASHTAG", 
		"COMMA", "DOT", "QUESTIONMARK", "COLON", "EQ", "NE", "LT", "GT", "GE", 
		"EQ_MATCH", "NE_MATCH", "LT_MATCH", "LE_MATCH", "GT_MATCH", "GE_MATCH", 
		"PLUS", "MINUS", "AMPERSAND", "BAR", "BACKSLASH", "MUL", "DIV", "DOUBLESTAR", 
		"CONASGN", "GRAVE_ACCENT", "UP", "VARASGN", "BOX", "ARROW", "COND_OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VHDLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static VHDLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VHDLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VHDLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Any_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROCESS() { return GetToken(VHDLParser.KW_PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONTEXT() { return GetToken(VHDLParser.KW_CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_POSTPONED() { return GetToken(VHDLParser.KW_POSTPONED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LINKAGE() { return GetToken(VHDLParser.KW_LINKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPONENT() { return GetToken(VHDLParser.KW_COMPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABS() { return GetToken(VHDLParser.KW_ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFAULT() { return GetToken(VHDLParser.KW_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THEN() { return GetToken(VHDLParser.KW_THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BLOCK() { return GetToken(VHDLParser.KW_BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REM() { return GetToken(VHDLParser.KW_REM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INERTIAL() { return GetToken(VHDLParser.KW_INERTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEXT() { return GetToken(VHDLParser.KW_NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENTITY() { return GetToken(VHDLParser.KW_ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(VHDLParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GROUP() { return GetToken(VHDLParser.KW_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_XNOR() { return GetToken(VHDLParser.KW_XNOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FILE() { return GetToken(VHDLParser.KW_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PURE() { return GetToken(VHDLParser.KW_PURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GUARDED() { return GetToken(VHDLParser.KW_GUARDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GENERIC() { return GetToken(VHDLParser.KW_GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RANGE() { return GetToken(VHDLParser.KW_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(VHDLParser.KW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USE() { return GetToken(VHDLParser.KW_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHARED() { return GetToken(VHDLParser.KW_SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MOD() { return GetToken(VHDLParser.KW_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOOP() { return GetToken(VHDLParser.KW_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RECORD() { return GetToken(VHDLParser.KW_RECORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SIGNAL() { return GetToken(VHDLParser.KW_SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REJECT() { return GetToken(VHDLParser.KW_REJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BEGIN() { return GetToken(VHDLParser.KW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SLA() { return GetToken(VHDLParser.KW_SLA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISCONNECT() { return GetToken(VHDLParser.KW_DISCONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OF() { return GetToken(VHDLParser.KW_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROCEDURE() { return GetToken(VHDLParser.KW_PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SRL() { return GetToken(VHDLParser.KW_SRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VUNIT() { return GetToken(VHDLParser.KW_VUNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ATTRIBUTE() { return GetToken(VHDLParser.KW_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VARIABLE() { return GetToken(VHDLParser.KW_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROPERTY() { return GetToken(VHDLParser.KW_PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNAFFECTED() { return GetToken(VHDLParser.KW_UNAFFECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_XOR() { return GetToken(VHDLParser.KW_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REGISTER() { return GetToken(VHDLParser.KW_REGISTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUBTYPE() { return GetToken(VHDLParser.KW_SUBTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(VHDLParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEW() { return GetToken(VHDLParser.KW_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPORT() { return GetToken(VHDLParser.KW_REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTANT() { return GetToken(VHDLParser.KW_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUFFER() { return GetToken(VHDLParser.KW_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BODY() { return GetToken(VHDLParser.KW_BODY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AFTER() { return GetToken(VHDLParser.KW_AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSPORT() { return GetToken(VHDLParser.KW_TRANSPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTION() { return GetToken(VHDLParser.KW_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELECT() { return GetToken(VHDLParser.KW_SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OR() { return GetToken(VHDLParser.KW_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIBRARY() { return GetToken(VHDLParser.KW_LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSIF() { return GetToken(VHDLParser.KW_ELSIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SLL() { return GetToken(VHDLParser.KW_SLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(VHDLParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SRA() { return GetToken(VHDLParser.KW_SRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROTECTED() { return GetToken(VHDLParser.KW_PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOWNTO() { return GetToken(VHDLParser.KW_DOWNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LABEL() { return GetToken(VHDLParser.KW_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(VHDLParser.KW_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALIAS() { return GetToken(VHDLParser.KW_ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GENERATE() { return GetToken(VHDLParser.KW_GENERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOR() { return GetToken(VHDLParser.KW_NOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(VHDLParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RELEASE() { return GetToken(VHDLParser.KW_RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXIT() { return GetToken(VHDLParser.KW_EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RETURN() { return GetToken(VHDLParser.KW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(VHDLParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNTIL() { return GetToken(VHDLParser.KW_UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(VHDLParser.KW_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INOUT() { return GetToken(VHDLParser.KW_INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WAIT() { return GetToken(VHDLParser.KW_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NAND() { return GetToken(VHDLParser.KW_NAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARRAY() { return GetToken(VHDLParser.KW_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORCE() { return GetToken(VHDLParser.KW_FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHILE() { return GetToken(VHDLParser.KW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPURE() { return GetToken(VHDLParser.KW_IMPURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PACKAGE() { return GetToken(VHDLParser.KW_PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNITS() { return GetToken(VHDLParser.KW_UNITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ASSERT() { return GetToken(VHDLParser.KW_ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARAMETER() { return GetToken(VHDLParser.KW_PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SEVERITY() { return GetToken(VHDLParser.KW_SEVERITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LITERAL() { return GetToken(VHDLParser.KW_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(VHDLParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROR() { return GetToken(VHDLParser.KW_ROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(VHDLParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUT() { return GetToken(VHDLParser.KW_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROL() { return GetToken(VHDLParser.KW_ROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SEQUENCE() { return GetToken(VHDLParser.KW_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OTHERS() { return GetToken(VHDLParser.KW_OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPE() { return GetToken(VHDLParser.KW_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASE() { return GetToken(VHDLParser.KW_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(VHDLParser.KW_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONFIGURATION() { return GetToken(VHDLParser.KW_CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPEN() { return GetToken(VHDLParser.KW_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARCHITECTURE() { return GetToken(VHDLParser.KW_ARCHITECTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUS() { return GetToken(VHDLParser.KW_BUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ACCESS() { return GetToken(VHDLParser.KW_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN() { return GetToken(VHDLParser.KW_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PORT() { return GetToken(VHDLParser.KW_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(VHDLParser.KW_NULL, 0); }
		public Any_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAny_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAny_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Any_keywordContext any_keyword() {
		Any_keywordContext _localctx = new Any_keywordContext(Context, State);
		EnterRule(_localctx, 0, RULE_any_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8796093022207L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_symbolContext operator_symbol() {
			return GetRuleContext<Operator_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(VHDLParser.CHARACTER_LITERAL, 0); }
		public Name_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterName_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitName_literal(this);
		}
	}

	[RuleVersion(0)]
	public Name_literalContext name_literal() {
		Name_literalContext _localctx = new Name_literalContext(Context, State);
		EnterRule(_localctx, 2, RULE_name_literal);
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				identifier();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 517;
				operator_symbol();
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 518;
				Match(CHARACTER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_literalContext name_literal() {
			return GetRuleContext<Name_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_nameContext external_name() {
			return GetRuleContext<External_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_slice_partContext name_slice_part() {
			return GetRuleContext<Name_slice_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_attribute_partContext name_attribute_part() {
			return GetRuleContext<Name_attribute_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Association_listContext association_list() {
			return GetRuleContext<Association_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(VHDLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext suffix() {
			return GetRuleContext<SuffixContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
				{
				State = 522;
				name_literal();
				}
				break;
			case SHIFT_LEFT:
				{
				State = 523;
				external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 536;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 526;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 532;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						State = 527;
						name_slice_part();
						}
						break;
					case 2:
						{
						State = 528;
						name_attribute_part();
						}
						break;
					case 3:
						{
						State = 529;
						association_list();
						}
						break;
					case 4:
						{
						State = 530;
						Match(DOT);
						State = 531;
						suffix();
						}
						break;
					}
					}
					} 
				}
				State = 538;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Name_slice_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_rangeContext explicit_range() {
			return GetRuleContext<Explicit_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		public Name_slice_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_slice_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterName_slice_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitName_slice_part(this);
		}
	}

	[RuleVersion(0)]
	public Name_slice_partContext name_slice_part() {
		Name_slice_partContext _localctx = new Name_slice_partContext(Context, State);
		EnterRule(_localctx, 6, RULE_name_slice_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(LPAREN);
			State = 540;
			explicit_range();
			State = 541;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_attribute_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APOSTROPHE() { return GetToken(VHDLParser.APOSTROPHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_designatorContext attribute_designator() {
			return GetRuleContext<Attribute_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public Name_attribute_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_attribute_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterName_attribute_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitName_attribute_part(this);
		}
	}

	[RuleVersion(0)]
	public Name_attribute_partContext name_attribute_part() {
		Name_attribute_partContext _localctx = new Name_attribute_partContext(Context, State);
		EnterRule(_localctx, 8, RULE_name_attribute_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSQUARE_BR) {
				{
				State = 543;
				signature();
				}
			}

			State = 546;
			Match(APOSTROPHE);
			State = 547;
			attribute_designator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_attribute_partContext name_attribute_part() {
			return GetRuleContext<Name_attribute_partContext>(0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAttribute_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAttribute_name(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			name(0);
			State = 550;
			name_attribute_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_literalContext name_literal() {
			return GetRuleContext<Name_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(VHDLParser.KW_ALL, 0); }
		public SuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSuffix(this);
		}
	}

	[RuleVersion(0)]
	public SuffixContext suffix() {
		SuffixContext _localctx = new SuffixContext(Context, State);
		EnterRule(_localctx, 12, RULE_suffix);
		try {
			State = 554;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 552;
				name_literal();
				}
				break;
			case KW_ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 553;
				Match(KW_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_rangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext[] simple_expression() {
			return GetRuleContexts<Simple_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression(int i) {
			return GetRuleContext<Simple_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public Explicit_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterExplicit_range(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitExplicit_range(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_rangeContext explicit_range() {
		Explicit_rangeContext _localctx = new Explicit_rangeContext(Context, State);
		EnterRule(_localctx, 14, RULE_explicit_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			simple_expression(0);
			State = 557;
			direction();
			State = 558;
			simple_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(VHDLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(VHDLParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext[] suffix() {
			return GetRuleContexts<SuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext suffix(int i) {
			return GetRuleContext<SuffixContext>(i);
		}
		public Selected_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSelected_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSelected_name(this);
		}
	}

	[RuleVersion(0)]
	public Selected_nameContext selected_name() {
		Selected_nameContext _localctx = new Selected_nameContext(Context, State);
		EnterRule(_localctx, 16, RULE_selected_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			identifier();
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 561;
				Match(DOT);
				State = 562;
				suffix();
				}
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_ENTITY() { return GetTokens(VHDLParser.KW_ENTITY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENTITY(int i) {
			return GetToken(VHDLParser.KW_ENTITY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_clauseContext generic_clause() {
			return GetRuleContext<Generic_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_clauseContext port_clause() {
			return GetRuleContext<Port_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarative_itemContext[] entity_declarative_item() {
			return GetRuleContexts<Entity_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarative_itemContext entity_declarative_item(int i) {
			return GetRuleContext<Entity_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BEGIN() { return GetToken(VHDLParser.KW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_statementContext[] entity_statement() {
			return GetRuleContexts<Entity_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_statementContext entity_statement(int i) {
			return GetRuleContext<Entity_statementContext>(i);
		}
		public Entity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declarationContext entity_declaration() {
		Entity_declarationContext _localctx = new Entity_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_entity_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(KW_ENTITY);
			State = 569;
			identifier();
			State = 570;
			Match(KW_IS);
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 571;
				generic_clause();
				}
			}

			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PORT) {
				{
				State = 574;
				port_clause();
				}
			}

			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653567294472192L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2147680257L) != 0)) {
				{
				{
				State = 577;
				entity_declarative_item();
				}
				}
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_BEGIN) {
				{
				State = 583;
				Match(KW_BEGIN);
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==KW_PROCESS || _la==KW_POSTPONED || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 140738318827521L) != 0)) {
					{
					{
					State = 584;
					entity_statement();
					}
					}
					State = 589;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 592;
			Match(KW_END);
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ENTITY) {
				{
				State = 593;
				Match(KW_ENTITY);
				}
			}

			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 596;
				identifier();
				}
			}

			State = 599;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signal_declarationContext signal_declaration() {
			return GetRuleContext<Signal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext process_declarative_item() {
			return GetRuleContext<Process_declarative_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Disconnection_specificationContext disconnection_specification() {
			return GetRuleContext<Disconnection_specificationContext>(0);
		}
		public Entity_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_declarative_item(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declarative_itemContext entity_declarative_item() {
		Entity_declarative_itemContext _localctx = new Entity_declarative_itemContext(Context, State);
		EnterRule(_localctx, 20, RULE_entity_declarative_item);
		try {
			State = 604;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SIGNAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601;
				signal_declaration();
				}
				break;
			case KW_GROUP:
			case KW_FILE:
			case KW_PURE:
			case KW_USE:
			case KW_SHARED:
			case KW_PROCEDURE:
			case KW_ATTRIBUTE:
			case KW_VARIABLE:
			case KW_SUBTYPE:
			case KW_CONSTANT:
			case KW_FUNCTION:
			case KW_ALIAS:
			case KW_IMPURE:
			case KW_PACKAGE:
			case KW_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 602;
				process_declarative_item();
				}
				break;
			case KW_DISCONNECT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 603;
				disconnection_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_assertion_statementContext concurrent_assertion_statement() {
			return GetRuleContext<Concurrent_assertion_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_procedure_call_statementContext concurrent_procedure_call_statement() {
			return GetRuleContext<Concurrent_procedure_call_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_statementContext process_statement() {
			return GetRuleContext<Process_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		public Entity_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_statement(this);
		}
	}

	[RuleVersion(0)]
	public Entity_statementContext entity_statement() {
		Entity_statementContext _localctx = new Entity_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_entity_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 606;
				label();
				State = 607;
				Match(COLON);
				}
				break;
			}
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 611;
				concurrent_assertion_statement();
				}
				break;
			case 2:
				{
				State = 612;
				concurrent_procedure_call_statement();
				}
				break;
			case 3:
				{
				State = 613;
				process_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Architecture_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_ARCHITECTURE() { return GetTokens(VHDLParser.KW_ARCHITECTURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARCHITECTURE(int i) {
			return GetToken(VHDLParser.KW_ARCHITECTURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OF() { return GetToken(VHDLParser.KW_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BEGIN() { return GetToken(VHDLParser.KW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext[] block_declarative_item() {
			return GetRuleContexts<Block_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext block_declarative_item(int i) {
			return GetRuleContext<Block_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_statementContext[] concurrent_statement() {
			return GetRuleContexts<Concurrent_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_statementContext concurrent_statement(int i) {
			return GetRuleContext<Concurrent_statementContext>(i);
		}
		public Architecture_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_architecture_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterArchitecture_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitArchitecture_body(this);
		}
	}

	[RuleVersion(0)]
	public Architecture_bodyContext architecture_body() {
		Architecture_bodyContext _localctx = new Architecture_bodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_architecture_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(KW_ARCHITECTURE);
			State = 617;
			identifier();
			State = 618;
			Match(KW_OF);
			State = 619;
			name(0);
			State = 620;
			Match(KW_IS);
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653567294472224L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2156068865L) != 0)) {
				{
				{
				State = 621;
				block_declarative_item();
				}
				}
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 627;
			Match(KW_BEGIN);
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_PROCESS || _la==KW_POSTPONED || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 594478552427008001L) != 0)) {
				{
				{
				State = 628;
				concurrent_statement();
				}
				}
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 634;
			Match(KW_END);
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ARCHITECTURE) {
				{
				State = 635;
				Match(KW_ARCHITECTURE);
				}
			}

			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 638;
				identifier();
				}
			}

			State = 641;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarative_itemContext entity_declarative_item() {
			return GetRuleContext<Entity_declarative_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_declarationContext component_declaration() {
			return GetRuleContext<Component_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_specificationContext configuration_specification() {
			return GetRuleContext<Configuration_specificationContext>(0);
		}
		public Block_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterBlock_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitBlock_declarative_item(this);
		}
	}

	[RuleVersion(0)]
	public Block_declarative_itemContext block_declarative_item() {
		Block_declarative_itemContext _localctx = new Block_declarative_itemContext(Context, State);
		EnterRule(_localctx, 26, RULE_block_declarative_item);
		try {
			State = 646;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_GROUP:
			case KW_FILE:
			case KW_PURE:
			case KW_USE:
			case KW_SHARED:
			case KW_SIGNAL:
			case KW_DISCONNECT:
			case KW_PROCEDURE:
			case KW_ATTRIBUTE:
			case KW_VARIABLE:
			case KW_SUBTYPE:
			case KW_CONSTANT:
			case KW_FUNCTION:
			case KW_ALIAS:
			case KW_IMPURE:
			case KW_PACKAGE:
			case KW_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 643;
				entity_declarative_item();
				}
				break;
			case KW_COMPONENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 644;
				component_declaration();
				}
				break;
			case KW_FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 645;
				configuration_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Configuration_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_CONFIGURATION() { return GetTokens(VHDLParser.KW_CONFIGURATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONFIGURATION(int i) {
			return GetToken(VHDLParser.KW_CONFIGURATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OF() { return GetToken(VHDLParser.KW_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_configurationContext block_configuration() {
			return GetRuleContext<Block_configurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(VHDLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(VHDLParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_declarative_itemContext[] configuration_declarative_item() {
			return GetRuleContexts<Configuration_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_declarative_itemContext configuration_declarative_item(int i) {
			return GetRuleContext<Configuration_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Verification_unit_binding_indicationContext[] verification_unit_binding_indication() {
			return GetRuleContexts<Verification_unit_binding_indicationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Verification_unit_binding_indicationContext verification_unit_binding_indication(int i) {
			return GetRuleContext<Verification_unit_binding_indicationContext>(i);
		}
		public Configuration_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConfiguration_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConfiguration_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Configuration_declarationContext configuration_declaration() {
		Configuration_declarationContext _localctx = new Configuration_declarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_configuration_declaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			Match(KW_CONFIGURATION);
			State = 649;
			identifier();
			State = 650;
			Match(KW_OF);
			State = 651;
			name(0);
			State = 652;
			Match(KW_IS);
			State = 656;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 653;
					configuration_declarative_item();
					}
					} 
				}
				State = 658;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_USE) {
				{
				{
				State = 659;
				verification_unit_binding_indication();
				State = 660;
				Match(SEMI);
				}
				}
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 667;
			block_configuration();
			State = 668;
			Match(KW_END);
			State = 670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONFIGURATION) {
				{
				State = 669;
				Match(KW_CONFIGURATION);
				}
			}

			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 672;
				identifier();
				}
			}

			State = 675;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Configuration_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		public Configuration_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConfiguration_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConfiguration_declarative_item(this);
		}
	}

	[RuleVersion(0)]
	public Configuration_declarative_itemContext configuration_declarative_item() {
		Configuration_declarative_itemContext _localctx = new Configuration_declarative_itemContext(Context, State);
		EnterRule(_localctx, 30, RULE_configuration_declarative_item);
		try {
			State = 680;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 677;
				use_clause();
				}
				break;
			case KW_ATTRIBUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 678;
				attribute_specification();
				}
				break;
			case KW_GROUP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 679;
				group_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_configurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_FOR() { return GetTokens(VHDLParser.KW_FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR(int i) {
			return GetToken(VHDLParser.KW_FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_specificationContext block_specification() {
			return GetRuleContext<Block_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext[] use_clause() {
			return GetRuleContexts<Use_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause(int i) {
			return GetRuleContext<Use_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_itemContext[] configuration_item() {
			return GetRuleContexts<Configuration_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_itemContext configuration_item(int i) {
			return GetRuleContext<Configuration_itemContext>(i);
		}
		public Block_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_configuration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterBlock_configuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitBlock_configuration(this);
		}
	}

	[RuleVersion(0)]
	public Block_configurationContext block_configuration() {
		Block_configurationContext _localctx = new Block_configurationContext(Context, State);
		EnterRule(_localctx, 32, RULE_block_configuration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(KW_FOR);
			State = 683;
			block_specification();
			State = 687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_USE) {
				{
				{
				State = 684;
				use_clause();
				}
				}
				State = 689;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_FOR) {
				{
				{
				State = 690;
				configuration_item();
				}
				}
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 696;
			Match(KW_END);
			State = 697;
			Match(KW_FOR);
			State = 698;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generate_specificationContext generate_specification() {
			return GetRuleContext<Generate_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		public Block_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterBlock_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitBlock_specification(this);
		}
	}

	[RuleVersion(0)]
	public Block_specificationContext block_specification() {
		Block_specificationContext _localctx = new Block_specificationContext(Context, State);
		EnterRule(_localctx, 34, RULE_block_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			label();
			State = 705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 701;
				Match(LPAREN);
				State = 702;
				generate_specification();
				State = 703;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext discrete_range() {
			return GetRuleContext<Discrete_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Generate_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGenerate_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGenerate_specification(this);
		}
	}

	[RuleVersion(0)]
	public Generate_specificationContext generate_specification() {
		Generate_specificationContext _localctx = new Generate_specificationContext(Context, State);
		EnterRule(_localctx, 36, RULE_generate_specification);
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 707;
				discrete_range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 708;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 709;
				label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Configuration_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_configurationContext block_configuration() {
			return GetRuleContext<Block_configurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_configurationContext component_configuration() {
			return GetRuleContext<Component_configurationContext>(0);
		}
		public Configuration_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConfiguration_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConfiguration_item(this);
		}
	}

	[RuleVersion(0)]
	public Configuration_itemContext configuration_item() {
		Configuration_itemContext _localctx = new Configuration_itemContext(Context, State);
		EnterRule(_localctx, 38, RULE_configuration_item);
		try {
			State = 714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712;
				block_configuration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 713;
				component_configuration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_configurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_FOR() { return GetTokens(VHDLParser.KW_FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR(int i) {
			return GetToken(VHDLParser.KW_FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_specificationContext component_specification() {
			return GetRuleContext<Component_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(VHDLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(VHDLParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binding_indicationContext binding_indication() {
			return GetRuleContext<Binding_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Verification_unit_binding_indicationContext[] verification_unit_binding_indication() {
			return GetRuleContexts<Verification_unit_binding_indicationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Verification_unit_binding_indicationContext verification_unit_binding_indication(int i) {
			return GetRuleContext<Verification_unit_binding_indicationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_configurationContext block_configuration() {
			return GetRuleContext<Block_configurationContext>(0);
		}
		public Component_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_configuration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_configuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_configuration(this);
		}
	}

	[RuleVersion(0)]
	public Component_configurationContext component_configuration() {
		Component_configurationContext _localctx = new Component_configurationContext(Context, State);
		EnterRule(_localctx, 40, RULE_component_configuration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			Match(KW_FOR);
			State = 717;
			component_specification();
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 718;
				binding_indication();
				State = 719;
				Match(SEMI);
				}
				break;
			}
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_USE) {
				{
				{
				State = 723;
				verification_unit_binding_indication();
				State = 724;
				Match(SEMI);
				}
				}
				State = 730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 732;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_FOR) {
				{
				State = 731;
				block_configuration();
				}
			}

			State = 734;
			Match(KW_END);
			State = 735;
			Match(KW_FOR);
			State = 736;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_specificationContext subprogram_specification() {
			return GetRuleContext<Subprogram_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Subprogram_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSubprogram_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSubprogram_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_declarationContext subprogram_declaration() {
		Subprogram_declarationContext _localctx = new Subprogram_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_subprogram_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			subprogram_specification();
			State = 739;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_specificationContext procedure_specification() {
			return GetRuleContext<Procedure_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_specificationContext function_specification() {
			return GetRuleContext<Function_specificationContext>(0);
		}
		public Subprogram_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSubprogram_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSubprogram_specification(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_specificationContext subprogram_specification() {
		Subprogram_specificationContext _localctx = new Subprogram_specificationContext(Context, State);
		EnterRule(_localctx, 44, RULE_subprogram_specification);
		try {
			State = 743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_PROCEDURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 741;
				procedure_specification();
				}
				break;
			case KW_PURE:
			case KW_FUNCTION:
			case KW_IMPURE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 742;
				function_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROCEDURE() { return GetToken(VHDLParser.KW_PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_headerContext subprogram_header() {
			return GetRuleContext<Subprogram_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARAMETER() { return GetToken(VHDLParser.KW_PARAMETER, 0); }
		public Procedure_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProcedure_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProcedure_specification(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_specificationContext procedure_specification() {
		Procedure_specificationContext _localctx = new Procedure_specificationContext(Context, State);
		EnterRule(_localctx, 46, RULE_procedure_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(KW_PROCEDURE);
			State = 746;
			designator();
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 747;
				subprogram_header();
				}
			}

			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARAMETER || _la==LPAREN) {
				{
				State = 751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARAMETER) {
					{
					State = 750;
					Match(KW_PARAMETER);
					}
				}

				State = 753;
				Match(LPAREN);
				State = 754;
				formal_parameter_list();
				State = 755;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTION() { return GetToken(VHDLParser.KW_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RETURN() { return GetToken(VHDLParser.KW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext type_mark() {
			return GetRuleContext<Type_markContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_headerContext subprogram_header() {
			return GetRuleContext<Subprogram_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PURE() { return GetToken(VHDLParser.KW_PURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPURE() { return GetToken(VHDLParser.KW_IMPURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARAMETER() { return GetToken(VHDLParser.KW_PARAMETER, 0); }
		public Function_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFunction_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFunction_specification(this);
		}
	}

	[RuleVersion(0)]
	public Function_specificationContext function_specification() {
		Function_specificationContext _localctx = new Function_specificationContext(Context, State);
		EnterRule(_localctx, 48, RULE_function_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PURE || _la==KW_IMPURE) {
				{
				State = 759;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_PURE || _la==KW_IMPURE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 762;
			Match(KW_FUNCTION);
			State = 763;
			designator();
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 764;
				subprogram_header();
				}
			}

			State = 774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARAMETER || _la==LPAREN) {
				{
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARAMETER) {
					{
					State = 767;
					Match(KW_PARAMETER);
					}
				}

				State = 770;
				Match(LPAREN);
				State = 771;
				formal_parameter_list();
				State = 772;
				Match(RPAREN);
				}
			}

			State = 776;
			Match(KW_RETURN);
			State = 777;
			type_mark();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GENERIC() { return GetToken(VHDLParser.KW_GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_listContext generic_list() {
			return GetRuleContext<Generic_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		public Subprogram_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSubprogram_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSubprogram_header(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_headerContext subprogram_header() {
		Subprogram_headerContext _localctx = new Subprogram_headerContext(Context, State);
		EnterRule(_localctx, 50, RULE_subprogram_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			Match(KW_GENERIC);
			State = 780;
			Match(LPAREN);
			State = 781;
			generic_list();
			State = 782;
			Match(RPAREN);
			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 783;
				generic_map_aspect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_symbolContext operator_symbol() {
			return GetRuleContext<Operator_symbolContext>(0);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_designator);
		try {
			State = 788;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 786;
				identifier();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 787;
				operator_symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_symbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(VHDLParser.STRING_LITERAL, 0); }
		public Operator_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterOperator_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitOperator_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Operator_symbolContext operator_symbol() {
		Operator_symbolContext _localctx = new Operator_symbolContext(Context, State);
		EnterRule(_localctx, 54, RULE_operator_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_listContext interface_list() {
			return GetRuleContext<Interface_listContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 56, RULE_formal_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			interface_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_specificationContext subprogram_specification() {
			return GetRuleContext<Subprogram_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BEGIN() { return GetToken(VHDLParser.KW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext[] process_declarative_item() {
			return GetRuleContexts<Process_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext process_declarative_item(int i) {
			return GetRuleContext<Process_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext[] sequential_statement() {
			return GetRuleContexts<Sequential_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext sequential_statement(int i) {
			return GetRuleContext<Sequential_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_kindContext subprogram_kind() {
			return GetRuleContext<Subprogram_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public Subprogram_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSubprogram_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSubprogram_body(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_bodyContext subprogram_body() {
		Subprogram_bodyContext _localctx = new Subprogram_bodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_subprogram_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			subprogram_specification();
			State = 795;
			Match(KW_IS);
			State = 799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653562731069440L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2147680257L) != 0)) {
				{
				{
				State = 796;
				process_declarative_item();
				}
				}
				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 802;
			Match(KW_BEGIN);
			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368811290624L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2377914278563038279L) != 0)) {
				{
				{
				State = 803;
				sequential_statement();
				}
				}
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 809;
			Match(KW_END);
			State = 811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PROCEDURE || _la==KW_FUNCTION) {
				{
				State = 810;
				subprogram_kind();
				}
			}

			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 67L) != 0)) {
				{
				State = 813;
				designator();
				}
			}

			State = 816;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROCEDURE() { return GetToken(VHDLParser.KW_PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTION() { return GetToken(VHDLParser.KW_FUNCTION, 0); }
		public Subprogram_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSubprogram_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSubprogram_kind(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_kindContext subprogram_kind() {
		Subprogram_kindContext _localctx = new Subprogram_kindContext(Context, State);
		EnterRule(_localctx, 60, RULE_subprogram_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_PROCEDURE || _la==KW_FUNCTION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_instantiation_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_kindContext subprogram_kind() {
			return GetRuleContext<Subprogram_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEW() { return GetToken(VHDLParser.KW_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		public Subprogram_instantiation_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_instantiation_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSubprogram_instantiation_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSubprogram_instantiation_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_instantiation_declarationContext subprogram_instantiation_declaration() {
		Subprogram_instantiation_declarationContext _localctx = new Subprogram_instantiation_declarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_subprogram_instantiation_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			subprogram_kind();
			State = 821;
			designator();
			State = 822;
			Match(KW_IS);
			State = 823;
			Match(KW_NEW);
			State = 824;
			name(0);
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSQUARE_BR) {
				{
				State = 825;
				signature();
				}
			}

			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 828;
				generic_map_aspect();
				}
			}

			State = 831;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE_BR() { return GetToken(VHDLParser.LSQUARE_BR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE_BR() { return GetToken(VHDLParser.RSQUARE_BR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext[] type_mark() {
			return GetRuleContexts<Type_markContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext type_mark(int i) {
			return GetRuleContext<Type_markContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RETURN() { return GetToken(VHDLParser.KW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 64, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			Match(LSQUARE_BR);
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 16777315L) != 0)) {
				{
				State = 834;
				type_mark();
				State = 839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 835;
					Match(COMMA);
					State = 836;
					type_mark();
					}
					}
					State = 841;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RETURN) {
				{
				State = 844;
				Match(KW_RETURN);
				State = 845;
				type_mark();
				}
			}

			State = 848;
			Match(RSQUARE_BR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_PACKAGE() { return GetTokens(VHDLParser.KW_PACKAGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PACKAGE(int i) {
			return GetToken(VHDLParser.KW_PACKAGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(VHDLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(VHDLParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_clauseContext generic_clause() {
			return GetRuleContext<Generic_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_declarative_itemContext[] package_declarative_item() {
			return GetRuleContexts<Package_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_declarative_itemContext package_declarative_item(int i) {
			return GetRuleContext<Package_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		public Package_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPackage_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPackage_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Package_declarationContext package_declaration() {
		Package_declarationContext _localctx = new Package_declarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_package_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			Match(KW_PACKAGE);
			State = 851;
			identifier();
			State = 852;
			Match(KW_IS);
			State = 859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 853;
				generic_clause();
				State = 857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_GENERIC) {
					{
					State = 854;
					generic_map_aspect();
					State = 855;
					Match(SEMI);
					}
				}

				}
			}

			State = 864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653567294472224L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2147680257L) != 0)) {
				{
				{
				State = 861;
				package_declarative_item();
				}
				}
				State = 866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 867;
			Match(KW_END);
			State = 869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PACKAGE) {
				{
				State = 868;
				Match(KW_PACKAGE);
				}
			}

			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 871;
				identifier();
				}
			}

			State = 874;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Process_or_package_declarative_itemContext process_or_package_declarative_item() {
			return GetRuleContext<Process_or_package_declarative_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_declarationContext signal_declaration() {
			return GetRuleContext<Signal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_declarationContext component_declaration() {
			return GetRuleContext<Component_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Disconnection_specificationContext disconnection_specification() {
			return GetRuleContext<Disconnection_specificationContext>(0);
		}
		public Package_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPackage_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPackage_declarative_item(this);
		}
	}

	[RuleVersion(0)]
	public Package_declarative_itemContext package_declarative_item() {
		Package_declarative_itemContext _localctx = new Package_declarative_itemContext(Context, State);
		EnterRule(_localctx, 68, RULE_package_declarative_item);
		try {
			State = 880;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_GROUP:
			case KW_FILE:
			case KW_PURE:
			case KW_USE:
			case KW_SHARED:
			case KW_PROCEDURE:
			case KW_ATTRIBUTE:
			case KW_VARIABLE:
			case KW_SUBTYPE:
			case KW_CONSTANT:
			case KW_FUNCTION:
			case KW_ALIAS:
			case KW_IMPURE:
			case KW_PACKAGE:
			case KW_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 876;
				process_or_package_declarative_item();
				}
				break;
			case KW_SIGNAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 877;
				signal_declaration();
				}
				break;
			case KW_COMPONENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 878;
				component_declaration();
				}
				break;
			case KW_DISCONNECT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 879;
				disconnection_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_PACKAGE() { return GetTokens(VHDLParser.KW_PACKAGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PACKAGE(int i) {
			return GetToken(VHDLParser.KW_PACKAGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_BODY() { return GetTokens(VHDLParser.KW_BODY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BODY(int i) {
			return GetToken(VHDLParser.KW_BODY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext[] process_declarative_item() {
			return GetRuleContexts<Process_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext process_declarative_item(int i) {
			return GetRuleContext<Process_declarative_itemContext>(i);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPackage_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPackage_body(this);
		}
	}

	[RuleVersion(0)]
	public Package_bodyContext package_body() {
		Package_bodyContext _localctx = new Package_bodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_package_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882;
			Match(KW_PACKAGE);
			State = 883;
			Match(KW_BODY);
			State = 884;
			identifier();
			State = 885;
			Match(KW_IS);
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653562731069440L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2147680257L) != 0)) {
				{
				{
				State = 886;
				process_declarative_item();
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 892;
			Match(KW_END);
			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PACKAGE) {
				{
				State = 893;
				Match(KW_PACKAGE);
				State = 894;
				Match(KW_BODY);
				}
			}

			State = 898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 897;
				identifier();
				}
			}

			State = 900;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_instantiation_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PACKAGE() { return GetToken(VHDLParser.KW_PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEW() { return GetToken(VHDLParser.KW_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		public Package_instantiation_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_instantiation_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPackage_instantiation_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPackage_instantiation_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Package_instantiation_declarationContext package_instantiation_declaration() {
		Package_instantiation_declarationContext _localctx = new Package_instantiation_declarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_package_instantiation_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			Match(KW_PACKAGE);
			State = 903;
			identifier();
			State = 904;
			Match(KW_IS);
			State = 905;
			Match(KW_NEW);
			State = 906;
			name(0);
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 907;
				generic_map_aspect();
				}
			}

			State = 910;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_definitionContext enumeration_type_definition() {
			return GetRuleContext<Enumeration_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_type_definitionContext integer_type_definition() {
			return GetRuleContext<Integer_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Floating_type_definitionContext floating_type_definition() {
			return GetRuleContext<Floating_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Physical_type_definitionContext physical_type_definition() {
			return GetRuleContext<Physical_type_definitionContext>(0);
		}
		public Scalar_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterScalar_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitScalar_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_type_definitionContext scalar_type_definition() {
		Scalar_type_definitionContext _localctx = new Scalar_type_definitionContext(Context, State);
		EnterRule(_localctx, 74, RULE_scalar_type_definition);
		try {
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 912;
				enumeration_type_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 913;
				integer_type_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 914;
				floating_type_definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 915;
				physical_type_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RANGE() { return GetToken(VHDLParser.KW_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public Range_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterRange_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitRange_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Range_constraintContext range_constraint() {
		Range_constraintContext _localctx = new Range_constraintContext(Context, State);
		EnterRule(_localctx, 76, RULE_range_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(KW_RANGE);
			State = 919;
			range();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_rangeContext explicit_range() {
			return GetRuleContext<Explicit_rangeContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 78, RULE_range);
		try {
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 921;
				attribute_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 922;
				explicit_range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(VHDLParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOWNTO() { return GetToken(VHDLParser.KW_DOWNTO, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 80, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_TO || _la==KW_DOWNTO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_literalContext[] enumeration_literal() {
			return GetRuleContexts<Enumeration_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_literalContext enumeration_literal(int i) {
			return GetRuleContext<Enumeration_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Enumeration_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEnumeration_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEnumeration_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_type_definitionContext enumeration_type_definition() {
		Enumeration_type_definitionContext _localctx = new Enumeration_type_definitionContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumeration_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927;
			Match(LPAREN);
			State = 928;
			enumeration_literal();
			State = 933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 929;
				Match(COMMA);
				State = 930;
				enumeration_literal();
				}
				}
				State = 935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 936;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(VHDLParser.CHARACTER_LITERAL, 0); }
		public Enumeration_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEnumeration_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEnumeration_literal(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_literalContext enumeration_literal() {
		Enumeration_literalContext _localctx = new Enumeration_literalContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumeration_literal);
		try {
			State = 940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 938;
				identifier();
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 939;
				Match(CHARACTER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_constraintContext range_constraint() {
			return GetRuleContext<Range_constraintContext>(0);
		}
		public Integer_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInteger_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInteger_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Integer_type_definitionContext integer_type_definition() {
		Integer_type_definitionContext _localctx = new Integer_type_definitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_integer_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			range_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Physical_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_constraintContext range_constraint() {
			return GetRuleContext<Range_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_UNITS() { return GetTokens(VHDLParser.KW_UNITS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNITS(int i) {
			return GetToken(VHDLParser.KW_UNITS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_unit_declarationContext primary_unit_declaration() {
			return GetRuleContext<Primary_unit_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Secondary_unit_declarationContext[] secondary_unit_declaration() {
			return GetRuleContexts<Secondary_unit_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Secondary_unit_declarationContext secondary_unit_declaration(int i) {
			return GetRuleContext<Secondary_unit_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Physical_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_physical_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPhysical_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPhysical_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Physical_type_definitionContext physical_type_definition() {
		Physical_type_definitionContext _localctx = new Physical_type_definitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_physical_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			range_constraint();
			State = 945;
			Match(KW_UNITS);
			State = 946;
			primary_unit_declaration();
			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				{
				State = 947;
				secondary_unit_declaration();
				}
				}
				State = 952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 953;
			Match(KW_END);
			State = 954;
			Match(KW_UNITS);
			State = 956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 955;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_unit_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Primary_unit_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_unit_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPrimary_unit_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPrimary_unit_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Primary_unit_declarationContext primary_unit_declaration() {
		Primary_unit_declarationContext _localctx = new Primary_unit_declarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_primary_unit_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958;
			identifier();
			State = 959;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_unit_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(VHDLParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Physical_literalContext physical_literal() {
			return GetRuleContext<Physical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Secondary_unit_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_unit_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSecondary_unit_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSecondary_unit_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_unit_declarationContext secondary_unit_declaration() {
		Secondary_unit_declarationContext _localctx = new Secondary_unit_declarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_secondary_unit_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			identifier();
			State = 962;
			Match(EQ);
			State = 963;
			physical_literal();
			State = 964;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_constraintContext range_constraint() {
			return GetRuleContext<Range_constraintContext>(0);
		}
		public Floating_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFloating_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFloating_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Floating_type_definitionContext floating_type_definition() {
		Floating_type_definitionContext _localctx = new Floating_type_definitionContext(Context, State);
		EnterRule(_localctx, 94, RULE_floating_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			range_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Composite_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_definitionContext array_type_definition() {
			return GetRuleContext<Array_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Record_type_definitionContext record_type_definition() {
			return GetRuleContext<Record_type_definitionContext>(0);
		}
		public Composite_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composite_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterComposite_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitComposite_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Composite_type_definitionContext composite_type_definition() {
		Composite_type_definitionContext _localctx = new Composite_type_definitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_composite_type_definition);
		try {
			State = 970;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 968;
				array_type_definition();
				}
				break;
			case KW_RECORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 969;
				record_type_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unbounded_array_definitionContext unbounded_array_definition() {
			return GetRuleContext<Unbounded_array_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constrained_array_definitionContext constrained_array_definition() {
			return GetRuleContext<Constrained_array_definitionContext>(0);
		}
		public Array_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterArray_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitArray_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Array_type_definitionContext array_type_definition() {
		Array_type_definitionContext _localctx = new Array_type_definitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_array_type_definition);
		try {
			State = 974;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 972;
				unbounded_array_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 973;
				constrained_array_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbounded_array_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARRAY() { return GetToken(VHDLParser.KW_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_subtype_definitionContext[] index_subtype_definition() {
			return GetRuleContexts<Index_subtype_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_subtype_definitionContext index_subtype_definition(int i) {
			return GetRuleContext<Index_subtype_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OF() { return GetToken(VHDLParser.KW_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Unbounded_array_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbounded_array_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterUnbounded_array_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitUnbounded_array_definition(this);
		}
	}

	[RuleVersion(0)]
	public Unbounded_array_definitionContext unbounded_array_definition() {
		Unbounded_array_definitionContext _localctx = new Unbounded_array_definitionContext(Context, State);
		EnterRule(_localctx, 100, RULE_unbounded_array_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976;
			Match(KW_ARRAY);
			State = 977;
			Match(LPAREN);
			State = 978;
			index_subtype_definition();
			State = 983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 979;
				Match(COMMA);
				State = 980;
				index_subtype_definition();
				}
				}
				State = 985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 986;
			Match(RPAREN);
			State = 987;
			Match(KW_OF);
			State = 988;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constrained_array_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARRAY() { return GetToken(VHDLParser.KW_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_constraintContext index_constraint() {
			return GetRuleContext<Index_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OF() { return GetToken(VHDLParser.KW_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public Constrained_array_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrained_array_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConstrained_array_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConstrained_array_definition(this);
		}
	}

	[RuleVersion(0)]
	public Constrained_array_definitionContext constrained_array_definition() {
		Constrained_array_definitionContext _localctx = new Constrained_array_definitionContext(Context, State);
		EnterRule(_localctx, 102, RULE_constrained_array_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			Match(KW_ARRAY);
			State = 991;
			index_constraint();
			State = 992;
			Match(KW_OF);
			State = 993;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_subtype_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext type_mark() {
			return GetRuleContext<Type_markContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RANGE() { return GetToken(VHDLParser.KW_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOX() { return GetToken(VHDLParser.BOX, 0); }
		public Index_subtype_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_subtype_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterIndex_subtype_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitIndex_subtype_definition(this);
		}
	}

	[RuleVersion(0)]
	public Index_subtype_definitionContext index_subtype_definition() {
		Index_subtype_definitionContext _localctx = new Index_subtype_definitionContext(Context, State);
		EnterRule(_localctx, 104, RULE_index_subtype_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995;
			type_mark();
			State = 996;
			Match(KW_RANGE);
			State = 997;
			Match(BOX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_constraintContext index_constraint() {
			return GetRuleContext<Index_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_element_constraintContext array_element_constraint() {
			return GetRuleContext<Array_element_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPEN() { return GetToken(VHDLParser.KW_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		public Array_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterArray_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitArray_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Array_constraintContext array_constraint() {
		Array_constraintContext _localctx = new Array_constraintContext(Context, State);
		EnterRule(_localctx, 106, RULE_array_constraint);
		try {
			State = 1009;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 999;
				index_constraint();
				State = 1001;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 1000;
					array_element_constraint();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1003;
				Match(LPAREN);
				State = 1004;
				Match(KW_OPEN);
				State = 1005;
				Match(RPAREN);
				State = 1007;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 1006;
					array_element_constraint();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_element_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Element_constraintContext element_constraint() {
			return GetRuleContext<Element_constraintContext>(0);
		}
		public Array_element_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_element_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterArray_element_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitArray_element_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Array_element_constraintContext array_element_constraint() {
		Array_element_constraintContext _localctx = new Array_element_constraintContext(Context, State);
		EnterRule(_localctx, 108, RULE_array_element_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1011;
			element_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext[] discrete_range() {
			return GetRuleContexts<Discrete_rangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext discrete_range(int i) {
			return GetRuleContext<Discrete_rangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Index_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterIndex_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitIndex_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Index_constraintContext index_constraint() {
		Index_constraintContext _localctx = new Index_constraintContext(Context, State);
		EnterRule(_localctx, 110, RULE_index_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			Match(LPAREN);
			State = 1014;
			discrete_range();
			State = 1019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1015;
				Match(COMMA);
				State = 1016;
				discrete_range();
				}
				}
				State = 1021;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1022;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Discrete_rangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public Discrete_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discrete_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterDiscrete_range(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitDiscrete_range(this);
		}
	}

	[RuleVersion(0)]
	public Discrete_rangeContext discrete_range() {
		Discrete_rangeContext _localctx = new Discrete_rangeContext(Context, State);
		EnterRule(_localctx, 112, RULE_discrete_range);
		try {
			State = 1026;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1024;
				subtype_indication();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1025;
				range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_RECORD() { return GetTokens(VHDLParser.KW_RECORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RECORD(int i) {
			return GetToken(VHDLParser.KW_RECORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_declarationContext[] element_declaration() {
			return GetRuleContexts<Element_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Element_declarationContext element_declaration(int i) {
			return GetRuleContext<Element_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Record_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterRecord_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitRecord_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Record_type_definitionContext record_type_definition() {
		Record_type_definitionContext _localctx = new Record_type_definitionContext(Context, State);
		EnterRule(_localctx, 114, RULE_record_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028;
			Match(KW_RECORD);
			State = 1030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1029;
				element_declaration();
				}
				}
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER );
			State = 1034;
			Match(KW_END);
			State = 1035;
			Match(KW_RECORD);
			State = 1037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1036;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_subtype_definitionContext element_subtype_definition() {
			return GetRuleContext<Element_subtype_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Element_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterElement_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitElement_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Element_declarationContext element_declaration() {
		Element_declarationContext _localctx = new Element_declarationContext(Context, State);
		EnterRule(_localctx, 116, RULE_element_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1039;
			identifier_list();
			State = 1040;
			Match(COLON);
			State = 1041;
			element_subtype_definition();
			State = 1042;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterIdentifier_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitIdentifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_listContext identifier_list() {
		Identifier_listContext _localctx = new Identifier_listContext(Context, State);
		EnterRule(_localctx, 118, RULE_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044;
			identifier();
			State = 1049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1045;
				Match(COMMA);
				State = 1046;
				identifier();
				}
				}
				State = 1051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_subtype_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public Element_subtype_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_subtype_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterElement_subtype_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitElement_subtype_definition(this);
		}
	}

	[RuleVersion(0)]
	public Element_subtype_definitionContext element_subtype_definition() {
		Element_subtype_definitionContext _localctx = new Element_subtype_definitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_element_subtype_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Record_element_constraintContext[] record_element_constraint() {
			return GetRuleContexts<Record_element_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Record_element_constraintContext record_element_constraint(int i) {
			return GetRuleContext<Record_element_constraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Record_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterRecord_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitRecord_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Record_constraintContext record_constraint() {
		Record_constraintContext _localctx = new Record_constraintContext(Context, State);
		EnterRule(_localctx, 122, RULE_record_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054;
			Match(LPAREN);
			State = 1055;
			record_element_constraint();
			State = 1060;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1056;
				Match(COMMA);
				State = 1057;
				record_element_constraint();
				}
				}
				State = 1062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1063;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_element_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Element_constraintContext element_constraint() {
			return GetRuleContext<Element_constraintContext>(0);
		}
		public Record_element_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_element_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterRecord_element_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitRecord_element_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Record_element_constraintContext record_element_constraint() {
		Record_element_constraintContext _localctx = new Record_element_constraintContext(Context, State);
		EnterRule(_localctx, 124, RULE_record_element_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			identifier();
			State = 1066;
			element_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ACCESS() { return GetToken(VHDLParser.KW_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public Access_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAccess_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAccess_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Access_type_definitionContext access_type_definition() {
		Access_type_definitionContext _localctx = new Access_type_definitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_access_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068;
			Match(KW_ACCESS);
			State = 1069;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Incomplete_type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPE() { return GetToken(VHDLParser.KW_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Incomplete_type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incomplete_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterIncomplete_type_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitIncomplete_type_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Incomplete_type_declarationContext incomplete_type_declaration() {
		Incomplete_type_declarationContext _localctx = new Incomplete_type_declarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_incomplete_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			Match(KW_TYPE);
			State = 1072;
			identifier();
			State = 1073;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FILE() { return GetToken(VHDLParser.KW_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OF() { return GetToken(VHDLParser.KW_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext type_mark() {
			return GetRuleContext<Type_markContext>(0);
		}
		public File_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFile_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFile_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public File_type_definitionContext file_type_definition() {
		File_type_definitionContext _localctx = new File_type_definitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_file_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075;
			Match(KW_FILE);
			State = 1076;
			Match(KW_OF);
			State = 1077;
			type_mark();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protected_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Protected_type_declarationContext protected_type_declaration() {
			return GetRuleContext<Protected_type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protected_type_bodyContext protected_type_body() {
			return GetRuleContext<Protected_type_bodyContext>(0);
		}
		public Protected_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protected_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProtected_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProtected_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Protected_type_definitionContext protected_type_definition() {
		Protected_type_definitionContext _localctx = new Protected_type_definitionContext(Context, State);
		EnterRule(_localctx, 132, RULE_protected_type_definition);
		try {
			State = 1081;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1079;
				protected_type_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1080;
				protected_type_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protected_type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_PROTECTED() { return GetTokens(VHDLParser.KW_PROTECTED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROTECTED(int i) {
			return GetToken(VHDLParser.KW_PROTECTED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Protected_type_declarative_itemContext[] protected_type_declarative_item() {
			return GetRuleContexts<Protected_type_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protected_type_declarative_itemContext protected_type_declarative_item(int i) {
			return GetRuleContext<Protected_type_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Protected_type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protected_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProtected_type_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProtected_type_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Protected_type_declarationContext protected_type_declaration() {
		Protected_type_declarationContext _localctx = new Protected_type_declarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_protected_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083;
			Match(KW_PROTECTED);
			State = 1087;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & -9223372019674316767L) != 0)) {
				{
				{
				State = 1084;
				protected_type_declarative_item();
				}
				}
				State = 1089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1090;
			Match(KW_END);
			State = 1091;
			Match(KW_PROTECTED);
			State = 1093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1092;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protected_type_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarationContext subprogram_declaration() {
			return GetRuleContext<Subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_instantiation_declarationContext subprogram_instantiation_declaration() {
			return GetRuleContext<Subprogram_instantiation_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		public Protected_type_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protected_type_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProtected_type_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProtected_type_declarative_item(this);
		}
	}

	[RuleVersion(0)]
	public Protected_type_declarative_itemContext protected_type_declarative_item() {
		Protected_type_declarative_itemContext _localctx = new Protected_type_declarative_itemContext(Context, State);
		EnterRule(_localctx, 136, RULE_protected_type_declarative_item);
		try {
			State = 1099;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1095;
				subprogram_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1096;
				subprogram_instantiation_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1097;
				attribute_specification();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1098;
				use_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protected_type_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_PROTECTED() { return GetTokens(VHDLParser.KW_PROTECTED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROTECTED(int i) {
			return GetToken(VHDLParser.KW_PROTECTED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_BODY() { return GetTokens(VHDLParser.KW_BODY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BODY(int i) {
			return GetToken(VHDLParser.KW_BODY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext[] process_declarative_item() {
			return GetRuleContexts<Process_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext process_declarative_item(int i) {
			return GetRuleContext<Process_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Protected_type_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protected_type_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProtected_type_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProtected_type_body(this);
		}
	}

	[RuleVersion(0)]
	public Protected_type_bodyContext protected_type_body() {
		Protected_type_bodyContext _localctx = new Protected_type_bodyContext(Context, State);
		EnterRule(_localctx, 138, RULE_protected_type_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101;
			Match(KW_PROTECTED);
			State = 1102;
			Match(KW_BODY);
			State = 1106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653562731069440L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2147680257L) != 0)) {
				{
				{
				State = 1103;
				process_declarative_item();
				}
				}
				State = 1108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1109;
			Match(KW_END);
			State = 1110;
			Match(KW_PROTECTED);
			State = 1111;
			Match(KW_BODY);
			State = 1113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1112;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_type_declarationContext full_type_declaration() {
			return GetRuleContext<Full_type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Incomplete_type_declarationContext incomplete_type_declaration() {
			return GetRuleContext<Incomplete_type_declarationContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 140, RULE_type_declaration);
		try {
			State = 1117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1115;
				full_type_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1116;
				incomplete_type_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPE() { return GetToken(VHDLParser.KW_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition() {
			return GetRuleContext<Type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Full_type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFull_type_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFull_type_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Full_type_declarationContext full_type_declaration() {
		Full_type_declarationContext _localctx = new Full_type_declarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_full_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119;
			Match(KW_TYPE);
			State = 1120;
			identifier();
			State = 1121;
			Match(KW_IS);
			State = 1122;
			type_definition();
			State = 1123;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_type_definitionContext scalar_type_definition() {
			return GetRuleContext<Scalar_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Composite_type_definitionContext composite_type_definition() {
			return GetRuleContext<Composite_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_type_definitionContext access_type_definition() {
			return GetRuleContext<Access_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_type_definitionContext file_type_definition() {
			return GetRuleContext<File_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protected_type_definitionContext protected_type_definition() {
			return GetRuleContext<Protected_type_definitionContext>(0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 144, RULE_type_definition);
		try {
			State = 1130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_RANGE:
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1125;
				scalar_type_definition();
				}
				break;
			case KW_RECORD:
			case KW_ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1126;
				composite_type_definition();
				}
				break;
			case KW_ACCESS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1127;
				access_type_definition();
				}
				break;
			case KW_FILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1128;
				file_type_definition();
				}
				break;
			case KW_PROTECTED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1129;
				protected_type_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUBTYPE() { return GetToken(VHDLParser.KW_SUBTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSubtype_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSubtype_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_declarationContext subtype_declaration() {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(Context, State);
		EnterRule(_localctx, 146, RULE_subtype_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132;
			Match(KW_SUBTYPE);
			State = 1133;
			identifier();
			State = 1134;
			Match(KW_IS);
			State = 1135;
			subtype_indication();
			State = 1136;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_indicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext type_mark() {
			return GetRuleContext<Type_markContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Resolution_indicationContext resolution_indication() {
			return GetRuleContext<Resolution_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public Subtype_indicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_indication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSubtype_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSubtype_indication(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_indicationContext subtype_indication() {
		Subtype_indicationContext _localctx = new Subtype_indicationContext(Context, State);
		EnterRule(_localctx, 148, RULE_subtype_indication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 1138;
				resolution_indication();
				}
				break;
			}
			State = 1141;
			type_mark();
			State = 1143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1142;
				constraint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resolution_indicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_resolutionContext element_resolution() {
			return GetRuleContext<Element_resolutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		public Resolution_indicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resolution_indication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterResolution_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitResolution_indication(this);
		}
	}

	[RuleVersion(0)]
	public Resolution_indicationContext resolution_indication() {
		Resolution_indicationContext _localctx = new Resolution_indicationContext(Context, State);
		EnterRule(_localctx, 150, RULE_resolution_indication);
		try {
			State = 1150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case SHIFT_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1145;
				name(0);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1146;
				Match(LPAREN);
				State = 1147;
				element_resolution();
				State = 1148;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_resolutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_element_resolutionContext array_element_resolution() {
			return GetRuleContext<Array_element_resolutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Record_resolutionContext record_resolution() {
			return GetRuleContext<Record_resolutionContext>(0);
		}
		public Element_resolutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_resolution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterElement_resolution(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitElement_resolution(this);
		}
	}

	[RuleVersion(0)]
	public Element_resolutionContext element_resolution() {
		Element_resolutionContext _localctx = new Element_resolutionContext(Context, State);
		EnterRule(_localctx, 152, RULE_element_resolution);
		try {
			State = 1154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1152;
				array_element_resolution();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1153;
				record_resolution();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_element_resolutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Resolution_indicationContext resolution_indication() {
			return GetRuleContext<Resolution_indicationContext>(0);
		}
		public Array_element_resolutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_element_resolution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterArray_element_resolution(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitArray_element_resolution(this);
		}
	}

	[RuleVersion(0)]
	public Array_element_resolutionContext array_element_resolution() {
		Array_element_resolutionContext _localctx = new Array_element_resolutionContext(Context, State);
		EnterRule(_localctx, 154, RULE_array_element_resolution);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1156;
			resolution_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_resolutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Record_element_resolutionContext[] record_element_resolution() {
			return GetRuleContexts<Record_element_resolutionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Record_element_resolutionContext record_element_resolution(int i) {
			return GetRuleContext<Record_element_resolutionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Record_resolutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_resolution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterRecord_resolution(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitRecord_resolution(this);
		}
	}

	[RuleVersion(0)]
	public Record_resolutionContext record_resolution() {
		Record_resolutionContext _localctx = new Record_resolutionContext(Context, State);
		EnterRule(_localctx, 156, RULE_record_resolution);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158;
			record_element_resolution();
			State = 1163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1159;
				Match(COMMA);
				State = 1160;
				record_element_resolution();
				}
				}
				State = 1165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_element_resolutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Resolution_indicationContext resolution_indication() {
			return GetRuleContext<Resolution_indicationContext>(0);
		}
		public Record_element_resolutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_element_resolution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterRecord_element_resolution(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitRecord_element_resolution(this);
		}
	}

	[RuleVersion(0)]
	public Record_element_resolutionContext record_element_resolution() {
		Record_element_resolutionContext _localctx = new Record_element_resolutionContext(Context, State);
		EnterRule(_localctx, 158, RULE_record_element_resolution);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			identifier();
			State = 1167;
			resolution_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_markContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Type_markContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_mark; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterType_mark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitType_mark(this);
		}
	}

	[RuleVersion(0)]
	public Type_markContext type_mark() {
		Type_markContext _localctx = new Type_markContext(Context, State);
		EnterRule(_localctx, 160, RULE_type_mark);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1169;
			name(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_constraintContext range_constraint() {
			return GetRuleContext<Range_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Element_constraintContext element_constraint() {
			return GetRuleContext<Element_constraintContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 162, RULE_constraint);
		try {
			State = 1173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1171;
				range_constraint();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1172;
				element_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_constraintContext array_constraint() {
			return GetRuleContext<Array_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Record_constraintContext record_constraint() {
			return GetRuleContext<Record_constraintContext>(0);
		}
		public Element_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterElement_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitElement_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Element_constraintContext element_constraint() {
		Element_constraintContext _localctx = new Element_constraintContext(Context, State);
		EnterRule(_localctx, 164, RULE_element_constraint);
		try {
			State = 1177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1175;
				array_constraint();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1176;
				record_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_declarationContext signal_declaration() {
			return GetRuleContext<Signal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_declarationContext file_declaration() {
			return GetRuleContext<File_declarationContext>(0);
		}
		public Object_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterObject_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitObject_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Object_declarationContext object_declaration() {
		Object_declarationContext _localctx = new Object_declarationContext(Context, State);
		EnterRule(_localctx, 166, RULE_object_declaration);
		try {
			State = 1183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1179;
				constant_declaration();
				}
				break;
			case KW_SIGNAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1180;
				signal_declaration();
				}
				break;
			case KW_SHARED:
			case KW_VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1181;
				variable_declaration();
				}
				break;
			case KW_FILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1182;
				file_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTANT() { return GetToken(VHDLParser.KW_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(VHDLParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 168, RULE_constant_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185;
			Match(KW_CONSTANT);
			State = 1186;
			identifier_list();
			State = 1187;
			Match(COLON);
			State = 1188;
			subtype_indication();
			State = 1191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1189;
				Match(VARASGN);
				State = 1190;
				expression(0);
				}
			}

			State = 1193;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SIGNAL() { return GetToken(VHDLParser.KW_SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signal_kindContext signal_kind() {
			return GetRuleContext<Signal_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(VHDLParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Signal_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSignal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSignal_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Signal_declarationContext signal_declaration() {
		Signal_declarationContext _localctx = new Signal_declarationContext(Context, State);
		EnterRule(_localctx, 170, RULE_signal_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195;
			Match(KW_SIGNAL);
			State = 1196;
			identifier_list();
			State = 1197;
			Match(COLON);
			State = 1198;
			subtype_indication();
			State = 1200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_REGISTER || _la==KW_BUS) {
				{
				State = 1199;
				signal_kind();
				}
			}

			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1202;
				Match(VARASGN);
				State = 1203;
				expression(0);
				}
			}

			State = 1206;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REGISTER() { return GetToken(VHDLParser.KW_REGISTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUS() { return GetToken(VHDLParser.KW_BUS, 0); }
		public Signal_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSignal_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSignal_kind(this);
		}
	}

	[RuleVersion(0)]
	public Signal_kindContext signal_kind() {
		Signal_kindContext _localctx = new Signal_kindContext(Context, State);
		EnterRule(_localctx, 172, RULE_signal_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_REGISTER || _la==KW_BUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VARIABLE() { return GetToken(VHDLParser.KW_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHARED() { return GetToken(VHDLParser.KW_SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(VHDLParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 174, RULE_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_SHARED) {
				{
				State = 1210;
				Match(KW_SHARED);
				}
			}

			State = 1213;
			Match(KW_VARIABLE);
			State = 1214;
			identifier_list();
			State = 1215;
			Match(COLON);
			State = 1216;
			subtype_indication();
			State = 1219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1217;
				Match(VARASGN);
				State = 1218;
				expression(0);
				}
			}

			State = 1221;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FILE() { return GetToken(VHDLParser.KW_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_open_informationContext file_open_information() {
			return GetRuleContext<File_open_informationContext>(0);
		}
		public File_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFile_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFile_declaration(this);
		}
	}

	[RuleVersion(0)]
	public File_declarationContext file_declaration() {
		File_declarationContext _localctx = new File_declarationContext(Context, State);
		EnterRule(_localctx, 176, RULE_file_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223;
			Match(KW_FILE);
			State = 1224;
			identifier_list();
			State = 1225;
			Match(COLON);
			State = 1226;
			subtype_indication();
			State = 1228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IS || _la==KW_OPEN) {
				{
				State = 1227;
				file_open_information();
				}
			}

			State = 1230;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_open_informationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_logical_nameContext file_logical_name() {
			return GetRuleContext<File_logical_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPEN() { return GetToken(VHDLParser.KW_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(VHDLParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUT() { return GetToken(VHDLParser.KW_OUT, 0); }
		public File_open_informationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_open_information; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFile_open_information(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFile_open_information(this);
		}
	}

	[RuleVersion(0)]
	public File_open_informationContext file_open_information() {
		File_open_informationContext _localctx = new File_open_informationContext(Context, State);
		EnterRule(_localctx, 178, RULE_file_open_information);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_OPEN) {
				{
				State = 1232;
				Match(KW_OPEN);
				State = 1233;
				expression(0);
				}
			}

			State = 1236;
			Match(KW_IS);
			State = 1238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IN || _la==KW_OUT) {
				{
				State = 1237;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_IN || _la==KW_OUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1240;
			file_logical_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_logical_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public File_logical_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_logical_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFile_logical_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFile_logical_name(this);
		}
	}

	[RuleVersion(0)]
	public File_logical_nameContext file_logical_name() {
		File_logical_nameContext _localctx = new File_logical_nameContext(Context, State);
		EnterRule(_localctx, 180, RULE_file_logical_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1242;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_object_declarationContext interface_object_declaration() {
			return GetRuleContext<Interface_object_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_declarationContext interface_type_declaration() {
			return GetRuleContext<Interface_type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_subprogram_declarationContext interface_subprogram_declaration() {
			return GetRuleContext<Interface_subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_package_declarationContext interface_package_declaration() {
			return GetRuleContext<Interface_package_declarationContext>(0);
		}
		public Interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_declarationContext interface_declaration() {
		Interface_declarationContext _localctx = new Interface_declarationContext(Context, State);
		EnterRule(_localctx, 182, RULE_interface_declaration);
		try {
			State = 1248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_FILE:
			case KW_SIGNAL:
			case KW_VARIABLE:
			case KW_CONSTANT:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1244;
				interface_object_declaration();
				}
				break;
			case KW_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1245;
				interface_type_declaration();
				}
				break;
			case KW_PURE:
			case KW_PROCEDURE:
			case KW_FUNCTION:
			case KW_IMPURE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1246;
				interface_subprogram_declaration();
				}
				break;
			case KW_PACKAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1247;
				interface_package_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_object_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_constant_declarationContext interface_constant_declaration() {
			return GetRuleContext<Interface_constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_signal_declarationContext interface_signal_declaration() {
			return GetRuleContext<Interface_signal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_variable_declarationContext interface_variable_declaration() {
			return GetRuleContext<Interface_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_file_declarationContext interface_file_declaration() {
			return GetRuleContext<Interface_file_declarationContext>(0);
		}
		public Interface_object_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_object_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_object_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_object_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_object_declarationContext interface_object_declaration() {
		Interface_object_declarationContext _localctx = new Interface_object_declarationContext(Context, State);
		EnterRule(_localctx, 184, RULE_interface_object_declaration);
		try {
			State = 1254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1250;
				interface_constant_declaration();
				}
				break;
			case KW_SIGNAL:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1251;
				interface_signal_declaration();
				}
				break;
			case KW_VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1252;
				interface_variable_declaration();
				}
				break;
			case KW_FILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1253;
				interface_file_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTANT() { return GetToken(VHDLParser.KW_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(VHDLParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(VHDLParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Interface_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_constant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_constant_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_constant_declarationContext interface_constant_declaration() {
		Interface_constant_declarationContext _localctx = new Interface_constant_declarationContext(Context, State);
		EnterRule(_localctx, 186, RULE_interface_constant_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256;
			Match(KW_CONSTANT);
			State = 1257;
			identifier_list();
			State = 1258;
			Match(COLON);
			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IN) {
				{
				State = 1259;
				Match(KW_IN);
				}
			}

			State = 1262;
			subtype_indication();
			State = 1265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1263;
				Match(VARASGN);
				State = 1264;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_signal_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SIGNAL() { return GetToken(VHDLParser.KW_SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signal_modeContext signal_mode() {
			return GetRuleContext<Signal_modeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUS() { return GetToken(VHDLParser.KW_BUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(VHDLParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Interface_signal_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_signal_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_signal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_signal_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_signal_declarationContext interface_signal_declaration() {
		Interface_signal_declarationContext _localctx = new Interface_signal_declarationContext(Context, State);
		EnterRule(_localctx, 188, RULE_interface_signal_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_SIGNAL) {
				{
				State = 1267;
				Match(KW_SIGNAL);
				}
			}

			State = 1270;
			identifier_list();
			State = 1271;
			Match(COLON);
			State = 1273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LINKAGE || _la==KW_BUFFER || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 8388737L) != 0)) {
				{
				State = 1272;
				signal_mode();
				}
			}

			State = 1275;
			subtype_indication();
			State = 1277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_BUS) {
				{
				State = 1276;
				Match(KW_BUS);
				}
			}

			State = 1281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1279;
				Match(VARASGN);
				State = 1280;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VARIABLE() { return GetToken(VHDLParser.KW_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_modeContext signal_mode() {
			return GetRuleContext<Signal_modeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(VHDLParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Interface_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_variable_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_variable_declarationContext interface_variable_declaration() {
		Interface_variable_declarationContext _localctx = new Interface_variable_declarationContext(Context, State);
		EnterRule(_localctx, 190, RULE_interface_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			Match(KW_VARIABLE);
			State = 1284;
			identifier_list();
			State = 1285;
			Match(COLON);
			State = 1287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LINKAGE || _la==KW_BUFFER || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 8388737L) != 0)) {
				{
				State = 1286;
				signal_mode();
				}
			}

			State = 1289;
			subtype_indication();
			State = 1292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1290;
				Match(VARASGN);
				State = 1291;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_file_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FILE() { return GetToken(VHDLParser.KW_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public Interface_file_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_file_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_file_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_file_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_file_declarationContext interface_file_declaration() {
		Interface_file_declarationContext _localctx = new Interface_file_declarationContext(Context, State);
		EnterRule(_localctx, 192, RULE_interface_file_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1294;
			Match(KW_FILE);
			State = 1295;
			identifier_list();
			State = 1296;
			Match(COLON);
			State = 1297;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_modeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(VHDLParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUT() { return GetToken(VHDLParser.KW_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INOUT() { return GetToken(VHDLParser.KW_INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUFFER() { return GetToken(VHDLParser.KW_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LINKAGE() { return GetToken(VHDLParser.KW_LINKAGE, 0); }
		public Signal_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_mode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSignal_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSignal_mode(this);
		}
	}

	[RuleVersion(0)]
	public Signal_modeContext signal_mode() {
		Signal_modeContext _localctx = new Signal_modeContext(Context, State);
		EnterRule(_localctx, 194, RULE_signal_mode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_LINKAGE || _la==KW_BUFFER || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 8388737L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_incomplete_type_declarationContext interface_incomplete_type_declaration() {
			return GetRuleContext<Interface_incomplete_type_declarationContext>(0);
		}
		public Interface_type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_type_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_type_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_declarationContext interface_type_declaration() {
		Interface_type_declarationContext _localctx = new Interface_type_declarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_interface_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			interface_incomplete_type_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_incomplete_type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPE() { return GetToken(VHDLParser.KW_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_incomplete_type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_incomplete_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_incomplete_type_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_incomplete_type_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_incomplete_type_declarationContext interface_incomplete_type_declaration() {
		Interface_incomplete_type_declarationContext _localctx = new Interface_incomplete_type_declarationContext(Context, State);
		EnterRule(_localctx, 198, RULE_interface_incomplete_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			Match(KW_TYPE);
			State = 1304;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_subprogram_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_subprogram_specificationContext interface_subprogram_specification() {
			return GetRuleContext<Interface_subprogram_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_subprogram_defaultContext interface_subprogram_default() {
			return GetRuleContext<Interface_subprogram_defaultContext>(0);
		}
		public Interface_subprogram_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_subprogram_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_subprogram_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_subprogram_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_subprogram_declarationContext interface_subprogram_declaration() {
		Interface_subprogram_declarationContext _localctx = new Interface_subprogram_declarationContext(Context, State);
		EnterRule(_localctx, 200, RULE_interface_subprogram_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1306;
			interface_subprogram_specification();
			State = 1309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IS) {
				{
				State = 1307;
				Match(KW_IS);
				State = 1308;
				interface_subprogram_default();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_subprogram_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_procedure_specificationContext interface_procedure_specification() {
			return GetRuleContext<Interface_procedure_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_function_specificationContext interface_function_specification() {
			return GetRuleContext<Interface_function_specificationContext>(0);
		}
		public Interface_subprogram_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_subprogram_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_subprogram_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_subprogram_specification(this);
		}
	}

	[RuleVersion(0)]
	public Interface_subprogram_specificationContext interface_subprogram_specification() {
		Interface_subprogram_specificationContext _localctx = new Interface_subprogram_specificationContext(Context, State);
		EnterRule(_localctx, 202, RULE_interface_subprogram_specification);
		try {
			State = 1313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_PROCEDURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1311;
				interface_procedure_specification();
				}
				break;
			case KW_PURE:
			case KW_FUNCTION:
			case KW_IMPURE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1312;
				interface_function_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_procedure_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROCEDURE() { return GetToken(VHDLParser.KW_PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARAMETER() { return GetToken(VHDLParser.KW_PARAMETER, 0); }
		public Interface_procedure_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_procedure_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_procedure_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_procedure_specification(this);
		}
	}

	[RuleVersion(0)]
	public Interface_procedure_specificationContext interface_procedure_specification() {
		Interface_procedure_specificationContext _localctx = new Interface_procedure_specificationContext(Context, State);
		EnterRule(_localctx, 204, RULE_interface_procedure_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315;
			Match(KW_PROCEDURE);
			State = 1316;
			designator();
			State = 1324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARAMETER || _la==LPAREN) {
				{
				State = 1318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARAMETER) {
					{
					State = 1317;
					Match(KW_PARAMETER);
					}
				}

				State = 1320;
				Match(LPAREN);
				State = 1321;
				formal_parameter_list();
				State = 1322;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_function_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTION() { return GetToken(VHDLParser.KW_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RETURN() { return GetToken(VHDLParser.KW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext type_mark() {
			return GetRuleContext<Type_markContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PURE() { return GetToken(VHDLParser.KW_PURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPURE() { return GetToken(VHDLParser.KW_IMPURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARAMETER() { return GetToken(VHDLParser.KW_PARAMETER, 0); }
		public Interface_function_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_function_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_function_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_function_specification(this);
		}
	}

	[RuleVersion(0)]
	public Interface_function_specificationContext interface_function_specification() {
		Interface_function_specificationContext _localctx = new Interface_function_specificationContext(Context, State);
		EnterRule(_localctx, 206, RULE_interface_function_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PURE || _la==KW_IMPURE) {
				{
				State = 1326;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_PURE || _la==KW_IMPURE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1329;
			Match(KW_FUNCTION);
			State = 1330;
			designator();
			State = 1338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARAMETER || _la==LPAREN) {
				{
				State = 1332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARAMETER) {
					{
					State = 1331;
					Match(KW_PARAMETER);
					}
				}

				State = 1334;
				Match(LPAREN);
				State = 1335;
				formal_parameter_list();
				State = 1336;
				Match(RPAREN);
				}
			}

			State = 1340;
			Match(KW_RETURN);
			State = 1341;
			type_mark();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_subprogram_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOX() { return GetToken(VHDLParser.BOX, 0); }
		public Interface_subprogram_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_subprogram_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_subprogram_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_subprogram_default(this);
		}
	}

	[RuleVersion(0)]
	public Interface_subprogram_defaultContext interface_subprogram_default() {
		Interface_subprogram_defaultContext _localctx = new Interface_subprogram_defaultContext(Context, State);
		EnterRule(_localctx, 208, RULE_interface_subprogram_default);
		try {
			State = 1345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case SHIFT_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1343;
				name(0);
				}
				break;
			case BOX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1344;
				Match(BOX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_package_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PACKAGE() { return GetToken(VHDLParser.KW_PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEW() { return GetToken(VHDLParser.KW_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_package_generic_map_aspectContext interface_package_generic_map_aspect() {
			return GetRuleContext<Interface_package_generic_map_aspectContext>(0);
		}
		public Interface_package_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_package_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_package_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_package_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_package_declarationContext interface_package_declaration() {
		Interface_package_declarationContext _localctx = new Interface_package_declarationContext(Context, State);
		EnterRule(_localctx, 210, RULE_interface_package_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347;
			Match(KW_PACKAGE);
			State = 1348;
			identifier();
			State = 1349;
			Match(KW_IS);
			State = 1350;
			Match(KW_NEW);
			State = 1351;
			name(0);
			State = 1352;
			interface_package_generic_map_aspect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_package_generic_map_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GENERIC() { return GetToken(VHDLParser.KW_GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(VHDLParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOX() { return GetToken(VHDLParser.BOX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFAULT() { return GetToken(VHDLParser.KW_DEFAULT, 0); }
		public Interface_package_generic_map_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_package_generic_map_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_package_generic_map_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_package_generic_map_aspect(this);
		}
	}

	[RuleVersion(0)]
	public Interface_package_generic_map_aspectContext interface_package_generic_map_aspect() {
		Interface_package_generic_map_aspectContext _localctx = new Interface_package_generic_map_aspectContext(Context, State);
		EnterRule(_localctx, 212, RULE_interface_package_generic_map_aspect);
		try {
			State = 1365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1354;
				generic_map_aspect();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1355;
				Match(KW_GENERIC);
				State = 1356;
				Match(KW_MAP);
				State = 1357;
				Match(LPAREN);
				State = 1358;
				Match(BOX);
				State = 1359;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1360;
				Match(KW_GENERIC);
				State = 1361;
				Match(KW_MAP);
				State = 1362;
				Match(LPAREN);
				State = 1363;
				Match(KW_DEFAULT);
				State = 1364;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_elementContext[] interface_element() {
			return GetRuleContexts<Interface_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_elementContext interface_element(int i) {
			return GetRuleContext<Interface_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(VHDLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(VHDLParser.SEMI, i);
		}
		public Interface_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_list(this);
		}
	}

	[RuleVersion(0)]
	public Interface_listContext interface_list() {
		Interface_listContext _localctx = new Interface_listContext(Context, State);
		EnterRule(_localctx, 214, RULE_interface_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367;
			interface_element();
			State = 1372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 1368;
				Match(SEMI);
				State = 1369;
				interface_element();
				}
				}
				State = 1374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_declarationContext interface_declaration() {
			return GetRuleContext<Interface_declarationContext>(0);
		}
		public Interface_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_element(this);
		}
	}

	[RuleVersion(0)]
	public Interface_elementContext interface_element() {
		Interface_elementContext _localctx = new Interface_elementContext(Context, State);
		EnterRule(_localctx, 216, RULE_interface_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			interface_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GENERIC() { return GetToken(VHDLParser.KW_GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_listContext generic_list() {
			return GetRuleContext<Generic_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Generic_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_clause(this);
		}
	}

	[RuleVersion(0)]
	public Generic_clauseContext generic_clause() {
		Generic_clauseContext _localctx = new Generic_clauseContext(Context, State);
		EnterRule(_localctx, 218, RULE_generic_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377;
			Match(KW_GENERIC);
			State = 1378;
			Match(LPAREN);
			State = 1379;
			generic_list();
			State = 1380;
			Match(RPAREN);
			State = 1381;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_listContext interface_list() {
			return GetRuleContext<Interface_listContext>(0);
		}
		public Generic_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_list(this);
		}
	}

	[RuleVersion(0)]
	public Generic_listContext generic_list() {
		Generic_listContext _localctx = new Generic_listContext(Context, State);
		EnterRule(_localctx, 220, RULE_generic_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383;
			interface_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PORT() { return GetToken(VHDLParser.KW_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Port_listContext port_list() {
			return GetRuleContext<Port_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Port_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPort_clause(this);
		}
	}

	[RuleVersion(0)]
	public Port_clauseContext port_clause() {
		Port_clauseContext _localctx = new Port_clauseContext(Context, State);
		EnterRule(_localctx, 222, RULE_port_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385;
			Match(KW_PORT);
			State = 1386;
			Match(LPAREN);
			State = 1387;
			port_list();
			State = 1388;
			Match(RPAREN);
			State = 1389;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_listContext interface_list() {
			return GetRuleContext<Interface_listContext>(0);
		}
		public Port_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPort_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPort_list(this);
		}
	}

	[RuleVersion(0)]
	public Port_listContext port_list() {
		Port_listContext _localctx = new Port_listContext(Context, State);
		EnterRule(_localctx, 224, RULE_port_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1391;
			interface_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Association_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Association_elementContext[] association_element() {
			return GetRuleContexts<Association_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Association_elementContext association_element(int i) {
			return GetRuleContext<Association_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Association_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAssociation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAssociation_list(this);
		}
	}

	[RuleVersion(0)]
	public Association_listContext association_list() {
		Association_listContext _localctx = new Association_listContext(Context, State);
		EnterRule(_localctx, 226, RULE_association_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1393;
			Match(LPAREN);
			State = 1394;
			association_element();
			State = 1399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1395;
				Match(COMMA);
				State = 1396;
				association_element();
				}
				}
				State = 1401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1402;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Association_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Actual_partContext actual_part() {
			return GetRuleContext<Actual_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_partContext formal_part() {
			return GetRuleContext<Formal_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(VHDLParser.ARROW, 0); }
		public Association_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAssociation_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAssociation_element(this);
		}
	}

	[RuleVersion(0)]
	public Association_elementContext association_element() {
		Association_elementContext _localctx = new Association_elementContext(Context, State);
		EnterRule(_localctx, 228, RULE_association_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 1404;
				formal_part();
				State = 1405;
				Match(ARROW);
				}
				break;
			}
			State = 1409;
			actual_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		public Formal_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFormal_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFormal_part(this);
		}
	}

	[RuleVersion(0)]
	public Formal_partContext formal_part() {
		Formal_partContext _localctx = new Formal_partContext(Context, State);
		EnterRule(_localctx, 230, RULE_formal_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1411;
			name(0);
			State = 1416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1412;
				Match(LPAREN);
				State = 1413;
				name(0);
				State = 1414;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Actual_designatorContext actual_designator() {
			return GetRuleContext<Actual_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		public Actual_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterActual_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitActual_part(this);
		}
	}

	[RuleVersion(0)]
	public Actual_partContext actual_part() {
		Actual_partContext _localctx = new Actual_partContext(Context, State);
		EnterRule(_localctx, 232, RULE_actual_part);
		try {
			State = 1424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1418;
				name(0);
				State = 1419;
				Match(LPAREN);
				State = 1420;
				actual_designator();
				State = 1421;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1423;
				actual_designator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INERTIAL() { return GetToken(VHDLParser.KW_INERTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPEN() { return GetToken(VHDLParser.KW_OPEN, 0); }
		public Actual_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterActual_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitActual_designator(this);
		}
	}

	[RuleVersion(0)]
	public Actual_designatorContext actual_designator() {
		Actual_designatorContext _localctx = new Actual_designatorContext(Context, State);
		EnterRule(_localctx, 234, RULE_actual_designator);
		int _la;
		try {
			State = 1432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_INERTIAL) {
					{
					State = 1426;
					Match(KW_INERTIAL);
					}
				}

				State = 1429;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1430;
				subtype_indication();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1431;
				Match(KW_OPEN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_map_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GENERIC() { return GetToken(VHDLParser.KW_GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(VHDLParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Association_listContext association_list() {
			return GetRuleContext<Association_listContext>(0);
		}
		public Generic_map_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_map_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_map_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_map_aspect(this);
		}
	}

	[RuleVersion(0)]
	public Generic_map_aspectContext generic_map_aspect() {
		Generic_map_aspectContext _localctx = new Generic_map_aspectContext(Context, State);
		EnterRule(_localctx, 236, RULE_generic_map_aspect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1434;
			Match(KW_GENERIC);
			State = 1435;
			Match(KW_MAP);
			State = 1436;
			association_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_map_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PORT() { return GetToken(VHDLParser.KW_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(VHDLParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Association_listContext association_list() {
			return GetRuleContext<Association_listContext>(0);
		}
		public Port_map_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_map_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPort_map_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPort_map_aspect(this);
		}
	}

	[RuleVersion(0)]
	public Port_map_aspectContext port_map_aspect() {
		Port_map_aspectContext _localctx = new Port_map_aspectContext(Context, State);
		EnterRule(_localctx, 238, RULE_port_map_aspect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438;
			Match(KW_PORT);
			State = 1439;
			Match(KW_MAP);
			State = 1440;
			association_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALIAS() { return GetToken(VHDLParser.KW_ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alias_designatorContext alias_designator() {
			return GetRuleContext<Alias_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public Alias_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAlias_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAlias_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Alias_declarationContext alias_declaration() {
		Alias_declarationContext _localctx = new Alias_declarationContext(Context, State);
		EnterRule(_localctx, 240, RULE_alias_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442;
			Match(KW_ALIAS);
			State = 1443;
			alias_designator();
			State = 1446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1444;
				Match(COLON);
				State = 1445;
				subtype_indication();
				}
			}

			State = 1448;
			Match(KW_IS);
			State = 1449;
			name(0);
			State = 1451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSQUARE_BR) {
				{
				State = 1450;
				signature();
				}
			}

			State = 1453;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(VHDLParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_symbolContext operator_symbol() {
			return GetRuleContext<Operator_symbolContext>(0);
		}
		public Alias_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAlias_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAlias_designator(this);
		}
	}

	[RuleVersion(0)]
	public Alias_designatorContext alias_designator() {
		Alias_designatorContext _localctx = new Alias_designatorContext(Context, State);
		EnterRule(_localctx, 242, RULE_alias_designator);
		try {
			State = 1458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1455;
				identifier();
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1456;
				Match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1457;
				operator_symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ATTRIBUTE() { return GetToken(VHDLParser.KW_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext type_mark() {
			return GetRuleContext<Type_markContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Attribute_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAttribute_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAttribute_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declarationContext attribute_declaration() {
		Attribute_declarationContext _localctx = new Attribute_declarationContext(Context, State);
		EnterRule(_localctx, 244, RULE_attribute_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1460;
			Match(KW_ATTRIBUTE);
			State = 1461;
			identifier();
			State = 1462;
			Match(COLON);
			State = 1463;
			type_mark();
			State = 1464;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_COMPONENT() { return GetTokens(VHDLParser.KW_COMPONENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPONENT(int i) {
			return GetToken(VHDLParser.KW_COMPONENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_clauseContext generic_clause() {
			return GetRuleContext<Generic_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_clauseContext port_clause() {
			return GetRuleContext<Port_clauseContext>(0);
		}
		public Component_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Component_declarationContext component_declaration() {
		Component_declarationContext _localctx = new Component_declarationContext(Context, State);
		EnterRule(_localctx, 246, RULE_component_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466;
			Match(KW_COMPONENT);
			State = 1467;
			identifier();
			State = 1469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IS) {
				{
				State = 1468;
				Match(KW_IS);
				}
			}

			State = 1472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 1471;
				generic_clause();
				}
			}

			State = 1475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PORT) {
				{
				State = 1474;
				port_clause();
				}
			}

			State = 1477;
			Match(KW_END);
			State = 1478;
			Match(KW_COMPONENT);
			State = 1480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1479;
				identifier();
				}
			}

			State = 1482;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_template_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GROUP() { return GetToken(VHDLParser.KW_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_class_entry_listContext entity_class_entry_list() {
			return GetRuleContext<Entity_class_entry_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Group_template_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_template_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGroup_template_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGroup_template_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Group_template_declarationContext group_template_declaration() {
		Group_template_declarationContext _localctx = new Group_template_declarationContext(Context, State);
		EnterRule(_localctx, 248, RULE_group_template_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484;
			Match(KW_GROUP);
			State = 1485;
			identifier();
			State = 1486;
			Match(KW_IS);
			State = 1487;
			Match(LPAREN);
			State = 1488;
			entity_class_entry_list();
			State = 1489;
			Match(RPAREN);
			State = 1490;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_class_entry_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_class_entryContext[] entity_class_entry() {
			return GetRuleContexts<Entity_class_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_class_entryContext entity_class_entry(int i) {
			return GetRuleContext<Entity_class_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Entity_class_entry_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_class_entry_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_class_entry_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_class_entry_list(this);
		}
	}

	[RuleVersion(0)]
	public Entity_class_entry_listContext entity_class_entry_list() {
		Entity_class_entry_listContext _localctx = new Entity_class_entry_listContext(Context, State);
		EnterRule(_localctx, 250, RULE_entity_class_entry_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492;
			entity_class_entry();
			State = 1497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1493;
				Match(COMMA);
				State = 1494;
				entity_class_entry();
				}
				}
				State = 1499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_class_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_classContext entity_class() {
			return GetRuleContext<Entity_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOX() { return GetToken(VHDLParser.BOX, 0); }
		public Entity_class_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_class_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_class_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_class_entry(this);
		}
	}

	[RuleVersion(0)]
	public Entity_class_entryContext entity_class_entry() {
		Entity_class_entryContext _localctx = new Entity_class_entryContext(Context, State);
		EnterRule(_localctx, 252, RULE_entity_class_entry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1500;
			entity_class();
			State = 1502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOX) {
				{
				State = 1501;
				Match(BOX);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GROUP() { return GetToken(VHDLParser.KW_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_constituent_listContext group_constituent_list() {
			return GetRuleContext<Group_constituent_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Group_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGroup_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGroup_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Group_declarationContext group_declaration() {
		Group_declarationContext _localctx = new Group_declarationContext(Context, State);
		EnterRule(_localctx, 254, RULE_group_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1504;
			Match(KW_GROUP);
			State = 1505;
			identifier();
			State = 1506;
			Match(COLON);
			State = 1507;
			name(0);
			State = 1508;
			Match(LPAREN);
			State = 1509;
			group_constituent_list();
			State = 1510;
			Match(RPAREN);
			State = 1511;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_constituent_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Group_constituentContext[] group_constituent() {
			return GetRuleContexts<Group_constituentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_constituentContext group_constituent(int i) {
			return GetRuleContext<Group_constituentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Group_constituent_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_constituent_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGroup_constituent_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGroup_constituent_list(this);
		}
	}

	[RuleVersion(0)]
	public Group_constituent_listContext group_constituent_list() {
		Group_constituent_listContext _localctx = new Group_constituent_listContext(Context, State);
		EnterRule(_localctx, 256, RULE_group_constituent_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513;
			group_constituent();
			State = 1518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1514;
				Match(COMMA);
				State = 1515;
				group_constituent();
				}
				}
				State = 1520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_constituentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Group_constituentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_constituent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGroup_constituent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGroup_constituent(this);
		}
	}

	[RuleVersion(0)]
	public Group_constituentContext group_constituent() {
		Group_constituentContext _localctx = new Group_constituentContext(Context, State);
		EnterRule(_localctx, 258, RULE_group_constituent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1521;
			name(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ATTRIBUTE() { return GetToken(VHDLParser.KW_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_designatorContext attribute_designator() {
			return GetRuleContext<Attribute_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OF() { return GetToken(VHDLParser.KW_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_specificationContext entity_specification() {
			return GetRuleContext<Entity_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Attribute_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAttribute_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAttribute_specification(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_specificationContext attribute_specification() {
		Attribute_specificationContext _localctx = new Attribute_specificationContext(Context, State);
		EnterRule(_localctx, 260, RULE_attribute_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1523;
			Match(KW_ATTRIBUTE);
			State = 1524;
			attribute_designator();
			State = 1525;
			Match(KW_OF);
			State = 1526;
			entity_specification();
			State = 1527;
			Match(KW_IS);
			State = 1528;
			expression(0);
			State = 1529;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_name_listContext entity_name_list() {
			return GetRuleContext<Entity_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_classContext entity_class() {
			return GetRuleContext<Entity_classContext>(0);
		}
		public Entity_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_specification(this);
		}
	}

	[RuleVersion(0)]
	public Entity_specificationContext entity_specification() {
		Entity_specificationContext _localctx = new Entity_specificationContext(Context, State);
		EnterRule(_localctx, 262, RULE_entity_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531;
			entity_name_list();
			State = 1532;
			Match(COLON);
			State = 1533;
			entity_class();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENTITY() { return GetToken(VHDLParser.KW_ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARCHITECTURE() { return GetToken(VHDLParser.KW_ARCHITECTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONFIGURATION() { return GetToken(VHDLParser.KW_CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROCEDURE() { return GetToken(VHDLParser.KW_PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTION() { return GetToken(VHDLParser.KW_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PACKAGE() { return GetToken(VHDLParser.KW_PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPE() { return GetToken(VHDLParser.KW_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUBTYPE() { return GetToken(VHDLParser.KW_SUBTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTANT() { return GetToken(VHDLParser.KW_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SIGNAL() { return GetToken(VHDLParser.KW_SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VARIABLE() { return GetToken(VHDLParser.KW_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPONENT() { return GetToken(VHDLParser.KW_COMPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LABEL() { return GetToken(VHDLParser.KW_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LITERAL() { return GetToken(VHDLParser.KW_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNITS() { return GetToken(VHDLParser.KW_UNITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GROUP() { return GetToken(VHDLParser.KW_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FILE() { return GetToken(VHDLParser.KW_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROPERTY() { return GetToken(VHDLParser.KW_PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SEQUENCE() { return GetToken(VHDLParser.KW_SEQUENCE, 0); }
		public Entity_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_class(this);
		}
	}

	[RuleVersion(0)]
	public Entity_classContext entity_class() {
		Entity_classContext _localctx = new Entity_classContext(Context, State);
		EnterRule(_localctx, 264, RULE_entity_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -9218718061563830240L) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 675875L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_designatorContext[] entity_designator() {
			return GetRuleContexts<Entity_designatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_designatorContext entity_designator(int i) {
			return GetRuleContext<Entity_designatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OTHERS() { return GetToken(VHDLParser.KW_OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(VHDLParser.KW_ALL, 0); }
		public Entity_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_listContext entity_name_list() {
		Entity_name_listContext _localctx = new Entity_name_listContext(Context, State);
		EnterRule(_localctx, 266, RULE_entity_name_list);
		int _la;
		try {
			State = 1547;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1537;
				entity_designator();
				State = 1542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1538;
					Match(COMMA);
					State = 1539;
					entity_designator();
					}
					}
					State = 1544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case KW_OTHERS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545;
				Match(KW_OTHERS);
				}
				break;
			case KW_ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1546;
				Match(KW_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_tagContext entity_tag() {
			return GetRuleContext<Entity_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public Entity_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_designator(this);
		}
	}

	[RuleVersion(0)]
	public Entity_designatorContext entity_designator() {
		Entity_designatorContext _localctx = new Entity_designatorContext(Context, State);
		EnterRule(_localctx, 268, RULE_entity_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549;
			entity_tag();
			State = 1551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSQUARE_BR) {
				{
				State = 1550;
				signature();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(VHDLParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_symbolContext operator_symbol() {
			return GetRuleContext<Operator_symbolContext>(0);
		}
		public Entity_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_tag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_tag(this);
		}
	}

	[RuleVersion(0)]
	public Entity_tagContext entity_tag() {
		Entity_tagContext _localctx = new Entity_tagContext(Context, State);
		EnterRule(_localctx, 270, RULE_entity_tag);
		try {
			State = 1556;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1553;
				identifier();
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1554;
				Match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1555;
				operator_symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Configuration_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_configuration_specificationContext simple_configuration_specification() {
			return GetRuleContext<Simple_configuration_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_configuration_specificationContext compound_configuration_specification() {
			return GetRuleContext<Compound_configuration_specificationContext>(0);
		}
		public Configuration_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConfiguration_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConfiguration_specification(this);
		}
	}

	[RuleVersion(0)]
	public Configuration_specificationContext configuration_specification() {
		Configuration_specificationContext _localctx = new Configuration_specificationContext(Context, State);
		EnterRule(_localctx, 272, RULE_configuration_specification);
		try {
			State = 1560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1558;
				simple_configuration_specification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1559;
				compound_configuration_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_configuration_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_FOR() { return GetTokens(VHDLParser.KW_FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR(int i) {
			return GetToken(VHDLParser.KW_FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_specificationContext component_specification() {
			return GetRuleContext<Component_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binding_indicationContext binding_indication() {
			return GetRuleContext<Binding_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(VHDLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(VHDLParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		public Simple_configuration_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_configuration_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_configuration_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_configuration_specification(this);
		}
	}

	[RuleVersion(0)]
	public Simple_configuration_specificationContext simple_configuration_specification() {
		Simple_configuration_specificationContext _localctx = new Simple_configuration_specificationContext(Context, State);
		EnterRule(_localctx, 274, RULE_simple_configuration_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1562;
			Match(KW_FOR);
			State = 1563;
			component_specification();
			State = 1564;
			binding_indication();
			State = 1565;
			Match(SEMI);
			State = 1569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_END) {
				{
				State = 1566;
				Match(KW_END);
				State = 1567;
				Match(KW_FOR);
				State = 1568;
				Match(SEMI);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_configuration_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_FOR() { return GetTokens(VHDLParser.KW_FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR(int i) {
			return GetToken(VHDLParser.KW_FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_specificationContext component_specification() {
			return GetRuleContext<Component_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binding_indicationContext binding_indication() {
			return GetRuleContext<Binding_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(VHDLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(VHDLParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Verification_unit_binding_indicationContext[] verification_unit_binding_indication() {
			return GetRuleContexts<Verification_unit_binding_indicationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Verification_unit_binding_indicationContext verification_unit_binding_indication(int i) {
			return GetRuleContext<Verification_unit_binding_indicationContext>(i);
		}
		public Compound_configuration_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_configuration_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterCompound_configuration_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitCompound_configuration_specification(this);
		}
	}

	[RuleVersion(0)]
	public Compound_configuration_specificationContext compound_configuration_specification() {
		Compound_configuration_specificationContext _localctx = new Compound_configuration_specificationContext(Context, State);
		EnterRule(_localctx, 276, RULE_compound_configuration_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1571;
			Match(KW_FOR);
			State = 1572;
			component_specification();
			State = 1573;
			binding_indication();
			State = 1574;
			Match(SEMI);
			State = 1578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1575;
				verification_unit_binding_indication();
				State = 1576;
				Match(SEMI);
				}
				}
				State = 1580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_USE );
			State = 1582;
			Match(KW_END);
			State = 1583;
			Match(KW_FOR);
			State = 1584;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Instantiation_listContext instantiation_list() {
			return GetRuleContext<Instantiation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Component_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_specification(this);
		}
	}

	[RuleVersion(0)]
	public Component_specificationContext component_specification() {
		Component_specificationContext _localctx = new Component_specificationContext(Context, State);
		EnterRule(_localctx, 278, RULE_component_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1586;
			instantiation_list();
			State = 1587;
			Match(COLON);
			State = 1588;
			name(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instantiation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OTHERS() { return GetToken(VHDLParser.KW_OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(VHDLParser.KW_ALL, 0); }
		public Instantiation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instantiation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInstantiation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInstantiation_list(this);
		}
	}

	[RuleVersion(0)]
	public Instantiation_listContext instantiation_list() {
		Instantiation_listContext _localctx = new Instantiation_listContext(Context, State);
		EnterRule(_localctx, 280, RULE_instantiation_list);
		int _la;
		try {
			State = 1600;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1590;
				label();
				State = 1595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1591;
					Match(COMMA);
					State = 1592;
					label();
					}
					}
					State = 1597;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case KW_OTHERS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1598;
				Match(KW_OTHERS);
				}
				break;
			case KW_ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1599;
				Match(KW_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binding_indicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USE() { return GetToken(VHDLParser.KW_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_aspectContext entity_aspect() {
			return GetRuleContext<Entity_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_map_aspectContext port_map_aspect() {
			return GetRuleContext<Port_map_aspectContext>(0);
		}
		public Binding_indicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding_indication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterBinding_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitBinding_indication(this);
		}
	}

	[RuleVersion(0)]
	public Binding_indicationContext binding_indication() {
		Binding_indicationContext _localctx = new Binding_indicationContext(Context, State);
		EnterRule(_localctx, 282, RULE_binding_indication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_USE) {
				{
				State = 1602;
				Match(KW_USE);
				State = 1603;
				entity_aspect();
				}
			}

			State = 1607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 1606;
				generic_map_aspect();
				}
			}

			State = 1610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PORT) {
				{
				State = 1609;
				port_map_aspect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENTITY() { return GetToken(VHDLParser.KW_ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONFIGURATION() { return GetToken(VHDLParser.KW_CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPEN() { return GetToken(VHDLParser.KW_OPEN, 0); }
		public Entity_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterEntity_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitEntity_aspect(this);
		}
	}

	[RuleVersion(0)]
	public Entity_aspectContext entity_aspect() {
		Entity_aspectContext _localctx = new Entity_aspectContext(Context, State);
		EnterRule(_localctx, 284, RULE_entity_aspect);
		int _la;
		try {
			State = 1623;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ENTITY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1612;
				Match(KW_ENTITY);
				State = 1613;
				name(0);
				State = 1618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 1614;
					Match(LPAREN);
					State = 1615;
					identifier();
					State = 1616;
					Match(RPAREN);
					}
				}

				}
				break;
			case KW_CONFIGURATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1620;
				Match(KW_CONFIGURATION);
				State = 1621;
				name(0);
				}
				break;
			case KW_OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1622;
				Match(KW_OPEN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Verification_unit_binding_indicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USE() { return GetToken(VHDLParser.KW_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VUNIT() { return GetToken(VHDLParser.KW_VUNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Verification_unit_listContext verification_unit_list() {
			return GetRuleContext<Verification_unit_listContext>(0);
		}
		public Verification_unit_binding_indicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verification_unit_binding_indication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterVerification_unit_binding_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitVerification_unit_binding_indication(this);
		}
	}

	[RuleVersion(0)]
	public Verification_unit_binding_indicationContext verification_unit_binding_indication() {
		Verification_unit_binding_indicationContext _localctx = new Verification_unit_binding_indicationContext(Context, State);
		EnterRule(_localctx, 286, RULE_verification_unit_binding_indication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625;
			Match(KW_USE);
			State = 1626;
			Match(KW_VUNIT);
			State = 1627;
			verification_unit_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Verification_unit_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Verification_unit_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verification_unit_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterVerification_unit_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitVerification_unit_list(this);
		}
	}

	[RuleVersion(0)]
	public Verification_unit_listContext verification_unit_list() {
		Verification_unit_listContext _localctx = new Verification_unit_listContext(Context, State);
		EnterRule(_localctx, 288, RULE_verification_unit_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1629;
			name(0);
			State = 1634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1630;
				Match(COMMA);
				State = 1631;
				name(0);
				}
				}
				State = 1636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disconnection_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISCONNECT() { return GetToken(VHDLParser.KW_DISCONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Guarded_signal_specificationContext guarded_signal_specification() {
			return GetRuleContext<Guarded_signal_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AFTER() { return GetToken(VHDLParser.KW_AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Disconnection_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disconnection_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterDisconnection_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitDisconnection_specification(this);
		}
	}

	[RuleVersion(0)]
	public Disconnection_specificationContext disconnection_specification() {
		Disconnection_specificationContext _localctx = new Disconnection_specificationContext(Context, State);
		EnterRule(_localctx, 290, RULE_disconnection_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1637;
			Match(KW_DISCONNECT);
			State = 1638;
			guarded_signal_specification();
			State = 1639;
			Match(KW_AFTER);
			State = 1640;
			expression(0);
			State = 1641;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Guarded_signal_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signal_listContext signal_list() {
			return GetRuleContext<Signal_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext type_mark() {
			return GetRuleContext<Type_markContext>(0);
		}
		public Guarded_signal_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guarded_signal_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGuarded_signal_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGuarded_signal_specification(this);
		}
	}

	[RuleVersion(0)]
	public Guarded_signal_specificationContext guarded_signal_specification() {
		Guarded_signal_specificationContext _localctx = new Guarded_signal_specificationContext(Context, State);
		EnterRule(_localctx, 292, RULE_guarded_signal_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1643;
			signal_list();
			State = 1644;
			Match(COLON);
			State = 1645;
			type_mark();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OTHERS() { return GetToken(VHDLParser.KW_OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(VHDLParser.KW_ALL, 0); }
		public Signal_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSignal_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSignal_list(this);
		}
	}

	[RuleVersion(0)]
	public Signal_listContext signal_list() {
		Signal_listContext _localctx = new Signal_listContext(Context, State);
		EnterRule(_localctx, 294, RULE_signal_list);
		int _la;
		try {
			State = 1657;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case SHIFT_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1647;
				name(0);
				State = 1652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1648;
					Match(COMMA);
					State = 1649;
					name(0);
					}
					}
					State = 1654;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case KW_OTHERS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1655;
				Match(KW_OTHERS);
				}
				break;
			case KW_ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1656;
				Match(KW_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_keywordContext any_keyword() {
			return GetRuleContext<Any_keywordContext>(0);
		}
		public Attribute_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAttribute_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAttribute_designator(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_designatorContext attribute_designator() {
		Attribute_designatorContext _localctx = new Attribute_designatorContext(Context, State);
		EnterRule(_localctx, 296, RULE_attribute_designator);
		try {
			State = 1661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1659;
				identifier();
				}
				break;
			case KW_PROCESS:
			case KW_CONTEXT:
			case KW_POSTPONED:
			case KW_LINKAGE:
			case KW_COMPONENT:
			case KW_ABS:
			case KW_DEFAULT:
			case KW_THEN:
			case KW_BLOCK:
			case KW_REM:
			case KW_INERTIAL:
			case KW_NEXT:
			case KW_ENTITY:
			case KW_ON:
			case KW_GROUP:
			case KW_XNOR:
			case KW_FILE:
			case KW_PURE:
			case KW_GUARDED:
			case KW_GENERIC:
			case KW_RANGE:
			case KW_ELSE:
			case KW_USE:
			case KW_SHARED:
			case KW_MOD:
			case KW_LOOP:
			case KW_RECORD:
			case KW_SIGNAL:
			case KW_REJECT:
			case KW_BEGIN:
			case KW_SLA:
			case KW_DISCONNECT:
			case KW_OF:
			case KW_PROCEDURE:
			case KW_SRL:
			case KW_VUNIT:
			case KW_ATTRIBUTE:
			case KW_VARIABLE:
			case KW_PROPERTY:
			case KW_UNAFFECTED:
			case KW_XOR:
			case KW_REGISTER:
			case KW_SUBTYPE:
			case KW_TO:
			case KW_NEW:
			case KW_REPORT:
			case KW_CONSTANT:
			case KW_BUFFER:
			case KW_BODY:
			case KW_AFTER:
			case KW_TRANSPORT:
			case KW_FUNCTION:
			case KW_END:
			case KW_SELECT:
			case KW_OR:
			case KW_LIBRARY:
			case KW_ELSIF:
			case KW_SLL:
			case KW_MAP:
			case KW_SRA:
			case KW_PROTECTED:
			case KW_DOWNTO:
			case KW_LABEL:
			case KW_ALL:
			case KW_ALIAS:
			case KW_GENERATE:
			case KW_NOR:
			case KW_IN:
			case KW_RELEASE:
			case KW_EXIT:
			case KW_RETURN:
			case KW_WITH:
			case KW_UNTIL:
			case KW_AND:
			case KW_INOUT:
			case KW_WAIT:
			case KW_NAND:
			case KW_ARRAY:
			case KW_FORCE:
			case KW_WHILE:
			case KW_IMPURE:
			case KW_PACKAGE:
			case KW_UNITS:
			case KW_ASSERT:
			case KW_PARAMETER:
			case KW_SEVERITY:
			case KW_LITERAL:
			case KW_FOR:
			case KW_ROR:
			case KW_IF:
			case KW_OUT:
			case KW_ROL:
			case KW_IS:
			case KW_SEQUENCE:
			case KW_OTHERS:
			case KW_TYPE:
			case KW_CASE:
			case KW_NOT:
			case KW_CONFIGURATION:
			case KW_OPEN:
			case KW_ARCHITECTURE:
			case KW_BUS:
			case KW_ACCESS:
			case KW_WHEN:
			case KW_PORT:
			case KW_NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1660;
				any_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_LEFT() { return GetToken(VHDLParser.SHIFT_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public External_pathnameContext external_pathname() {
			return GetRuleContext<External_pathnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_RIGHT() { return GetToken(VHDLParser.SHIFT_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VARIABLE() { return GetToken(VHDLParser.KW_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTANT() { return GetToken(VHDLParser.KW_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SIGNAL() { return GetToken(VHDLParser.KW_SIGNAL, 0); }
		public External_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterExternal_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitExternal_name(this);
		}
	}

	[RuleVersion(0)]
	public External_nameContext external_name() {
		External_nameContext _localctx = new External_nameContext(Context, State);
		EnterRule(_localctx, 298, RULE_external_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1663;
			Match(SHIFT_LEFT);
			State = 1664;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 141012634697728L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1665;
			external_pathname();
			State = 1666;
			Match(COLON);
			State = 1667;
			subtype_indication();
			State = 1668;
			Match(SHIFT_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_pathnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Package_pathnameContext package_pathname() {
			return GetRuleContext<Package_pathnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Absolute_pathnameContext absolute_pathname() {
			return GetRuleContext<Absolute_pathnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relative_pathnameContext relative_pathname() {
			return GetRuleContext<Relative_pathnameContext>(0);
		}
		public External_pathnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_pathname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterExternal_pathname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitExternal_pathname(this);
		}
	}

	[RuleVersion(0)]
	public External_pathnameContext external_pathname() {
		External_pathnameContext _localctx = new External_pathnameContext(Context, State);
		EnterRule(_localctx, 300, RULE_external_pathname);
		try {
			State = 1673;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1670;
				package_pathname();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1671;
				absolute_pathname();
				}
				break;
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case UP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1672;
				relative_pathname();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_pathnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(VHDLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(VHDLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(VHDLParser.DOT, i);
		}
		public Package_pathnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_pathname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPackage_pathname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPackage_pathname(this);
		}
	}

	[RuleVersion(0)]
	public Package_pathnameContext package_pathname() {
		Package_pathnameContext _localctx = new Package_pathnameContext(Context, State);
		EnterRule(_localctx, 302, RULE_package_pathname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1675;
			Match(AT);
			State = 1676;
			identifier();
			State = 1677;
			Match(DOT);
			State = 1678;
			identifier();
			State = 1679;
			Match(DOT);
			State = 1680;
			identifier();
			State = 1685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1681;
				Match(DOT);
				State = 1682;
				identifier();
				}
				}
				State = 1687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Absolute_pathnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(VHDLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Partial_pathnameContext partial_pathname() {
			return GetRuleContext<Partial_pathnameContext>(0);
		}
		public Absolute_pathnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absolute_pathname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAbsolute_pathname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAbsolute_pathname(this);
		}
	}

	[RuleVersion(0)]
	public Absolute_pathnameContext absolute_pathname() {
		Absolute_pathnameContext _localctx = new Absolute_pathnameContext(Context, State);
		EnterRule(_localctx, 304, RULE_absolute_pathname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1688;
			Match(DOT);
			State = 1689;
			partial_pathname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relative_pathnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Partial_pathnameContext partial_pathname() {
			return GetRuleContext<Partial_pathnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UP() { return GetTokens(VHDLParser.UP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UP(int i) {
			return GetToken(VHDLParser.UP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(VHDLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(VHDLParser.DOT, i);
		}
		public Relative_pathnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relative_pathname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterRelative_pathname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitRelative_pathname(this);
		}
	}

	[RuleVersion(0)]
	public Relative_pathnameContext relative_pathname() {
		Relative_pathnameContext _localctx = new Relative_pathnameContext(Context, State);
		EnterRule(_localctx, 306, RULE_relative_pathname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UP) {
				{
				{
				State = 1691;
				Match(UP);
				State = 1692;
				Match(DOT);
				}
				}
				State = 1697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1698;
			partial_pathname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partial_pathnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pathname_elementContext[] pathname_element() {
			return GetRuleContexts<Pathname_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pathname_elementContext pathname_element(int i) {
			return GetRuleContext<Pathname_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(VHDLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(VHDLParser.DOT, i);
		}
		public Partial_pathnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partial_pathname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPartial_pathname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPartial_pathname(this);
		}
	}

	[RuleVersion(0)]
	public Partial_pathnameContext partial_pathname() {
		Partial_pathnameContext _localctx = new Partial_pathnameContext(Context, State);
		EnterRule(_localctx, 308, RULE_partial_pathname);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1700;
					pathname_element();
					State = 1701;
					Match(DOT);
					}
					} 
				}
				State = 1707;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			State = 1708;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pathname_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		public Pathname_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathname_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPathname_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPathname_element(this);
		}
	}

	[RuleVersion(0)]
	public Pathname_elementContext pathname_element() {
		Pathname_elementContext _localctx = new Pathname_elementContext(Context, State);
		EnterRule(_localctx, 310, RULE_pathname_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710;
			label();
			State = 1715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1711;
				Match(LPAREN);
				State = 1712;
				expression(0);
				State = 1713;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COND_OP() { return GetToken(VHDLParser.COND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression() {
			return GetRuleContext<Simple_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_operatorContext shift_operator() {
			return GetRuleContext<Shift_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_operatorContext logical_operator() {
			return GetRuleContext<Logical_operatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 312;
		EnterRecursionRule(_localctx, 312, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COND_OP:
				{
				State = 1718;
				Match(COND_OP);
				State = 1719;
				primary();
				}
				break;
			case KW_ABS:
			case KW_XNOR:
			case KW_XOR:
			case KW_NEW:
			case KW_OR:
			case KW_NOR:
			case KW_AND:
			case KW_NAND:
			case KW_NOT:
			case KW_NULL:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case DECIMAL_LITERAL:
			case BASED_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case BIT_STRING_LITERAL:
			case LPAREN:
			case SHIFT_LEFT:
			case PLUS:
			case MINUS:
				{
				State = 1720;
				simple_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1737;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1735;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1723;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1724;
						shift_operator();
						State = 1725;
						expression(4);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1727;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1728;
						relational_operator();
						State = 1729;
						expression(3);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1731;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1732;
						logical_operator();
						State = 1733;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 1739;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Simple_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(VHDLParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext[] simple_expression() {
			return GetRuleContexts<Simple_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression(int i) {
			return GetRuleContext<Simple_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABS() { return GetToken(VHDLParser.KW_ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(VHDLParser.KW_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_operatorContext logical_operator() {
			return GetRuleContext<Logical_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplying_operatorContext multiplying_operator() {
			return GetRuleContext<Multiplying_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Adding_operatorContext adding_operator() {
			return GetRuleContext<Adding_operatorContext>(0);
		}
		public Simple_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_expression(this);
		}
	}

	[RuleVersion(0)]
	public Simple_expressionContext simple_expression() {
		return simple_expression(0);
	}

	private Simple_expressionContext simple_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Simple_expressionContext _localctx = new Simple_expressionContext(Context, _parentState);
		Simple_expressionContext _prevctx = _localctx;
		int _startState = 314;
		EnterRecursionRule(_localctx, 314, RULE_simple_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_NEW:
			case KW_NULL:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case DECIMAL_LITERAL:
			case BASED_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case BIT_STRING_LITERAL:
			case LPAREN:
			case SHIFT_LEFT:
				{
				State = 1741;
				primary();
				State = 1744;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
				case 1:
					{
					State = 1742;
					Match(DOUBLESTAR);
					State = 1743;
					primary();
					}
					break;
				}
				}
				break;
			case KW_ABS:
			case KW_XNOR:
			case KW_XOR:
			case KW_OR:
			case KW_NOR:
			case KW_AND:
			case KW_NAND:
			case KW_NOT:
				{
				State = 1749;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_ABS:
					{
					State = 1746;
					Match(KW_ABS);
					}
					break;
				case KW_NOT:
					{
					State = 1747;
					Match(KW_NOT);
					}
					break;
				case KW_XNOR:
				case KW_XOR:
				case KW_OR:
				case KW_NOR:
				case KW_AND:
				case KW_NAND:
					{
					State = 1748;
					logical_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1751;
				simple_expression(4);
				}
				break;
			case PLUS:
			case MINUS:
				{
				State = 1752;
				sign();
				State = 1753;
				simple_expression(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1767;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1765;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
					case 1:
						{
						_localctx = new Simple_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_simple_expression);
						State = 1757;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1758;
						multiplying_operator();
						State = 1759;
						simple_expression(4);
						}
						break;
					case 2:
						{
						_localctx = new Simple_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_simple_expression);
						State = 1761;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1762;
						adding_operator();
						State = 1763;
						simple_expression(2);
						}
						break;
					}
					} 
				}
				State = 1769;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING_LITERAL() { return GetToken(VHDLParser.BIT_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(VHDLParser.KW_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllocatorContext allocator() {
			return GetRuleContext<AllocatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate() {
			return GetRuleContext<AggregateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_expressionContext qualified_expression() {
			return GetRuleContext<Qualified_expressionContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 316, RULE_primary);
		try {
			State = 1776;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1770;
				numeric_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1771;
				Match(BIT_STRING_LITERAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1772;
				Match(KW_NULL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1773;
				allocator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1774;
				aggregate();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1775;
				qualified_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(VHDLParser.KW_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OR() { return GetToken(VHDLParser.KW_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NAND() { return GetToken(VHDLParser.KW_NAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOR() { return GetToken(VHDLParser.KW_NOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_XOR() { return GetToken(VHDLParser.KW_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_XNOR() { return GetToken(VHDLParser.KW_XNOR, 0); }
		public Logical_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterLogical_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitLogical_operator(this);
		}
	}

	[RuleVersion(0)]
	public Logical_operatorContext logical_operator() {
		Logical_operatorContext _localctx = new Logical_operatorContext(Context, State);
		EnterRule(_localctx, 318, RULE_logical_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1778;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 16)) & ~0x3f) == 0 && ((1L << (_la - 16)) & 2596325734968459265L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(VHDLParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(VHDLParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(VHDLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(VHDLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(VHDLParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_MATCH() { return GetToken(VHDLParser.EQ_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE_MATCH() { return GetToken(VHDLParser.NE_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_MATCH() { return GetToken(VHDLParser.LT_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE_MATCH() { return GetToken(VHDLParser.LE_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_MATCH() { return GetToken(VHDLParser.GT_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE_MATCH() { return GetToken(VHDLParser.GE_MATCH, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterRelational_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitRelational_operator(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(Context, State);
		EnterRule(_localctx, 320, RULE_relational_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & 526335L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SLL() { return GetToken(VHDLParser.KW_SLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SRL() { return GetToken(VHDLParser.KW_SRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SLA() { return GetToken(VHDLParser.KW_SLA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SRA() { return GetToken(VHDLParser.KW_SRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROL() { return GetToken(VHDLParser.KW_ROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROR() { return GetToken(VHDLParser.KW_ROR, 0); }
		public Shift_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterShift_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitShift_operator(this);
		}
	}

	[RuleVersion(0)]
	public Shift_operatorContext shift_operator() {
		Shift_operatorContext _localctx = new Shift_operatorContext(Context, State);
		EnterRule(_localctx, 322, RULE_shift_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & 2594073386036494353L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Adding_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(VHDLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(VHDLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(VHDLParser.AMPERSAND, 0); }
		public Adding_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adding_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAdding_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAdding_operator(this);
		}
	}

	[RuleVersion(0)]
	public Adding_operatorContext adding_operator() {
		Adding_operatorContext _localctx = new Adding_operatorContext(Context, State);
		EnterRule(_localctx, 324, RULE_adding_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(VHDLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(VHDLParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 326, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplying_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(VHDLParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(VHDLParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MOD() { return GetToken(VHDLParser.KW_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REM() { return GetToken(VHDLParser.KW_REM, 0); }
		public Multiplying_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplying_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterMultiplying_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitMultiplying_operator(this);
		}
	}

	[RuleVersion(0)]
	public Multiplying_operatorContext multiplying_operator() {
		Multiplying_operatorContext _localctx = new Multiplying_operatorContext(Context, State);
		EnterRule(_localctx, 328, RULE_multiplying_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1788;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_REM || _la==KW_MOD || _la==MUL || _la==DIV) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Miscellaneous_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(VHDLParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABS() { return GetToken(VHDLParser.KW_ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(VHDLParser.KW_NOT, 0); }
		public Miscellaneous_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_miscellaneous_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterMiscellaneous_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitMiscellaneous_operator(this);
		}
	}

	[RuleVersion(0)]
	public Miscellaneous_operatorContext miscellaneous_operator() {
		Miscellaneous_operatorContext _localctx = new Miscellaneous_operatorContext(Context, State);
		EnterRule(_localctx, 330, RULE_miscellaneous_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1790;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_ABS || _la==KW_NOT || _la==DOUBLESTAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(VHDLParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASED_LITERAL() { return GetToken(VHDLParser.BASED_LITERAL, 0); }
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 332, RULE_numeric_literal);
		try {
			State = 1801;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1792;
				Match(DECIMAL_LITERAL);
				State = 1794;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
				case 1:
					{
					State = 1793;
					name(0);
					}
					break;
				}
				}
				break;
			case BASED_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1796;
				Match(BASED_LITERAL);
				State = 1798;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
				case 1:
					{
					State = 1797;
					name(0);
					}
					break;
				}
				}
				break;
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case SHIFT_LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1800;
				name(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Physical_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(VHDLParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASED_LITERAL() { return GetToken(VHDLParser.BASED_LITERAL, 0); }
		public Physical_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_physical_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPhysical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPhysical_literal(this);
		}
	}

	[RuleVersion(0)]
	public Physical_literalContext physical_literal() {
		Physical_literalContext _localctx = new Physical_literalContext(Context, State);
		EnterRule(_localctx, 334, RULE_physical_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECIMAL_LITERAL || _la==BASED_LITERAL) {
				{
				State = 1803;
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL_LITERAL || _la==BASED_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1806;
			name(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_associationContext[] element_association() {
			return GetRuleContexts<Element_associationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Element_associationContext element_association(int i) {
			return GetRuleContext<Element_associationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public AggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAggregate(this);
		}
	}

	[RuleVersion(0)]
	public AggregateContext aggregate() {
		AggregateContext _localctx = new AggregateContext(Context, State);
		EnterRule(_localctx, 336, RULE_aggregate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1808;
			Match(LPAREN);
			State = 1809;
			element_association();
			State = 1814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1810;
				Match(COMMA);
				State = 1811;
				element_association();
				}
				}
				State = 1816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1817;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_associationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext choices() {
			return GetRuleContext<ChoicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(VHDLParser.ARROW, 0); }
		public Element_associationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_association; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterElement_association(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitElement_association(this);
		}
	}

	[RuleVersion(0)]
	public Element_associationContext element_association() {
		Element_associationContext _localctx = new Element_associationContext(Context, State);
		EnterRule(_localctx, 338, RULE_element_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 1819;
				choices();
				State = 1820;
				Match(ARROW);
				}
				break;
			}
			State = 1824;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext[] choice() {
			return GetRuleContexts<ChoiceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext choice(int i) {
			return GetRuleContext<ChoiceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BAR() { return GetTokens(VHDLParser.BAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAR(int i) {
			return GetToken(VHDLParser.BAR, i);
		}
		public ChoicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterChoices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitChoices(this);
		}
	}

	[RuleVersion(0)]
	public ChoicesContext choices() {
		ChoicesContext _localctx = new ChoicesContext(Context, State);
		EnterRule(_localctx, 340, RULE_choices);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1826;
			choice();
			State = 1831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BAR) {
				{
				{
				State = 1827;
				Match(BAR);
				State = 1828;
				choice();
				}
				}
				State = 1833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext discrete_range() {
			return GetRuleContext<Discrete_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression() {
			return GetRuleContext<Simple_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OTHERS() { return GetToken(VHDLParser.KW_OTHERS, 0); }
		public ChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitChoice(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceContext choice() {
		ChoiceContext _localctx = new ChoiceContext(Context, State);
		EnterRule(_localctx, 342, RULE_choice);
		try {
			State = 1837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1834;
				discrete_range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1835;
				simple_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1836;
				Match(KW_OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_markContext type_mark() {
			return GetRuleContext<Type_markContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APOSTROPHE() { return GetToken(VHDLParser.APOSTROPHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate() {
			return GetRuleContext<AggregateContext>(0);
		}
		public Qualified_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterQualified_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitQualified_expression(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_expressionContext qualified_expression() {
		Qualified_expressionContext _localctx = new Qualified_expressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_qualified_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1839;
			type_mark();
			State = 1840;
			Match(APOSTROPHE);
			State = 1841;
			aggregate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEW() { return GetToken(VHDLParser.KW_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_expressionContext qualified_expression() {
			return GetRuleContext<Qualified_expressionContext>(0);
		}
		public AllocatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAllocator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAllocator(this);
		}
	}

	[RuleVersion(0)]
	public AllocatorContext allocator() {
		AllocatorContext _localctx = new AllocatorContext(Context, State);
		EnterRule(_localctx, 346, RULE_allocator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1843;
			Match(KW_NEW);
			State = 1846;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1844;
				subtype_indication();
				}
				break;
			case 2:
				{
				State = 1845;
				qualified_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_of_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext[] sequential_statement() {
			return GetRuleContexts<Sequential_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext sequential_statement(int i) {
			return GetRuleContext<Sequential_statementContext>(i);
		}
		public Sequence_of_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_of_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSequence_of_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSequence_of_statements(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_of_statementsContext sequence_of_statements() {
		Sequence_of_statementsContext _localctx = new Sequence_of_statementsContext(Context, State);
		EnterRule(_localctx, 348, RULE_sequence_of_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1851;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1848;
					sequential_statement();
					}
					} 
				}
				State = 1853;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequential_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Wait_statementContext wait_statement() {
			return GetRuleContext<Wait_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assertion_statementContext assertion_statement() {
			return GetRuleContext<Assertion_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Report_statementContext report_statement() {
			return GetRuleContext<Report_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_assignment_statementContext signal_assignment_statement() {
			return GetRuleContext<Signal_assignment_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assignment_statementContext variable_assignment_statement() {
			return GetRuleContext<Variable_assignment_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_call_statementContext procedure_call_statement() {
			return GetRuleContext<Procedure_call_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_statementContext case_statement() {
			return GetRuleContext<Case_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_statementContext loop_statement() {
			return GetRuleContext<Loop_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Next_statementContext next_statement() {
			return GetRuleContext<Next_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exit_statementContext exit_statement() {
			return GetRuleContext<Exit_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Null_statementContext null_statement() {
			return GetRuleContext<Null_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		public Sequential_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequential_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSequential_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSequential_statement(this);
		}
	}

	[RuleVersion(0)]
	public Sequential_statementContext sequential_statement() {
		Sequential_statementContext _localctx = new Sequential_statementContext(Context, State);
		EnterRule(_localctx, 350, RULE_sequential_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				{
				State = 1854;
				label();
				State = 1855;
				Match(COLON);
				}
				break;
			}
			State = 1872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				{
				State = 1859;
				wait_statement();
				}
				break;
			case 2:
				{
				State = 1860;
				assertion_statement();
				}
				break;
			case 3:
				{
				State = 1861;
				report_statement();
				}
				break;
			case 4:
				{
				State = 1862;
				signal_assignment_statement();
				}
				break;
			case 5:
				{
				State = 1863;
				variable_assignment_statement();
				}
				break;
			case 6:
				{
				State = 1864;
				procedure_call_statement();
				}
				break;
			case 7:
				{
				State = 1865;
				if_statement();
				}
				break;
			case 8:
				{
				State = 1866;
				case_statement();
				}
				break;
			case 9:
				{
				State = 1867;
				loop_statement();
				}
				break;
			case 10:
				{
				State = 1868;
				next_statement();
				}
				break;
			case 11:
				{
				State = 1869;
				exit_statement();
				}
				break;
			case 12:
				{
				State = 1870;
				return_statement();
				}
				break;
			case 13:
				{
				State = 1871;
				null_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wait_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WAIT() { return GetToken(VHDLParser.KW_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sensitivity_clauseContext sensitivity_clause() {
			return GetRuleContext<Sensitivity_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Condition_clauseContext condition_clause() {
			return GetRuleContext<Condition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Timeout_clauseContext timeout_clause() {
			return GetRuleContext<Timeout_clauseContext>(0);
		}
		public Wait_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterWait_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitWait_statement(this);
		}
	}

	[RuleVersion(0)]
	public Wait_statementContext wait_statement() {
		Wait_statementContext _localctx = new Wait_statementContext(Context, State);
		EnterRule(_localctx, 352, RULE_wait_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874;
			Match(KW_WAIT);
			State = 1876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ON) {
				{
				State = 1875;
				sensitivity_clause();
				}
			}

			State = 1879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_UNTIL) {
				{
				State = 1878;
				condition_clause();
				}
			}

			State = 1882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_FOR) {
				{
				State = 1881;
				timeout_clause();
				}
			}

			State = 1884;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sensitivity_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(VHDLParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sensitivity_listContext sensitivity_list() {
			return GetRuleContext<Sensitivity_listContext>(0);
		}
		public Sensitivity_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sensitivity_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSensitivity_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSensitivity_clause(this);
		}
	}

	[RuleVersion(0)]
	public Sensitivity_clauseContext sensitivity_clause() {
		Sensitivity_clauseContext _localctx = new Sensitivity_clauseContext(Context, State);
		EnterRule(_localctx, 354, RULE_sensitivity_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1886;
			Match(KW_ON);
			State = 1887;
			sensitivity_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sensitivity_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Sensitivity_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sensitivity_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSensitivity_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSensitivity_list(this);
		}
	}

	[RuleVersion(0)]
	public Sensitivity_listContext sensitivity_list() {
		Sensitivity_listContext _localctx = new Sensitivity_listContext(Context, State);
		EnterRule(_localctx, 356, RULE_sensitivity_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1889;
			name(0);
			State = 1894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1890;
				Match(COMMA);
				State = 1891;
				name(0);
				}
				}
				State = 1896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNTIL() { return GetToken(VHDLParser.KW_UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Condition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterCondition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitCondition_clause(this);
		}
	}

	[RuleVersion(0)]
	public Condition_clauseContext condition_clause() {
		Condition_clauseContext _localctx = new Condition_clauseContext(Context, State);
		EnterRule(_localctx, 358, RULE_condition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1897;
			Match(KW_UNTIL);
			State = 1898;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 360, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1900;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timeout_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(VHDLParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Timeout_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeout_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterTimeout_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitTimeout_clause(this);
		}
	}

	[RuleVersion(0)]
	public Timeout_clauseContext timeout_clause() {
		Timeout_clauseContext _localctx = new Timeout_clauseContext(Context, State);
		EnterRule(_localctx, 362, RULE_timeout_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1902;
			Match(KW_FOR);
			State = 1903;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assertion_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Assertion_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAssertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAssertion_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assertion_statementContext assertion_statement() {
		Assertion_statementContext _localctx = new Assertion_statementContext(Context, State);
		EnterRule(_localctx, 364, RULE_assertion_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1905;
			assertion();
			State = 1906;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ASSERT() { return GetToken(VHDLParser.KW_ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPORT() { return GetToken(VHDLParser.KW_REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SEVERITY() { return GetToken(VHDLParser.KW_SEVERITY, 0); }
		public AssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterAssertion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitAssertion(this);
		}
	}

	[RuleVersion(0)]
	public AssertionContext assertion() {
		AssertionContext _localctx = new AssertionContext(Context, State);
		EnterRule(_localctx, 366, RULE_assertion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908;
			Match(KW_ASSERT);
			State = 1909;
			condition();
			State = 1912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_REPORT) {
				{
				State = 1910;
				Match(KW_REPORT);
				State = 1911;
				expression(0);
				}
			}

			State = 1916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_SEVERITY) {
				{
				State = 1914;
				Match(KW_SEVERITY);
				State = 1915;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Report_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPORT() { return GetToken(VHDLParser.KW_REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SEVERITY() { return GetToken(VHDLParser.KW_SEVERITY, 0); }
		public Report_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterReport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitReport_statement(this);
		}
	}

	[RuleVersion(0)]
	public Report_statementContext report_statement() {
		Report_statementContext _localctx = new Report_statementContext(Context, State);
		EnterRule(_localctx, 368, RULE_report_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1918;
			Match(KW_REPORT);
			State = 1919;
			expression(0);
			State = 1922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_SEVERITY) {
				{
				State = 1920;
				Match(KW_SEVERITY);
				State = 1921;
				expression(0);
				}
			}

			State = 1924;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_assignment_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_signal_assignmentContext simple_signal_assignment() {
			return GetRuleContext<Simple_signal_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_signal_assignmentContext conditional_signal_assignment() {
			return GetRuleContext<Conditional_signal_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selected_signal_assignmentContext selected_signal_assignment() {
			return GetRuleContext<Selected_signal_assignmentContext>(0);
		}
		public Signal_assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSignal_assignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSignal_assignment_statement(this);
		}
	}

	[RuleVersion(0)]
	public Signal_assignment_statementContext signal_assignment_statement() {
		Signal_assignment_statementContext _localctx = new Signal_assignment_statementContext(Context, State);
		EnterRule(_localctx, 370, RULE_signal_assignment_statement);
		try {
			State = 1929;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1926;
				simple_signal_assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1927;
				conditional_signal_assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1928;
				selected_signal_assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_signal_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_waveform_assignmentContext simple_waveform_assignment() {
			return GetRuleContext<Simple_waveform_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_force_assignmentContext simple_force_assignment() {
			return GetRuleContext<Simple_force_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_release_assignmentContext simple_release_assignment() {
			return GetRuleContext<Simple_release_assignmentContext>(0);
		}
		public Simple_signal_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_signal_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_signal_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_signal_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Simple_signal_assignmentContext simple_signal_assignment() {
		Simple_signal_assignmentContext _localctx = new Simple_signal_assignmentContext(Context, State);
		EnterRule(_localctx, 372, RULE_simple_signal_assignment);
		try {
			State = 1934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1931;
				simple_waveform_assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1932;
				simple_force_assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1933;
				simple_release_assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_waveform_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext waveform() {
			return GetRuleContext<WaveformContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Delay_mechanismContext delay_mechanism() {
			return GetRuleContext<Delay_mechanismContext>(0);
		}
		public Simple_waveform_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_waveform_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_waveform_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_waveform_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Simple_waveform_assignmentContext simple_waveform_assignment() {
		Simple_waveform_assignmentContext _localctx = new Simple_waveform_assignmentContext(Context, State);
		EnterRule(_localctx, 374, RULE_simple_waveform_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1936;
			target();
			State = 1937;
			Match(CONASGN);
			State = 1939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251800350558208L) != 0)) {
				{
				State = 1938;
				delay_mechanism();
				}
			}

			State = 1941;
			waveform();
			State = 1942;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_force_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORCE() { return GetToken(VHDLParser.KW_FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Force_modeContext force_mode() {
			return GetRuleContext<Force_modeContext>(0);
		}
		public Simple_force_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_force_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_force_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_force_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Simple_force_assignmentContext simple_force_assignment() {
		Simple_force_assignmentContext _localctx = new Simple_force_assignmentContext(Context, State);
		EnterRule(_localctx, 376, RULE_simple_force_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944;
			target();
			State = 1945;
			Match(CONASGN);
			State = 1946;
			Match(KW_FORCE);
			State = 1948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IN || _la==KW_OUT) {
				{
				State = 1947;
				force_mode();
				}
			}

			State = 1950;
			expression(0);
			State = 1951;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_release_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RELEASE() { return GetToken(VHDLParser.KW_RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Force_modeContext force_mode() {
			return GetRuleContext<Force_modeContext>(0);
		}
		public Simple_release_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_release_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_release_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_release_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Simple_release_assignmentContext simple_release_assignment() {
		Simple_release_assignmentContext _localctx = new Simple_release_assignmentContext(Context, State);
		EnterRule(_localctx, 378, RULE_simple_release_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1953;
			target();
			State = 1954;
			Match(CONASGN);
			State = 1955;
			Match(KW_RELEASE);
			State = 1957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IN || _la==KW_OUT) {
				{
				State = 1956;
				force_mode();
				}
			}

			State = 1959;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Force_modeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(VHDLParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUT() { return GetToken(VHDLParser.KW_OUT, 0); }
		public Force_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_force_mode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterForce_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitForce_mode(this);
		}
	}

	[RuleVersion(0)]
	public Force_modeContext force_mode() {
		Force_modeContext _localctx = new Force_modeContext(Context, State);
		EnterRule(_localctx, 380, RULE_force_mode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1961;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_IN || _la==KW_OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delay_mechanismContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSPORT() { return GetToken(VHDLParser.KW_TRANSPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INERTIAL() { return GetToken(VHDLParser.KW_INERTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REJECT() { return GetToken(VHDLParser.KW_REJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Delay_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delay_mechanism; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterDelay_mechanism(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitDelay_mechanism(this);
		}
	}

	[RuleVersion(0)]
	public Delay_mechanismContext delay_mechanism() {
		Delay_mechanismContext _localctx = new Delay_mechanismContext(Context, State);
		EnterRule(_localctx, 382, RULE_delay_mechanism);
		int _la;
		try {
			State = 1969;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRANSPORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1963;
				Match(KW_TRANSPORT);
				}
				break;
			case KW_INERTIAL:
			case KW_REJECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_REJECT) {
					{
					State = 1964;
					Match(KW_REJECT);
					State = 1965;
					expression(0);
					}
				}

				State = 1968;
				Match(KW_INERTIAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate() {
			return GetRuleContext<AggregateContext>(0);
		}
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(Context, State);
		EnterRule(_localctx, 384, RULE_target);
		try {
			State = 1973;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case SHIFT_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1971;
				name(0);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1972;
				aggregate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaveformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Waveform_elementContext[] waveform_element() {
			return GetRuleContexts<Waveform_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Waveform_elementContext waveform_element(int i) {
			return GetRuleContext<Waveform_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNAFFECTED() { return GetToken(VHDLParser.KW_UNAFFECTED, 0); }
		public WaveformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waveform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterWaveform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitWaveform(this);
		}
	}

	[RuleVersion(0)]
	public WaveformContext waveform() {
		WaveformContext _localctx = new WaveformContext(Context, State);
		EnterRule(_localctx, 386, RULE_waveform);
		int _la;
		try {
			State = 1984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ABS:
			case KW_XNOR:
			case KW_XOR:
			case KW_NEW:
			case KW_OR:
			case KW_NOR:
			case KW_AND:
			case KW_NAND:
			case KW_NOT:
			case KW_NULL:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case DECIMAL_LITERAL:
			case BASED_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case BIT_STRING_LITERAL:
			case LPAREN:
			case SHIFT_LEFT:
			case PLUS:
			case MINUS:
			case COND_OP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1975;
				waveform_element();
				State = 1980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1976;
					Match(COMMA);
					State = 1977;
					waveform_element();
					}
					}
					State = 1982;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case KW_UNAFFECTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1983;
				Match(KW_UNAFFECTED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waveform_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AFTER() { return GetToken(VHDLParser.KW_AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(VHDLParser.KW_NULL, 0); }
		public Waveform_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waveform_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterWaveform_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitWaveform_element(this);
		}
	}

	[RuleVersion(0)]
	public Waveform_elementContext waveform_element() {
		Waveform_elementContext _localctx = new Waveform_elementContext(Context, State);
		EnterRule(_localctx, 388, RULE_waveform_element);
		int _la;
		try {
			State = 1996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1986;
				expression(0);
				State = 1989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AFTER) {
					{
					State = 1987;
					Match(KW_AFTER);
					State = 1988;
					expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1991;
				Match(KW_NULL);
				State = 1994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AFTER) {
					{
					State = 1992;
					Match(KW_AFTER);
					State = 1993;
					expression(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_signal_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_waveform_assignmentContext conditional_waveform_assignment() {
			return GetRuleContext<Conditional_waveform_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_force_assignmentContext conditional_force_assignment() {
			return GetRuleContext<Conditional_force_assignmentContext>(0);
		}
		public Conditional_signal_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_signal_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConditional_signal_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConditional_signal_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_signal_assignmentContext conditional_signal_assignment() {
		Conditional_signal_assignmentContext _localctx = new Conditional_signal_assignmentContext(Context, State);
		EnterRule(_localctx, 390, RULE_conditional_signal_assignment);
		try {
			State = 2000;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1998;
				conditional_waveform_assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1999;
				conditional_force_assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_waveform_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_waveformsContext conditional_waveforms() {
			return GetRuleContext<Conditional_waveformsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Delay_mechanismContext delay_mechanism() {
			return GetRuleContext<Delay_mechanismContext>(0);
		}
		public Conditional_waveform_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_waveform_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConditional_waveform_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConditional_waveform_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_waveform_assignmentContext conditional_waveform_assignment() {
		Conditional_waveform_assignmentContext _localctx = new Conditional_waveform_assignmentContext(Context, State);
		EnterRule(_localctx, 392, RULE_conditional_waveform_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2002;
			target();
			State = 2003;
			Match(CONASGN);
			State = 2005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251800350558208L) != 0)) {
				{
				State = 2004;
				delay_mechanism();
				}
			}

			State = 2007;
			conditional_waveforms();
			State = 2008;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_waveformsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext[] waveform() {
			return GetRuleContexts<WaveformContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext waveform(int i) {
			return GetRuleContext<WaveformContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_WHEN() { return GetTokens(VHDLParser.KW_WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN(int i) {
			return GetToken(VHDLParser.KW_WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_ELSE() { return GetTokens(VHDLParser.KW_ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE(int i) {
			return GetToken(VHDLParser.KW_ELSE, i);
		}
		public Conditional_waveformsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_waveforms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConditional_waveforms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConditional_waveforms(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_waveformsContext conditional_waveforms() {
		Conditional_waveformsContext _localctx = new Conditional_waveformsContext(Context, State);
		EnterRule(_localctx, 394, RULE_conditional_waveforms);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2010;
			waveform();
			State = 2011;
			Match(KW_WHEN);
			State = 2012;
			condition();
			State = 2020;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2013;
					Match(KW_ELSE);
					State = 2014;
					waveform();
					State = 2015;
					Match(KW_WHEN);
					State = 2016;
					condition();
					}
					} 
				}
				State = 2022;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			}
			State = 2026;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				{
				State = 2023;
				Match(KW_ELSE);
				State = 2024;
				waveform();
				}
				break;
			case 2:
				{
				State = 2025;
				if (!(_input->LA(1) != KW_ELSE)) throw new FailedPredicateException(this, "_input->LA(1) != KW_ELSE");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_force_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORCE() { return GetToken(VHDLParser.KW_FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionsContext conditional_expressions() {
			return GetRuleContext<Conditional_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Force_modeContext force_mode() {
			return GetRuleContext<Force_modeContext>(0);
		}
		public Conditional_force_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_force_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConditional_force_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConditional_force_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_force_assignmentContext conditional_force_assignment() {
		Conditional_force_assignmentContext _localctx = new Conditional_force_assignmentContext(Context, State);
		EnterRule(_localctx, 396, RULE_conditional_force_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028;
			target();
			State = 2029;
			Match(CONASGN);
			State = 2030;
			Match(KW_FORCE);
			State = 2032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IN || _la==KW_OUT) {
				{
				State = 2031;
				force_mode();
				}
			}

			State = 2034;
			conditional_expressions();
			State = 2035;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_WHEN() { return GetTokens(VHDLParser.KW_WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN(int i) {
			return GetToken(VHDLParser.KW_WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_ELSE() { return GetTokens(VHDLParser.KW_ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE(int i) {
			return GetToken(VHDLParser.KW_ELSE, i);
		}
		public Conditional_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConditional_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConditional_expressions(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionsContext conditional_expressions() {
		Conditional_expressionsContext _localctx = new Conditional_expressionsContext(Context, State);
		EnterRule(_localctx, 398, RULE_conditional_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2037;
			expression(0);
			State = 2038;
			Match(KW_WHEN);
			State = 2039;
			condition();
			State = 2047;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,211,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2040;
					Match(KW_ELSE);
					State = 2041;
					expression(0);
					State = 2042;
					Match(KW_WHEN);
					State = 2043;
					condition();
					}
					} 
				}
				State = 2049;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,211,Context);
			}
			State = 2053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				{
				State = 2050;
				Match(KW_ELSE);
				State = 2051;
				expression(0);
				}
				break;
			case 2:
				{
				State = 2052;
				if (!(_input->LA(1) != KW_ELSE)) throw new FailedPredicateException(this, "_input->LA(1) != KW_ELSE");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_signal_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Selected_waveform_assignmentContext selected_waveform_assignment() {
			return GetRuleContext<Selected_waveform_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selected_force_assignmentContext selected_force_assignment() {
			return GetRuleContext<Selected_force_assignmentContext>(0);
		}
		public Selected_signal_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_signal_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSelected_signal_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSelected_signal_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Selected_signal_assignmentContext selected_signal_assignment() {
		Selected_signal_assignmentContext _localctx = new Selected_signal_assignmentContext(Context, State);
		EnterRule(_localctx, 400, RULE_selected_signal_assignment);
		try {
			State = 2057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2055;
				selected_waveform_assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2056;
				selected_force_assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_waveform_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(VHDLParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELECT() { return GetToken(VHDLParser.KW_SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selected_waveformsContext selected_waveforms() {
			return GetRuleContext<Selected_waveformsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(VHDLParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Delay_mechanismContext delay_mechanism() {
			return GetRuleContext<Delay_mechanismContext>(0);
		}
		public Selected_waveform_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_waveform_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSelected_waveform_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSelected_waveform_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Selected_waveform_assignmentContext selected_waveform_assignment() {
		Selected_waveform_assignmentContext _localctx = new Selected_waveform_assignmentContext(Context, State);
		EnterRule(_localctx, 402, RULE_selected_waveform_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2059;
			Match(KW_WITH);
			State = 2060;
			expression(0);
			State = 2061;
			Match(KW_SELECT);
			State = 2063;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 2062;
				Match(QUESTIONMARK);
				}
			}

			State = 2065;
			target();
			State = 2066;
			Match(CONASGN);
			State = 2068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251800350558208L) != 0)) {
				{
				State = 2067;
				delay_mechanism();
				}
			}

			State = 2070;
			selected_waveforms();
			State = 2071;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_waveformsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext[] waveform() {
			return GetRuleContexts<WaveformContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext waveform(int i) {
			return GetRuleContext<WaveformContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_WHEN() { return GetTokens(VHDLParser.KW_WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN(int i) {
			return GetToken(VHDLParser.KW_WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext[] choices() {
			return GetRuleContexts<ChoicesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext choices(int i) {
			return GetRuleContext<ChoicesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Selected_waveformsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_waveforms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSelected_waveforms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSelected_waveforms(this);
		}
	}

	[RuleVersion(0)]
	public Selected_waveformsContext selected_waveforms() {
		Selected_waveformsContext _localctx = new Selected_waveformsContext(Context, State);
		EnterRule(_localctx, 404, RULE_selected_waveforms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2073;
			waveform();
			State = 2074;
			Match(KW_WHEN);
			State = 2075;
			choices();
			State = 2083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2076;
				Match(COMMA);
				State = 2077;
				waveform();
				State = 2078;
				Match(KW_WHEN);
				State = 2079;
				choices();
				}
				}
				State = 2085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_force_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(VHDLParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELECT() { return GetToken(VHDLParser.KW_SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORCE() { return GetToken(VHDLParser.KW_FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selected_expressionsContext selected_expressions() {
			return GetRuleContext<Selected_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(VHDLParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Force_modeContext force_mode() {
			return GetRuleContext<Force_modeContext>(0);
		}
		public Selected_force_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_force_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSelected_force_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSelected_force_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Selected_force_assignmentContext selected_force_assignment() {
		Selected_force_assignmentContext _localctx = new Selected_force_assignmentContext(Context, State);
		EnterRule(_localctx, 406, RULE_selected_force_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086;
			Match(KW_WITH);
			State = 2087;
			expression(0);
			State = 2088;
			Match(KW_SELECT);
			State = 2090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 2089;
				Match(QUESTIONMARK);
				}
			}

			State = 2092;
			target();
			State = 2093;
			Match(CONASGN);
			State = 2094;
			Match(KW_FORCE);
			State = 2096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IN || _la==KW_OUT) {
				{
				State = 2095;
				force_mode();
				}
			}

			State = 2098;
			selected_expressions();
			State = 2099;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_WHEN() { return GetTokens(VHDLParser.KW_WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN(int i) {
			return GetToken(VHDLParser.KW_WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext[] choices() {
			return GetRuleContexts<ChoicesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext choices(int i) {
			return GetRuleContext<ChoicesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Selected_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSelected_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSelected_expressions(this);
		}
	}

	[RuleVersion(0)]
	public Selected_expressionsContext selected_expressions() {
		Selected_expressionsContext _localctx = new Selected_expressionsContext(Context, State);
		EnterRule(_localctx, 408, RULE_selected_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2101;
			expression(0);
			State = 2102;
			Match(KW_WHEN);
			State = 2103;
			choices();
			State = 2111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2104;
				Match(COMMA);
				State = 2105;
				expression(0);
				State = 2106;
				Match(KW_WHEN);
				State = 2107;
				choices();
				}
				}
				State = 2113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assignment_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_variable_assignmentContext simple_variable_assignment() {
			return GetRuleContext<Simple_variable_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_variable_assignmentContext conditional_variable_assignment() {
			return GetRuleContext<Conditional_variable_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selected_variable_assignmentContext selected_variable_assignment() {
			return GetRuleContext<Selected_variable_assignmentContext>(0);
		}
		public Variable_assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterVariable_assignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitVariable_assignment_statement(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assignment_statementContext variable_assignment_statement() {
		Variable_assignment_statementContext _localctx = new Variable_assignment_statementContext(Context, State);
		EnterRule(_localctx, 410, RULE_variable_assignment_statement);
		try {
			State = 2117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2114;
				simple_variable_assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2115;
				conditional_variable_assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2116;
				selected_variable_assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_variable_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(VHDLParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Simple_variable_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_variable_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_variable_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_variable_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Simple_variable_assignmentContext simple_variable_assignment() {
		Simple_variable_assignmentContext _localctx = new Simple_variable_assignmentContext(Context, State);
		EnterRule(_localctx, 412, RULE_simple_variable_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2119;
			target();
			State = 2120;
			Match(VARASGN);
			State = 2121;
			expression(0);
			State = 2122;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_variable_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(VHDLParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionsContext conditional_expressions() {
			return GetRuleContext<Conditional_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Conditional_variable_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_variable_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConditional_variable_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConditional_variable_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_variable_assignmentContext conditional_variable_assignment() {
		Conditional_variable_assignmentContext _localctx = new Conditional_variable_assignmentContext(Context, State);
		EnterRule(_localctx, 414, RULE_conditional_variable_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2124;
			target();
			State = 2125;
			Match(VARASGN);
			State = 2126;
			conditional_expressions();
			State = 2127;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_variable_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(VHDLParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELECT() { return GetToken(VHDLParser.KW_SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(VHDLParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selected_expressionsContext selected_expressions() {
			return GetRuleContext<Selected_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(VHDLParser.QUESTIONMARK, 0); }
		public Selected_variable_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_variable_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSelected_variable_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSelected_variable_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Selected_variable_assignmentContext selected_variable_assignment() {
		Selected_variable_assignmentContext _localctx = new Selected_variable_assignmentContext(Context, State);
		EnterRule(_localctx, 416, RULE_selected_variable_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2129;
			Match(KW_WITH);
			State = 2130;
			expression(0);
			State = 2131;
			Match(KW_SELECT);
			State = 2133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 2132;
				Match(QUESTIONMARK);
				}
			}

			State = 2135;
			target();
			State = 2136;
			Match(VARASGN);
			State = 2137;
			selected_expressions();
			State = 2138;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_call_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_callContext procedure_call() {
			return GetRuleContext<Procedure_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Procedure_call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_call_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProcedure_call_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProcedure_call_statement(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_call_statementContext procedure_call_statement() {
		Procedure_call_statementContext _localctx = new Procedure_call_statementContext(Context, State);
		EnterRule(_localctx, 418, RULE_procedure_call_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2140;
			procedure_call();
			State = 2141;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Procedure_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProcedure_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProcedure_call(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_callContext procedure_call() {
		Procedure_callContext _localctx = new Procedure_callContext(Context, State);
		EnterRule(_localctx, 420, RULE_procedure_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2143;
			name(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_IF() { return GetTokens(VHDLParser.KW_IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF(int i) {
			return GetToken(VHDLParser.KW_IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_THEN() { return GetTokens(VHDLParser.KW_THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THEN(int i) {
			return GetToken(VHDLParser.KW_THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_of_statementsContext[] sequence_of_statements() {
			return GetRuleContexts<Sequence_of_statementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_of_statementsContext sequence_of_statements(int i) {
			return GetRuleContext<Sequence_of_statementsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(VHDLParser.KW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_ELSIF() { return GetTokens(VHDLParser.KW_ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSIF(int i) {
			return GetToken(VHDLParser.KW_ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 422, RULE_if_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2145;
			Match(KW_IF);
			State = 2146;
			condition();
			State = 2147;
			Match(KW_THEN);
			State = 2148;
			sequence_of_statements();
			State = 2156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,222,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2149;
					Match(KW_ELSIF);
					State = 2150;
					condition();
					State = 2151;
					Match(KW_THEN);
					State = 2152;
					sequence_of_statements();
					}
					} 
				}
				State = 2158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,222,Context);
			}
			State = 2163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				{
				State = 2159;
				Match(KW_ELSE);
				State = 2160;
				sequence_of_statements();
				}
				break;
			case 2:
				{
				}
				break;
			case 3:
				{
				State = 2162;
				if (!(_input->LA(1) != KW_ELSE)) throw new FailedPredicateException(this, "_input->LA(1) != KW_ELSE");
				}
				break;
			}
			State = 2165;
			Match(KW_END);
			State = 2166;
			Match(KW_IF);
			State = 2168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2167;
				label();
				}
			}

			State = 2170;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_CASE() { return GetTokens(VHDLParser.KW_CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASE(int i) {
			return GetToken(VHDLParser.KW_CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTIONMARK() { return GetTokens(VHDLParser.QUESTIONMARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK(int i) {
			return GetToken(VHDLParser.QUESTIONMARK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_statement_alternativeContext[] case_statement_alternative() {
			return GetRuleContexts<Case_statement_alternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_statement_alternativeContext case_statement_alternative(int i) {
			return GetRuleContext<Case_statement_alternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterCase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitCase_statement(this);
		}
	}

	[RuleVersion(0)]
	public Case_statementContext case_statement() {
		Case_statementContext _localctx = new Case_statementContext(Context, State);
		EnterRule(_localctx, 424, RULE_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2172;
			Match(KW_CASE);
			State = 2174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 2173;
				Match(QUESTIONMARK);
				}
			}

			State = 2176;
			expression(0);
			State = 2177;
			Match(KW_IS);
			State = 2179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2178;
				case_statement_alternative();
				}
				}
				State = 2181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_WHEN );
			State = 2183;
			Match(KW_END);
			State = 2184;
			Match(KW_CASE);
			State = 2186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 2185;
				Match(QUESTIONMARK);
				}
			}

			State = 2189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2188;
				label();
				}
			}

			State = 2191;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_statement_alternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN() { return GetToken(VHDLParser.KW_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext choices() {
			return GetRuleContext<ChoicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(VHDLParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_of_statementsContext sequence_of_statements() {
			return GetRuleContext<Sequence_of_statementsContext>(0);
		}
		public Case_statement_alternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_statement_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterCase_statement_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitCase_statement_alternative(this);
		}
	}

	[RuleVersion(0)]
	public Case_statement_alternativeContext case_statement_alternative() {
		Case_statement_alternativeContext _localctx = new Case_statement_alternativeContext(Context, State);
		EnterRule(_localctx, 426, RULE_case_statement_alternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2193;
			Match(KW_WHEN);
			State = 2194;
			choices();
			State = 2195;
			Match(ARROW);
			State = 2196;
			sequence_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_LOOP() { return GetTokens(VHDLParser.KW_LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOOP(int i) {
			return GetToken(VHDLParser.KW_LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_of_statementsContext sequence_of_statements() {
			return GetRuleContext<Sequence_of_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iteration_schemeContext iteration_scheme() {
			return GetRuleContext<Iteration_schemeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterLoop_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitLoop_statement(this);
		}
	}

	[RuleVersion(0)]
	public Loop_statementContext loop_statement() {
		Loop_statementContext _localctx = new Loop_statementContext(Context, State);
		EnterRule(_localctx, 428, RULE_loop_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHILE || _la==KW_FOR) {
				{
				State = 2198;
				iteration_scheme();
				}
			}

			State = 2201;
			Match(KW_LOOP);
			State = 2202;
			sequence_of_statements();
			State = 2203;
			Match(KW_END);
			State = 2204;
			Match(KW_LOOP);
			State = 2206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2205;
				label();
				}
			}

			State = 2208;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_schemeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHILE() { return GetToken(VHDLParser.KW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(VHDLParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_specificationContext parameter_specification() {
			return GetRuleContext<Parameter_specificationContext>(0);
		}
		public Iteration_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_scheme; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterIteration_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitIteration_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_schemeContext iteration_scheme() {
		Iteration_schemeContext _localctx = new Iteration_schemeContext(Context, State);
		EnterRule(_localctx, 430, RULE_iteration_scheme);
		try {
			State = 2214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2210;
				Match(KW_WHILE);
				State = 2211;
				condition();
				}
				break;
			case KW_FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2212;
				Match(KW_FOR);
				State = 2213;
				parameter_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(VHDLParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext discrete_range() {
			return GetRuleContext<Discrete_rangeContext>(0);
		}
		public Parameter_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterParameter_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitParameter_specification(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_specificationContext parameter_specification() {
		Parameter_specificationContext _localctx = new Parameter_specificationContext(Context, State);
		EnterRule(_localctx, 432, RULE_parameter_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2216;
			identifier();
			State = 2217;
			Match(KW_IN);
			State = 2218;
			discrete_range();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Next_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEXT() { return GetToken(VHDLParser.KW_NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN() { return GetToken(VHDLParser.KW_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Next_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterNext_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitNext_statement(this);
		}
	}

	[RuleVersion(0)]
	public Next_statementContext next_statement() {
		Next_statementContext _localctx = new Next_statementContext(Context, State);
		EnterRule(_localctx, 434, RULE_next_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2220;
			Match(KW_NEXT);
			State = 2222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2221;
				label();
				}
			}

			State = 2226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHEN) {
				{
				State = 2224;
				Match(KW_WHEN);
				State = 2225;
				condition();
				}
			}

			State = 2228;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exit_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXIT() { return GetToken(VHDLParser.KW_EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN() { return GetToken(VHDLParser.KW_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterExit_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitExit_statement(this);
		}
	}

	[RuleVersion(0)]
	public Exit_statementContext exit_statement() {
		Exit_statementContext _localctx = new Exit_statementContext(Context, State);
		EnterRule(_localctx, 436, RULE_exit_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2230;
			Match(KW_EXIT);
			State = 2232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2231;
				label();
				}
			}

			State = 2236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHEN) {
				{
				State = 2234;
				Match(KW_WHEN);
				State = 2235;
				condition();
				}
			}

			State = 2238;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RETURN() { return GetToken(VHDLParser.KW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 438, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2240;
			Match(KW_RETURN);
			State = 2242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36066180414373952L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 576732883578782849L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & 8591507457L) != 0)) {
				{
				State = 2241;
				expression(0);
				}
			}

			State = 2244;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(VHDLParser.KW_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterNull_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitNull_statement(this);
		}
	}

	[RuleVersion(0)]
	public Null_statementContext null_statement() {
		Null_statementContext _localctx = new Null_statementContext(Context, State);
		EnterRule(_localctx, 440, RULE_null_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246;
			Match(KW_NULL);
			State = 2247;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_statement_with_optional_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Process_statementContext process_statement() {
			return GetRuleContext<Process_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_procedure_call_statementContext concurrent_procedure_call_statement() {
			return GetRuleContext<Concurrent_procedure_call_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_assertion_statementContext concurrent_assertion_statement() {
			return GetRuleContext<Concurrent_assertion_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_signal_assignment_statementContext concurrent_signal_assignment_statement() {
			return GetRuleContext<Concurrent_signal_assignment_statementContext>(0);
		}
		public Concurrent_statement_with_optional_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_statement_with_optional_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_statement_with_optional_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_statement_with_optional_label(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_statement_with_optional_labelContext concurrent_statement_with_optional_label() {
		Concurrent_statement_with_optional_labelContext _localctx = new Concurrent_statement_with_optional_labelContext(Context, State);
		EnterRule(_localctx, 442, RULE_concurrent_statement_with_optional_label);
		try {
			State = 2253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2249;
				process_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2250;
				concurrent_procedure_call_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2251;
				concurrent_assertion_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2252;
				concurrent_signal_assignment_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_instantiation_statementContext component_instantiation_statement() {
			return GetRuleContext<Component_instantiation_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generate_statementContext generate_statement() {
			return GetRuleContext<Generate_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_statement_with_optional_labelContext concurrent_statement_with_optional_label() {
			return GetRuleContext<Concurrent_statement_with_optional_labelContext>(0);
		}
		public Concurrent_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_statement(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_statementContext concurrent_statement() {
		Concurrent_statementContext _localctx = new Concurrent_statementContext(Context, State);
		EnterRule(_localctx, 444, RULE_concurrent_statement);
		try {
			State = 2264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2255;
				label();
				State = 2256;
				Match(COLON);
				State = 2261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
				case 1:
					{
					State = 2257;
					block_statement();
					}
					break;
				case 2:
					{
					State = 2258;
					component_instantiation_statement();
					}
					break;
				case 3:
					{
					State = 2259;
					generate_statement();
					}
					break;
				case 4:
					{
					State = 2260;
					concurrent_statement_with_optional_label();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2263;
				concurrent_statement_with_optional_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_BLOCK() { return GetTokens(VHDLParser.KW_BLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BLOCK(int i) {
			return GetToken(VHDLParser.KW_BLOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_headerContext block_header() {
			return GetRuleContext<Block_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BEGIN() { return GetToken(VHDLParser.KW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext[] block_declarative_item() {
			return GetRuleContexts<Block_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext block_declarative_item(int i) {
			return GetRuleContext<Block_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_statementContext[] concurrent_statement() {
			return GetRuleContexts<Concurrent_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_statementContext concurrent_statement(int i) {
			return GetRuleContext<Concurrent_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(Context, State);
		EnterRule(_localctx, 446, RULE_block_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2266;
			Match(KW_BLOCK);
			State = 2271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2267;
				Match(LPAREN);
				State = 2268;
				condition();
				State = 2269;
				Match(RPAREN);
				}
			}

			State = 2274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IS) {
				{
				State = 2273;
				Match(KW_IS);
				}
			}

			State = 2276;
			block_header();
			State = 2280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653567294472224L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2156068865L) != 0)) {
				{
				{
				State = 2277;
				block_declarative_item();
				}
				}
				State = 2282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2283;
			Match(KW_BEGIN);
			State = 2287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_PROCESS || _la==KW_POSTPONED || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 594478552427008001L) != 0)) {
				{
				{
				State = 2284;
				concurrent_statement();
				}
				}
				State = 2289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2290;
			Match(KW_END);
			State = 2291;
			Match(KW_BLOCK);
			State = 2293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2292;
				label();
				}
			}

			State = 2295;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_clauseContext generic_clause() {
			return GetRuleContext<Generic_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_clauseContext port_clause() {
			return GetRuleContext<Port_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(VHDLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(VHDLParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_map_aspectContext port_map_aspect() {
			return GetRuleContext<Port_map_aspectContext>(0);
		}
		public Block_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterBlock_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitBlock_header(this);
		}
	}

	[RuleVersion(0)]
	public Block_headerContext block_header() {
		Block_headerContext _localctx = new Block_headerContext(Context, State);
		EnterRule(_localctx, 448, RULE_block_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 2297;
				generic_clause();
				State = 2301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_GENERIC) {
					{
					State = 2298;
					generic_map_aspect();
					State = 2299;
					Match(SEMI);
					}
				}

				}
			}

			State = 2311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PORT) {
				{
				State = 2305;
				port_clause();
				State = 2309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PORT) {
					{
					State = 2306;
					port_map_aspect();
					State = 2307;
					Match(SEMI);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_PROCESS() { return GetTokens(VHDLParser.KW_PROCESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROCESS(int i) {
			return GetToken(VHDLParser.KW_PROCESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BEGIN() { return GetToken(VHDLParser.KW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_POSTPONED() { return GetTokens(VHDLParser.KW_POSTPONED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_POSTPONED(int i) {
			return GetToken(VHDLParser.KW_POSTPONED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Process_sensitivity_listContext process_sensitivity_list() {
			return GetRuleContext<Process_sensitivity_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext[] process_declarative_item() {
			return GetRuleContexts<Process_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext process_declarative_item(int i) {
			return GetRuleContext<Process_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext[] sequential_statement() {
			return GetRuleContexts<Sequential_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext sequential_statement(int i) {
			return GetRuleContext<Sequential_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Process_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProcess_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProcess_statement(this);
		}
	}

	[RuleVersion(0)]
	public Process_statementContext process_statement() {
		Process_statementContext _localctx = new Process_statementContext(Context, State);
		EnterRule(_localctx, 450, RULE_process_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_POSTPONED) {
				{
				State = 2313;
				Match(KW_POSTPONED);
				}
			}

			State = 2316;
			Match(KW_PROCESS);
			State = 2321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2317;
				Match(LPAREN);
				State = 2318;
				process_sensitivity_list();
				State = 2319;
				Match(RPAREN);
				}
			}

			State = 2324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IS) {
				{
				State = 2323;
				Match(KW_IS);
				}
			}

			State = 2329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653562731069440L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2147680257L) != 0)) {
				{
				{
				State = 2326;
				process_declarative_item();
				}
				}
				State = 2331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2332;
			Match(KW_BEGIN);
			State = 2336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368811290624L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2377914278563038279L) != 0)) {
				{
				{
				State = 2333;
				sequential_statement();
				}
				}
				State = 2338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2339;
			Match(KW_END);
			State = 2341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_POSTPONED) {
				{
				State = 2340;
				Match(KW_POSTPONED);
				}
			}

			State = 2343;
			Match(KW_PROCESS);
			State = 2345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2344;
				label();
				}
			}

			State = 2347;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_sensitivity_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(VHDLParser.KW_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sensitivity_listContext sensitivity_list() {
			return GetRuleContext<Sensitivity_listContext>(0);
		}
		public Process_sensitivity_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_sensitivity_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProcess_sensitivity_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProcess_sensitivity_list(this);
		}
	}

	[RuleVersion(0)]
	public Process_sensitivity_listContext process_sensitivity_list() {
		Process_sensitivity_listContext _localctx = new Process_sensitivity_listContext(Context, State);
		EnterRule(_localctx, 452, RULE_process_sensitivity_list);
		try {
			State = 2351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2349;
				Match(KW_ALL);
				}
				break;
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case SHIFT_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2350;
				sensitivity_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_or_package_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarationContext subprogram_declaration() {
			return GetRuleContext<Subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_instantiation_declarationContext subprogram_instantiation_declaration() {
			return GetRuleContext<Subprogram_instantiation_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_declarationContext package_declaration() {
			return GetRuleContext<Package_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_instantiation_declarationContext package_instantiation_declaration() {
			return GetRuleContext<Package_instantiation_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_declarationContext file_declaration() {
			return GetRuleContext<File_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_declarationContext alias_declaration() {
			return GetRuleContext<Alias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_template_declarationContext group_template_declaration() {
			return GetRuleContext<Group_template_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		public Process_or_package_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_or_package_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProcess_or_package_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProcess_or_package_declarative_item(this);
		}
	}

	[RuleVersion(0)]
	public Process_or_package_declarative_itemContext process_or_package_declarative_item() {
		Process_or_package_declarative_itemContext _localctx = new Process_or_package_declarative_itemContext(Context, State);
		EnterRule(_localctx, 454, RULE_process_or_package_declarative_item);
		try {
			State = 2368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2353;
				subprogram_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2354;
				subprogram_instantiation_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2355;
				package_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2356;
				package_instantiation_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2357;
				type_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2358;
				subtype_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2359;
				constant_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2360;
				variable_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2361;
				file_declaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2362;
				alias_declaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2363;
				attribute_declaration();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2364;
				attribute_specification();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2365;
				use_clause();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2366;
				group_template_declaration();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2367;
				group_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Process_or_package_declarative_itemContext process_or_package_declarative_item() {
			return GetRuleContext<Process_or_package_declarative_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_bodyContext subprogram_body() {
			return GetRuleContext<Subprogram_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_bodyContext package_body() {
			return GetRuleContext<Package_bodyContext>(0);
		}
		public Process_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterProcess_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitProcess_declarative_item(this);
		}
	}

	[RuleVersion(0)]
	public Process_declarative_itemContext process_declarative_item() {
		Process_declarative_itemContext _localctx = new Process_declarative_itemContext(Context, State);
		EnterRule(_localctx, 456, RULE_process_declarative_item);
		try {
			State = 2373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2370;
				process_or_package_declarative_item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2371;
				subprogram_body();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2372;
				package_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_procedure_call_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_call_statementContext procedure_call_statement() {
			return GetRuleContext<Procedure_call_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_POSTPONED() { return GetToken(VHDLParser.KW_POSTPONED, 0); }
		public Concurrent_procedure_call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_procedure_call_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_procedure_call_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_procedure_call_statement(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_procedure_call_statementContext concurrent_procedure_call_statement() {
		Concurrent_procedure_call_statementContext _localctx = new Concurrent_procedure_call_statementContext(Context, State);
		EnterRule(_localctx, 458, RULE_concurrent_procedure_call_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_POSTPONED) {
				{
				State = 2375;
				Match(KW_POSTPONED);
				}
			}

			State = 2378;
			procedure_call_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_assertion_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assertion_statementContext assertion_statement() {
			return GetRuleContext<Assertion_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_POSTPONED() { return GetToken(VHDLParser.KW_POSTPONED, 0); }
		public Concurrent_assertion_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_assertion_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_assertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_assertion_statement(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_assertion_statementContext concurrent_assertion_statement() {
		Concurrent_assertion_statementContext _localctx = new Concurrent_assertion_statementContext(Context, State);
		EnterRule(_localctx, 460, RULE_concurrent_assertion_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_POSTPONED) {
				{
				State = 2380;
				Match(KW_POSTPONED);
				}
			}

			State = 2383;
			assertion_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_signal_assignment_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_signal_assignment_anyContext concurrent_signal_assignment_any() {
			return GetRuleContext<Concurrent_signal_assignment_anyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_selected_signal_assignmentContext concurrent_selected_signal_assignment() {
			return GetRuleContext<Concurrent_selected_signal_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_POSTPONED() { return GetToken(VHDLParser.KW_POSTPONED, 0); }
		public Concurrent_signal_assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_signal_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_signal_assignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_signal_assignment_statement(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_signal_assignment_statementContext concurrent_signal_assignment_statement() {
		Concurrent_signal_assignment_statementContext _localctx = new Concurrent_signal_assignment_statementContext(Context, State);
		EnterRule(_localctx, 462, RULE_concurrent_signal_assignment_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_POSTPONED) {
				{
				State = 2385;
				Match(KW_POSTPONED);
				}
			}

			State = 2390;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case LPAREN:
			case SHIFT_LEFT:
				{
				State = 2388;
				concurrent_signal_assignment_any();
				}
				break;
			case KW_WITH:
				{
				State = 2389;
				concurrent_selected_signal_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_signal_assignment_anyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext waveform() {
			return GetRuleContext<WaveformContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_waveformsContext conditional_waveforms() {
			return GetRuleContext<Conditional_waveformsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GUARDED() { return GetToken(VHDLParser.KW_GUARDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Delay_mechanismContext delay_mechanism() {
			return GetRuleContext<Delay_mechanismContext>(0);
		}
		public Concurrent_signal_assignment_anyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_signal_assignment_any; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_signal_assignment_any(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_signal_assignment_any(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_signal_assignment_anyContext concurrent_signal_assignment_any() {
		Concurrent_signal_assignment_anyContext _localctx = new Concurrent_signal_assignment_anyContext(Context, State);
		EnterRule(_localctx, 464, RULE_concurrent_signal_assignment_any);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2392;
			target();
			State = 2393;
			Match(CONASGN);
			State = 2395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GUARDED) {
				{
				State = 2394;
				Match(KW_GUARDED);
				}
			}

			State = 2398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251800350558208L) != 0)) {
				{
				State = 2397;
				delay_mechanism();
				}
			}

			State = 2402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				{
				State = 2400;
				waveform();
				}
				break;
			case 2:
				{
				State = 2401;
				conditional_waveforms();
				}
				break;
			}
			State = 2404;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_selected_signal_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(VHDLParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELECT() { return GetToken(VHDLParser.KW_SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONASGN() { return GetToken(VHDLParser.CONASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selected_waveformsContext selected_waveforms() {
			return GetRuleContext<Selected_waveformsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(VHDLParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GUARDED() { return GetToken(VHDLParser.KW_GUARDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Delay_mechanismContext delay_mechanism() {
			return GetRuleContext<Delay_mechanismContext>(0);
		}
		public Concurrent_selected_signal_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_selected_signal_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_selected_signal_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_selected_signal_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_selected_signal_assignmentContext concurrent_selected_signal_assignment() {
		Concurrent_selected_signal_assignmentContext _localctx = new Concurrent_selected_signal_assignmentContext(Context, State);
		EnterRule(_localctx, 466, RULE_concurrent_selected_signal_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2406;
			Match(KW_WITH);
			State = 2407;
			expression(0);
			State = 2408;
			Match(KW_SELECT);
			State = 2410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 2409;
				Match(QUESTIONMARK);
				}
			}

			State = 2412;
			target();
			State = 2413;
			Match(CONASGN);
			State = 2415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GUARDED) {
				{
				State = 2414;
				Match(KW_GUARDED);
				}
			}

			State = 2418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251800350558208L) != 0)) {
				{
				State = 2417;
				delay_mechanism();
				}
			}

			State = 2420;
			selected_waveforms();
			State = 2421;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_instantiation_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Instantiated_unitContext instantiated_unit() {
			return GetRuleContext<Instantiated_unitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_map_aspectContext port_map_aspect() {
			return GetRuleContext<Port_map_aspectContext>(0);
		}
		public Component_instantiation_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_instantiation_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_instantiation_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_instantiation_statement(this);
		}
	}

	[RuleVersion(0)]
	public Component_instantiation_statementContext component_instantiation_statement() {
		Component_instantiation_statementContext _localctx = new Component_instantiation_statementContext(Context, State);
		EnterRule(_localctx, 468, RULE_component_instantiation_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2423;
			instantiated_unit();
			State = 2425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GENERIC) {
				{
				State = 2424;
				generic_map_aspect();
				}
			}

			State = 2428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PORT) {
				{
				State = 2427;
				port_map_aspect();
				}
			}

			State = 2430;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instantiated_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPONENT() { return GetToken(VHDLParser.KW_COMPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENTITY() { return GetToken(VHDLParser.KW_ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VHDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VHDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONFIGURATION() { return GetToken(VHDLParser.KW_CONFIGURATION, 0); }
		public Instantiated_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instantiated_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterInstantiated_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitInstantiated_unit(this);
		}
	}

	[RuleVersion(0)]
	public Instantiated_unitContext instantiated_unit() {
		Instantiated_unitContext _localctx = new Instantiated_unitContext(Context, State);
		EnterRule(_localctx, 470, RULE_instantiated_unit);
		int _la;
		try {
			State = 2446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_COMPONENT:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case SHIFT_LEFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_COMPONENT) {
					{
					State = 2432;
					Match(KW_COMPONENT);
					}
				}

				State = 2435;
				name(0);
				}
				break;
			case KW_ENTITY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2436;
				Match(KW_ENTITY);
				State = 2437;
				name(0);
				State = 2442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 2438;
					Match(LPAREN);
					State = 2439;
					identifier();
					State = 2440;
					Match(RPAREN);
					}
				}

				}
				break;
			case KW_CONFIGURATION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2444;
				Match(KW_CONFIGURATION);
				State = 2445;
				name(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_generate_statementContext for_generate_statement() {
			return GetRuleContext<For_generate_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_generate_statementContext if_generate_statement() {
			return GetRuleContext<If_generate_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_generate_statementContext case_generate_statement() {
			return GetRuleContext<Case_generate_statementContext>(0);
		}
		public Generate_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGenerate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGenerate_statement(this);
		}
	}

	[RuleVersion(0)]
	public Generate_statementContext generate_statement() {
		Generate_statementContext _localctx = new Generate_statementContext(Context, State);
		EnterRule(_localctx, 472, RULE_generate_statement);
		try {
			State = 2451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2448;
				for_generate_statement();
				}
				break;
			case KW_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2449;
				if_generate_statement();
				}
				break;
			case KW_CASE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2450;
				case_generate_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_generate_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(VHDLParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_specificationContext parameter_specification() {
			return GetRuleContext<Parameter_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_GENERATE() { return GetTokens(VHDLParser.KW_GENERATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GENERATE(int i) {
			return GetToken(VHDLParser.KW_GENERATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generate_statement_bodyContext generate_statement_body() {
			return GetRuleContext<Generate_statement_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public For_generate_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_generate_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterFor_generate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitFor_generate_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_generate_statementContext for_generate_statement() {
		For_generate_statementContext _localctx = new For_generate_statementContext(Context, State);
		EnterRule(_localctx, 474, RULE_for_generate_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2453;
			Match(KW_FOR);
			State = 2454;
			parameter_specification();
			State = 2455;
			Match(KW_GENERATE);
			State = 2456;
			generate_statement_body();
			State = 2457;
			Match(KW_END);
			State = 2458;
			Match(KW_GENERATE);
			State = 2460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2459;
				label();
				}
			}

			State = 2462;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_generate_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(VHDLParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_GENERATE() { return GetTokens(VHDLParser.KW_GENERATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GENERATE(int i) {
			return GetToken(VHDLParser.KW_GENERATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generate_statement_bodyContext[] generate_statement_body() {
			return GetRuleContexts<Generate_statement_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generate_statement_bodyContext generate_statement_body(int i) {
			return GetRuleContext<Generate_statement_bodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(VHDLParser.KW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(VHDLParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(VHDLParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_ELSIF() { return GetTokens(VHDLParser.KW_ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSIF(int i) {
			return GetToken(VHDLParser.KW_ELSIF, i);
		}
		public If_generate_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_generate_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterIf_generate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitIf_generate_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_generate_statementContext if_generate_statement() {
		If_generate_statementContext _localctx = new If_generate_statementContext(Context, State);
		EnterRule(_localctx, 476, RULE_if_generate_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2464;
			Match(KW_IF);
			State = 2468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 2465;
				label();
				State = 2466;
				Match(COLON);
				}
				break;
			}
			State = 2470;
			condition();
			State = 2471;
			Match(KW_GENERATE);
			State = 2472;
			generate_statement_body();
			State = 2485;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,278,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2473;
					Match(KW_ELSIF);
					State = 2477;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
					case 1:
						{
						State = 2474;
						label();
						State = 2475;
						Match(COLON);
						}
						break;
					}
					State = 2479;
					condition();
					State = 2480;
					Match(KW_GENERATE);
					State = 2481;
					generate_statement_body();
					}
					} 
				}
				State = 2487;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,278,Context);
			}
			State = 2497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				{
				State = 2488;
				Match(KW_ELSE);
				State = 2492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
					{
					State = 2489;
					label();
					State = 2490;
					Match(COLON);
					}
				}

				State = 2494;
				Match(KW_GENERATE);
				State = 2495;
				generate_statement_body();
				}
				break;
			case 2:
				{
				State = 2496;
				if (!(_input->LA(1) != KW_ELSE)) throw new FailedPredicateException(this, "_input->LA(1) != KW_ELSE");
				}
				break;
			}
			State = 2499;
			Match(KW_END);
			State = 2500;
			Match(KW_GENERATE);
			State = 2502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2501;
				label();
				}
			}

			State = 2504;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_generate_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASE() { return GetToken(VHDLParser.KW_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_GENERATE() { return GetTokens(VHDLParser.KW_GENERATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GENERATE(int i) {
			return GetToken(VHDLParser.KW_GENERATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_generate_alternativeContext[] case_generate_alternative() {
			return GetRuleContexts<Case_generate_alternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_generate_alternativeContext case_generate_alternative(int i) {
			return GetRuleContext<Case_generate_alternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Case_generate_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_generate_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterCase_generate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitCase_generate_statement(this);
		}
	}

	[RuleVersion(0)]
	public Case_generate_statementContext case_generate_statement() {
		Case_generate_statementContext _localctx = new Case_generate_statementContext(Context, State);
		EnterRule(_localctx, 478, RULE_case_generate_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2506;
			Match(KW_CASE);
			State = 2507;
			expression(0);
			State = 2508;
			Match(KW_GENERATE);
			State = 2510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2509;
				case_generate_alternative();
				}
				}
				State = 2512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_WHEN );
			State = 2514;
			Match(KW_END);
			State = 2515;
			Match(KW_GENERATE);
			State = 2517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2516;
				label();
				}
			}

			State = 2519;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_generate_alternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN() { return GetToken(VHDLParser.KW_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext choices() {
			return GetRuleContext<ChoicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(VHDLParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generate_statement_body_with_begin_endContext generate_statement_body_with_begin_end() {
			return GetRuleContext<Generate_statement_body_with_begin_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VHDLParser.COLON, 0); }
		public Case_generate_alternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_generate_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterCase_generate_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitCase_generate_alternative(this);
		}
	}

	[RuleVersion(0)]
	public Case_generate_alternativeContext case_generate_alternative() {
		Case_generate_alternativeContext _localctx = new Case_generate_alternativeContext(Context, State);
		EnterRule(_localctx, 480, RULE_case_generate_alternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2521;
			Match(KW_WHEN);
			State = 2525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				{
				State = 2522;
				label();
				State = 2523;
				Match(COLON);
				}
				break;
			}
			State = 2527;
			choices();
			State = 2528;
			Match(ARROW);
			State = 2529;
			generate_statement_body_with_begin_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_statement_body_with_begin_endContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BEGIN() { return GetToken(VHDLParser.KW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext[] block_declarative_item() {
			return GetRuleContexts<Block_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext block_declarative_item(int i) {
			return GetRuleContext<Block_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_statementContext[] concurrent_statement() {
			return GetRuleContexts<Concurrent_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_statementContext concurrent_statement(int i) {
			return GetRuleContext<Concurrent_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Generate_statement_body_with_begin_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_statement_body_with_begin_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGenerate_statement_body_with_begin_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGenerate_statement_body_with_begin_end(this);
		}
	}

	[RuleVersion(0)]
	public Generate_statement_body_with_begin_endContext generate_statement_body_with_begin_end() {
		Generate_statement_body_with_begin_endContext _localctx = new Generate_statement_body_with_begin_endContext(Context, State);
		EnterRule(_localctx, 482, RULE_generate_statement_body_with_begin_end);
		int _la;
		try {
			State = 2555;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_COMPONENT:
			case KW_GROUP:
			case KW_FILE:
			case KW_PURE:
			case KW_USE:
			case KW_SHARED:
			case KW_SIGNAL:
			case KW_BEGIN:
			case KW_DISCONNECT:
			case KW_PROCEDURE:
			case KW_ATTRIBUTE:
			case KW_VARIABLE:
			case KW_SUBTYPE:
			case KW_CONSTANT:
			case KW_FUNCTION:
			case KW_ALIAS:
			case KW_IMPURE:
			case KW_PACKAGE:
			case KW_FOR:
			case KW_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653567294472224L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2156068865L) != 0)) {
					{
					{
					State = 2531;
					block_declarative_item();
					}
					}
					State = 2536;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2537;
				Match(KW_BEGIN);
				State = 2541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==KW_PROCESS || _la==KW_POSTPONED || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 594478552427008001L) != 0)) {
					{
					{
					State = 2538;
					concurrent_statement();
					}
					}
					State = 2543;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2544;
				Match(KW_END);
				State = 2546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
					{
					State = 2545;
					label();
					}
				}

				State = 2548;
				Match(SEMI);
				}
				}
				break;
			case KW_PROCESS:
			case KW_POSTPONED:
			case KW_END:
			case KW_WITH:
			case KW_ASSERT:
			case KW_WHEN:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case LPAREN:
			case SHIFT_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==KW_PROCESS || _la==KW_POSTPONED || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 594478552427008001L) != 0)) {
					{
					{
					State = 2549;
					concurrent_statement();
					}
					}
					State = 2554;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_statement_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BEGIN() { return GetToken(VHDLParser.KW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext[] block_declarative_item() {
			return GetRuleContexts<Block_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext block_declarative_item(int i) {
			return GetRuleContext<Block_declarative_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_statementContext[] concurrent_statement() {
			return GetRuleContexts<Concurrent_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_statementContext concurrent_statement(int i) {
			return GetRuleContext<Concurrent_statementContext>(i);
		}
		public Generate_statement_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_statement_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterGenerate_statement_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitGenerate_statement_body(this);
		}
	}

	[RuleVersion(0)]
	public Generate_statement_bodyContext generate_statement_body() {
		Generate_statement_bodyContext _localctx = new Generate_statement_bodyContext(Context, State);
		EnterRule(_localctx, 484, RULE_generate_statement_body);
		int _la;
		try {
			int _alt;
			State = 2576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4653567294472224L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2156068865L) != 0)) {
					{
					{
					State = 2557;
					block_declarative_item();
					}
					}
					State = 2562;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2563;
				Match(KW_BEGIN);
				State = 2567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,291,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2564;
						concurrent_statement();
						}
						} 
					}
					State = 2569;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,291,Context);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,292,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2570;
						concurrent_statement();
						}
						} 
					}
					State = 2575;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,292,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 486, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2578;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USE() { return GetToken(VHDLParser.KW_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selected_nameContext[] selected_name() {
			return GetRuleContexts<Selected_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selected_nameContext selected_name(int i) {
			return GetRuleContext<Selected_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Use_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterUse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitUse_clause(this);
		}
	}

	[RuleVersion(0)]
	public Use_clauseContext use_clause() {
		Use_clauseContext _localctx = new Use_clauseContext(Context, State);
		EnterRule(_localctx, 488, RULE_use_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2580;
			Match(KW_USE);
			State = 2581;
			selected_name();
			State = 2586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2582;
				Match(COMMA);
				State = 2583;
				selected_name();
				}
				}
				State = 2588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2589;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Design_fileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(VHDLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Design_unitContext[] design_unit() {
			return GetRuleContexts<Design_unitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Design_unitContext design_unit(int i) {
			return GetRuleContext<Design_unitContext>(i);
		}
		public Design_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_design_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterDesign_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitDesign_file(this);
		}
	}

	[RuleVersion(0)]
	public Design_fileContext design_file() {
		Design_fileContext _localctx = new Design_fileContext(Context, State);
		EnterRule(_localctx, 490, RULE_design_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72057594046324740L) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 655361L) != 0)) {
				{
				{
				State = 2591;
				design_unit();
				}
				}
				State = 2596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2597;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Design_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Context_clauseContext context_clause() {
			return GetRuleContext<Context_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Library_unitContext library_unit() {
			return GetRuleContext<Library_unitContext>(0);
		}
		public Design_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_design_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterDesign_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitDesign_unit(this);
		}
	}

	[RuleVersion(0)]
	public Design_unitContext design_unit() {
		Design_unitContext _localctx = new Design_unitContext(Context, State);
		EnterRule(_localctx, 492, RULE_design_unit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2599;
			context_clause();
			State = 2600;
			library_unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Library_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_unitContext primary_unit() {
			return GetRuleContext<Primary_unitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Secondary_unitContext secondary_unit() {
			return GetRuleContext<Secondary_unitContext>(0);
		}
		public Library_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_library_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterLibrary_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitLibrary_unit(this);
		}
	}

	[RuleVersion(0)]
	public Library_unitContext library_unit() {
		Library_unitContext _localctx = new Library_unitContext(Context, State);
		EnterRule(_localctx, 494, RULE_library_unit);
		try {
			State = 2604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2602;
				primary_unit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2603;
				secondary_unit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarationContext entity_declaration() {
			return GetRuleContext<Entity_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_declarationContext configuration_declaration() {
			return GetRuleContext<Configuration_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_declarationContext package_declaration() {
			return GetRuleContext<Package_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_instantiation_declarationContext package_instantiation_declaration() {
			return GetRuleContext<Package_instantiation_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Context_declarationContext context_declaration() {
			return GetRuleContext<Context_declarationContext>(0);
		}
		public Primary_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterPrimary_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitPrimary_unit(this);
		}
	}

	[RuleVersion(0)]
	public Primary_unitContext primary_unit() {
		Primary_unitContext _localctx = new Primary_unitContext(Context, State);
		EnterRule(_localctx, 496, RULE_primary_unit);
		try {
			State = 2611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2606;
				entity_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2607;
				configuration_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2608;
				package_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2609;
				package_instantiation_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2610;
				context_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_bodyContext architecture_body() {
			return GetRuleContext<Architecture_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_bodyContext package_body() {
			return GetRuleContext<Package_bodyContext>(0);
		}
		public Secondary_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterSecondary_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitSecondary_unit(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_unitContext secondary_unit() {
		Secondary_unitContext _localctx = new Secondary_unitContext(Context, State);
		EnterRule(_localctx, 498, RULE_secondary_unit);
		try {
			State = 2615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ARCHITECTURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2613;
				architecture_body();
				}
				break;
			case KW_PACKAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2614;
				package_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Library_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIBRARY() { return GetToken(VHDLParser.KW_LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_name_listContext logical_name_list() {
			return GetRuleContext<Logical_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Library_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_library_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterLibrary_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitLibrary_clause(this);
		}
	}

	[RuleVersion(0)]
	public Library_clauseContext library_clause() {
		Library_clauseContext _localctx = new Library_clauseContext(Context, State);
		EnterRule(_localctx, 500, RULE_library_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2617;
			Match(KW_LIBRARY);
			State = 2618;
			logical_name_list();
			State = 2619;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		public Logical_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterLogical_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitLogical_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Logical_name_listContext logical_name_list() {
		Logical_name_listContext _localctx = new Logical_name_listContext(Context, State);
		EnterRule(_localctx, 502, RULE_logical_name_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2621;
			identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Context_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_CONTEXT() { return GetTokens(VHDLParser.KW_CONTEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONTEXT(int i) {
			return GetToken(VHDLParser.KW_CONTEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(VHDLParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Context_clauseContext context_clause() {
			return GetRuleContext<Context_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(VHDLParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		public Context_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterContext_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitContext_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Context_declarationContext context_declaration() {
		Context_declarationContext _localctx = new Context_declarationContext(Context, State);
		EnterRule(_localctx, 504, RULE_context_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2623;
			Match(KW_CONTEXT);
			State = 2624;
			identifier();
			State = 2625;
			Match(KW_IS);
			State = 2626;
			context_clause();
			State = 2627;
			Match(KW_END);
			State = 2629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONTEXT) {
				{
				State = 2628;
				Match(KW_CONTEXT);
				}
			}

			State = 2632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2631;
				identifier();
				}
			}

			State = 2634;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Context_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Context_itemContext[] context_item() {
			return GetRuleContexts<Context_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Context_itemContext context_item(int i) {
			return GetRuleContext<Context_itemContext>(i);
		}
		public Context_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterContext_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitContext_clause(this);
		}
	}

	[RuleVersion(0)]
	public Context_clauseContext context_clause() {
		Context_clauseContext _localctx = new Context_clauseContext(Context, State);
		EnterRule(_localctx, 506, RULE_context_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2639;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2636;
					context_item();
					}
					} 
				}
				State = 2641;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Context_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Library_clauseContext library_clause() {
			return GetRuleContext<Library_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Context_referenceContext context_reference() {
			return GetRuleContext<Context_referenceContext>(0);
		}
		public Context_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterContext_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitContext_item(this);
		}
	}

	[RuleVersion(0)]
	public Context_itemContext context_item() {
		Context_itemContext _localctx = new Context_itemContext(Context, State);
		EnterRule(_localctx, 508, RULE_context_item);
		try {
			State = 2645;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_LIBRARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2642;
				library_clause();
				}
				break;
			case KW_USE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2643;
				use_clause();
				}
				break;
			case KW_CONTEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2644;
				context_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Context_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONTEXT() { return GetToken(VHDLParser.KW_CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selected_nameContext[] selected_name() {
			return GetRuleContexts<Selected_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selected_nameContext selected_name(int i) {
			return GetRuleContext<Selected_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VHDLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VHDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VHDLParser.COMMA, i);
		}
		public Context_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterContext_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitContext_reference(this);
		}
	}

	[RuleVersion(0)]
	public Context_referenceContext context_reference() {
		Context_referenceContext _localctx = new Context_referenceContext(Context, State);
		EnterRule(_localctx, 510, RULE_context_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2647;
			Match(KW_CONTEXT);
			State = 2648;
			selected_name();
			State = 2653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2649;
				Match(COMMA);
				State = 2650;
				selected_name();
				}
				}
				State = 2655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2656;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASIC_IDENTIFIER() { return GetToken(VHDLParser.BASIC_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_IDENTIFIER() { return GetToken(VHDLParser.EXTENDED_IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVHDLParserListener typedListener = listener as IVHDLParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 512, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2658;
			_la = TokenStream.LA(1);
			if ( !(_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return name_sempred((NameContext)_localctx, predIndex);
		case 156: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 157: return simple_expression_sempred((Simple_expressionContext)_localctx, predIndex);
		case 197: return conditional_waveforms_sempred((Conditional_waveformsContext)_localctx, predIndex);
		case 199: return conditional_expressions_sempred((Conditional_expressionsContext)_localctx, predIndex);
		case 211: return if_statement_sempred((If_statementContext)_localctx, predIndex);
		case 238: return if_generate_statement_sempred((If_generate_statementContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool simple_expression_sempred(Simple_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditional_waveforms_sempred(Conditional_waveformsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return _input->LA(1) != KW_ELSE;
		}
		return true;
	}
	private bool conditional_expressions_sempred(Conditional_expressionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return _input->LA(1) != KW_ELSE;
		}
		return true;
	}
	private bool if_statement_sempred(If_statementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return _input->LA(1) != KW_ELSE;
		}
		return true;
	}
	private bool if_generate_statement_sempred(If_generate_statementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return _input->LA(1) != KW_ELSE;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,164,2661,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,1,0,1,0,1,1,1,1,1,1,3,1,520,8,1,1,2,1,2,1,2,3,
		2,525,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,533,8,2,5,2,535,8,2,10,2,12,2,538,
		9,2,1,3,1,3,1,3,1,3,1,4,3,4,545,8,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,3,
		6,555,8,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,5,8,564,8,8,10,8,12,8,567,9,8,1,
		9,1,9,1,9,1,9,3,9,573,8,9,1,9,3,9,576,8,9,1,9,5,9,579,8,9,10,9,12,9,582,
		9,9,1,9,1,9,5,9,586,8,9,10,9,12,9,589,9,9,3,9,591,8,9,1,9,1,9,3,9,595,
		8,9,1,9,3,9,598,8,9,1,9,1,9,1,10,1,10,1,10,3,10,605,8,10,1,11,1,11,1,11,
		3,11,610,8,11,1,11,1,11,1,11,3,11,615,8,11,1,12,1,12,1,12,1,12,1,12,1,
		12,5,12,623,8,12,10,12,12,12,626,9,12,1,12,1,12,5,12,630,8,12,10,12,12,
		12,633,9,12,1,12,1,12,3,12,637,8,12,1,12,3,12,640,8,12,1,12,1,12,1,13,
		1,13,1,13,3,13,647,8,13,1,14,1,14,1,14,1,14,1,14,1,14,5,14,655,8,14,10,
		14,12,14,658,9,14,1,14,1,14,1,14,5,14,663,8,14,10,14,12,14,666,9,14,1,
		14,1,14,1,14,3,14,671,8,14,1,14,3,14,674,8,14,1,14,1,14,1,15,1,15,1,15,
		3,15,681,8,15,1,16,1,16,1,16,5,16,686,8,16,10,16,12,16,689,9,16,1,16,5,
		16,692,8,16,10,16,12,16,695,9,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
		17,1,17,3,17,706,8,17,1,18,1,18,1,18,3,18,711,8,18,1,19,1,19,3,19,715,
		8,19,1,20,1,20,1,20,1,20,1,20,3,20,722,8,20,1,20,1,20,1,20,5,20,727,8,
		20,10,20,12,20,730,9,20,1,20,3,20,733,8,20,1,20,1,20,1,20,1,20,1,21,1,
		21,1,21,1,22,1,22,3,22,744,8,22,1,23,1,23,1,23,3,23,749,8,23,1,23,3,23,
		752,8,23,1,23,1,23,1,23,1,23,3,23,758,8,23,1,24,3,24,761,8,24,1,24,1,24,
		1,24,3,24,766,8,24,1,24,3,24,769,8,24,1,24,1,24,1,24,1,24,3,24,775,8,24,
		1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,785,8,25,1,26,1,26,3,26,789,
		8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,5,29,798,8,29,10,29,12,29,801,
		9,29,1,29,1,29,5,29,805,8,29,10,29,12,29,808,9,29,1,29,1,29,3,29,812,8,
		29,1,29,3,29,815,8,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
		3,31,827,8,31,1,31,3,31,830,8,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,838,
		8,32,10,32,12,32,841,9,32,3,32,843,8,32,1,32,1,32,3,32,847,8,32,1,32,1,
		32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,858,8,33,3,33,860,8,33,1,33,
		5,33,863,8,33,10,33,12,33,866,9,33,1,33,1,33,3,33,870,8,33,1,33,3,33,873,
		8,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,881,8,34,1,35,1,35,1,35,1,35,1,
		35,5,35,888,8,35,10,35,12,35,891,9,35,1,35,1,35,1,35,3,35,896,8,35,1,35,
		3,35,899,8,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,909,8,36,1,
		36,1,36,1,37,1,37,1,37,1,37,3,37,917,8,37,1,38,1,38,1,38,1,39,1,39,3,39,
		924,8,39,1,40,1,40,1,41,1,41,1,41,1,41,5,41,932,8,41,10,41,12,41,935,9,
		41,1,41,1,41,1,42,1,42,3,42,941,8,42,1,43,1,43,1,44,1,44,1,44,1,44,5,44,
		949,8,44,10,44,12,44,952,9,44,1,44,1,44,1,44,3,44,957,8,44,1,45,1,45,1,
		45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,48,1,48,3,48,971,8,48,1,49,1,49,
		3,49,975,8,49,1,50,1,50,1,50,1,50,1,50,5,50,982,8,50,10,50,12,50,985,9,
		50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,
		53,1,53,3,53,1002,8,53,1,53,1,53,1,53,1,53,3,53,1008,8,53,3,53,1010,8,
		53,1,54,1,54,1,55,1,55,1,55,1,55,5,55,1018,8,55,10,55,12,55,1021,9,55,
		1,55,1,55,1,56,1,56,3,56,1027,8,56,1,57,1,57,4,57,1031,8,57,11,57,12,57,
		1032,1,57,1,57,1,57,3,57,1038,8,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,
		1,59,5,59,1048,8,59,10,59,12,59,1051,9,59,1,60,1,60,1,61,1,61,1,61,1,61,
		5,61,1059,8,61,10,61,12,61,1062,9,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,
		1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,3,66,1082,8,66,
		1,67,1,67,5,67,1086,8,67,10,67,12,67,1089,9,67,1,67,1,67,1,67,3,67,1094,
		8,67,1,68,1,68,1,68,1,68,3,68,1100,8,68,1,69,1,69,1,69,5,69,1105,8,69,
		10,69,12,69,1108,9,69,1,69,1,69,1,69,1,69,3,69,1114,8,69,1,70,1,70,3,70,
		1118,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,3,72,
		1131,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,74,3,74,1140,8,74,1,74,1,74,
		3,74,1144,8,74,1,75,1,75,1,75,1,75,1,75,3,75,1151,8,75,1,76,1,76,3,76,
		1155,8,76,1,77,1,77,1,78,1,78,1,78,5,78,1162,8,78,10,78,12,78,1165,9,78,
		1,79,1,79,1,79,1,80,1,80,1,81,1,81,3,81,1174,8,81,1,82,1,82,3,82,1178,
		8,82,1,83,1,83,1,83,1,83,3,83,1184,8,83,1,84,1,84,1,84,1,84,1,84,1,84,
		3,84,1192,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,1201,8,85,1,85,
		1,85,3,85,1205,8,85,1,85,1,85,1,86,1,86,1,87,3,87,1212,8,87,1,87,1,87,
		1,87,1,87,1,87,1,87,3,87,1220,8,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,
		3,88,1229,8,88,1,88,1,88,1,89,1,89,3,89,1235,8,89,1,89,1,89,3,89,1239,
		8,89,1,89,1,89,1,90,1,90,1,91,1,91,1,91,1,91,3,91,1249,8,91,1,92,1,92,
		1,92,1,92,3,92,1255,8,92,1,93,1,93,1,93,1,93,3,93,1261,8,93,1,93,1,93,
		1,93,3,93,1266,8,93,1,94,3,94,1269,8,94,1,94,1,94,1,94,3,94,1274,8,94,
		1,94,1,94,3,94,1278,8,94,1,94,1,94,3,94,1282,8,94,1,95,1,95,1,95,1,95,
		3,95,1288,8,95,1,95,1,95,1,95,3,95,1293,8,95,1,96,1,96,1,96,1,96,1,96,
		1,97,1,97,1,98,1,98,1,99,1,99,1,99,1,100,1,100,1,100,3,100,1310,8,100,
		1,101,1,101,3,101,1314,8,101,1,102,1,102,1,102,3,102,1319,8,102,1,102,
		1,102,1,102,1,102,3,102,1325,8,102,1,103,3,103,1328,8,103,1,103,1,103,
		1,103,3,103,1333,8,103,1,103,1,103,1,103,1,103,3,103,1339,8,103,1,103,
		1,103,1,103,1,104,1,104,3,104,1346,8,104,1,105,1,105,1,105,1,105,1,105,
		1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
		1,106,3,106,1366,8,106,1,107,1,107,1,107,5,107,1371,8,107,10,107,12,107,
		1374,9,107,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,110,1,110,
		1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,113,1,113,1,113,1,113,
		5,113,1398,8,113,10,113,12,113,1401,9,113,1,113,1,113,1,114,1,114,1,114,
		3,114,1408,8,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,3,115,1417,
		8,115,1,116,1,116,1,116,1,116,1,116,1,116,3,116,1425,8,116,1,117,3,117,
		1428,8,117,1,117,1,117,1,117,3,117,1433,8,117,1,118,1,118,1,118,1,118,
		1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,3,120,1447,8,120,1,120,
		1,120,1,120,3,120,1452,8,120,1,120,1,120,1,121,1,121,1,121,3,121,1459,
		8,121,1,122,1,122,1,122,1,122,1,122,1,122,1,123,1,123,1,123,3,123,1470,
		8,123,1,123,3,123,1473,8,123,1,123,3,123,1476,8,123,1,123,1,123,1,123,
		3,123,1481,8,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
		1,124,1,125,1,125,1,125,5,125,1496,8,125,10,125,12,125,1499,9,125,1,126,
		1,126,3,126,1503,8,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,128,1,128,1,128,5,128,1517,8,128,10,128,12,128,1520,9,128,1,129,
		1,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,
		1,131,1,132,1,132,1,133,1,133,1,133,5,133,1541,8,133,10,133,12,133,1544,
		9,133,1,133,1,133,3,133,1548,8,133,1,134,1,134,3,134,1552,8,134,1,135,
		1,135,1,135,3,135,1557,8,135,1,136,1,136,3,136,1561,8,136,1,137,1,137,
		1,137,1,137,1,137,1,137,1,137,3,137,1570,8,137,1,138,1,138,1,138,1,138,
		1,138,1,138,1,138,4,138,1579,8,138,11,138,12,138,1580,1,138,1,138,1,138,
		1,138,1,139,1,139,1,139,1,139,1,140,1,140,1,140,5,140,1594,8,140,10,140,
		12,140,1597,9,140,1,140,1,140,3,140,1601,8,140,1,141,1,141,3,141,1605,
		8,141,1,141,3,141,1608,8,141,1,141,3,141,1611,8,141,1,142,1,142,1,142,
		1,142,1,142,1,142,3,142,1619,8,142,1,142,1,142,1,142,3,142,1624,8,142,
		1,143,1,143,1,143,1,143,1,144,1,144,1,144,5,144,1633,8,144,10,144,12,144,
		1636,9,144,1,145,1,145,1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,
		1,147,1,147,1,147,5,147,1651,8,147,10,147,12,147,1654,9,147,1,147,1,147,
		3,147,1658,8,147,1,148,1,148,3,148,1662,8,148,1,149,1,149,1,149,1,149,
		1,149,1,149,1,149,1,150,1,150,1,150,3,150,1674,8,150,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,5,151,1684,8,151,10,151,12,151,1687,9,151,
		1,152,1,152,1,152,1,153,1,153,5,153,1694,8,153,10,153,12,153,1697,9,153,
		1,153,1,153,1,154,1,154,1,154,5,154,1704,8,154,10,154,12,154,1707,9,154,
		1,154,1,154,1,155,1,155,1,155,1,155,1,155,3,155,1716,8,155,1,156,1,156,
		1,156,1,156,3,156,1722,8,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
		1,156,1,156,1,156,1,156,1,156,5,156,1736,8,156,10,156,12,156,1739,9,156,
		1,157,1,157,1,157,1,157,3,157,1745,8,157,1,157,1,157,1,157,3,157,1750,
		8,157,1,157,1,157,1,157,1,157,3,157,1756,8,157,1,157,1,157,1,157,1,157,
		1,157,1,157,1,157,1,157,5,157,1766,8,157,10,157,12,157,1769,9,157,1,158,
		1,158,1,158,1,158,1,158,1,158,3,158,1777,8,158,1,159,1,159,1,160,1,160,
		1,161,1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,1,166,1,166,
		3,166,1795,8,166,1,166,1,166,3,166,1799,8,166,1,166,3,166,1802,8,166,1,
		167,3,167,1805,8,167,1,167,1,167,1,168,1,168,1,168,1,168,5,168,1813,8,
		168,10,168,12,168,1816,9,168,1,168,1,168,1,169,1,169,1,169,3,169,1823,
		8,169,1,169,1,169,1,170,1,170,1,170,5,170,1830,8,170,10,170,12,170,1833,
		9,170,1,171,1,171,1,171,3,171,1838,8,171,1,172,1,172,1,172,1,172,1,173,
		1,173,1,173,3,173,1847,8,173,1,174,5,174,1850,8,174,10,174,12,174,1853,
		9,174,1,175,1,175,1,175,3,175,1858,8,175,1,175,1,175,1,175,1,175,1,175,
		1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,1873,8,175,1,176,
		1,176,3,176,1877,8,176,1,176,3,176,1880,8,176,1,176,3,176,1883,8,176,1,
		176,1,176,1,177,1,177,1,177,1,178,1,178,1,178,5,178,1893,8,178,10,178,
		12,178,1896,9,178,1,179,1,179,1,179,1,180,1,180,1,181,1,181,1,181,1,182,
		1,182,1,182,1,183,1,183,1,183,1,183,3,183,1913,8,183,1,183,1,183,3,183,
		1917,8,183,1,184,1,184,1,184,1,184,3,184,1923,8,184,1,184,1,184,1,185,
		1,185,1,185,3,185,1930,8,185,1,186,1,186,1,186,3,186,1935,8,186,1,187,
		1,187,1,187,3,187,1940,8,187,1,187,1,187,1,187,1,188,1,188,1,188,1,188,
		3,188,1949,8,188,1,188,1,188,1,188,1,189,1,189,1,189,1,189,3,189,1958,
		8,189,1,189,1,189,1,190,1,190,1,191,1,191,1,191,3,191,1967,8,191,1,191,
		3,191,1970,8,191,1,192,1,192,3,192,1974,8,192,1,193,1,193,1,193,5,193,
		1979,8,193,10,193,12,193,1982,9,193,1,193,3,193,1985,8,193,1,194,1,194,
		1,194,3,194,1990,8,194,1,194,1,194,1,194,3,194,1995,8,194,3,194,1997,8,
		194,1,195,1,195,3,195,2001,8,195,1,196,1,196,1,196,3,196,2006,8,196,1,
		196,1,196,1,196,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,5,197,
		2019,8,197,10,197,12,197,2022,9,197,1,197,1,197,1,197,3,197,2027,8,197,
		1,198,1,198,1,198,1,198,3,198,2033,8,198,1,198,1,198,1,198,1,199,1,199,
		1,199,1,199,1,199,1,199,1,199,1,199,5,199,2046,8,199,10,199,12,199,2049,
		9,199,1,199,1,199,1,199,3,199,2054,8,199,1,200,1,200,3,200,2058,8,200,
		1,201,1,201,1,201,1,201,3,201,2064,8,201,1,201,1,201,1,201,3,201,2069,
		8,201,1,201,1,201,1,201,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
		5,202,2082,8,202,10,202,12,202,2085,9,202,1,203,1,203,1,203,1,203,3,203,
		2091,8,203,1,203,1,203,1,203,1,203,3,203,2097,8,203,1,203,1,203,1,203,
		1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,5,204,2110,8,204,10,204,
		12,204,2113,9,204,1,205,1,205,1,205,3,205,2118,8,205,1,206,1,206,1,206,
		1,206,1,206,1,207,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,3,208,
		2134,8,208,1,208,1,208,1,208,1,208,1,208,1,209,1,209,1,209,1,210,1,210,
		1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,5,211,2155,8,211,
		10,211,12,211,2158,9,211,1,211,1,211,1,211,1,211,3,211,2164,8,211,1,211,
		1,211,1,211,3,211,2169,8,211,1,211,1,211,1,212,1,212,3,212,2175,8,212,
		1,212,1,212,1,212,4,212,2180,8,212,11,212,12,212,2181,1,212,1,212,1,212,
		3,212,2187,8,212,1,212,3,212,2190,8,212,1,212,1,212,1,213,1,213,1,213,
		1,213,1,213,1,214,3,214,2200,8,214,1,214,1,214,1,214,1,214,1,214,3,214,
		2207,8,214,1,214,1,214,1,215,1,215,1,215,1,215,3,215,2215,8,215,1,216,
		1,216,1,216,1,216,1,217,1,217,3,217,2223,8,217,1,217,1,217,3,217,2227,
		8,217,1,217,1,217,1,218,1,218,3,218,2233,8,218,1,218,1,218,3,218,2237,
		8,218,1,218,1,218,1,219,1,219,3,219,2243,8,219,1,219,1,219,1,220,1,220,
		1,220,1,221,1,221,1,221,1,221,3,221,2254,8,221,1,222,1,222,1,222,1,222,
		1,222,1,222,3,222,2262,8,222,1,222,3,222,2265,8,222,1,223,1,223,1,223,
		1,223,1,223,3,223,2272,8,223,1,223,3,223,2275,8,223,1,223,1,223,5,223,
		2279,8,223,10,223,12,223,2282,9,223,1,223,1,223,5,223,2286,8,223,10,223,
		12,223,2289,9,223,1,223,1,223,1,223,3,223,2294,8,223,1,223,1,223,1,224,
		1,224,1,224,1,224,3,224,2302,8,224,3,224,2304,8,224,1,224,1,224,1,224,
		1,224,3,224,2310,8,224,3,224,2312,8,224,1,225,3,225,2315,8,225,1,225,1,
		225,1,225,1,225,1,225,3,225,2322,8,225,1,225,3,225,2325,8,225,1,225,5,
		225,2328,8,225,10,225,12,225,2331,9,225,1,225,1,225,5,225,2335,8,225,10,
		225,12,225,2338,9,225,1,225,1,225,3,225,2342,8,225,1,225,1,225,3,225,2346,
		8,225,1,225,1,225,1,226,1,226,3,226,2352,8,226,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,
		2369,8,227,1,228,1,228,1,228,3,228,2374,8,228,1,229,3,229,2377,8,229,1,
		229,1,229,1,230,3,230,2382,8,230,1,230,1,230,1,231,3,231,2387,8,231,1,
		231,1,231,3,231,2391,8,231,1,232,1,232,1,232,3,232,2396,8,232,1,232,3,
		232,2399,8,232,1,232,1,232,3,232,2403,8,232,1,232,1,232,1,233,1,233,1,
		233,1,233,3,233,2411,8,233,1,233,1,233,1,233,3,233,2416,8,233,1,233,3,
		233,2419,8,233,1,233,1,233,1,233,1,234,1,234,3,234,2426,8,234,1,234,3,
		234,2429,8,234,1,234,1,234,1,235,3,235,2434,8,235,1,235,1,235,1,235,1,
		235,1,235,1,235,1,235,3,235,2443,8,235,1,235,1,235,3,235,2447,8,235,1,
		236,1,236,1,236,3,236,2452,8,236,1,237,1,237,1,237,1,237,1,237,1,237,1,
		237,3,237,2461,8,237,1,237,1,237,1,238,1,238,1,238,1,238,3,238,2469,8,
		238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,3,238,2478,8,238,1,238,1,
		238,1,238,1,238,5,238,2484,8,238,10,238,12,238,2487,9,238,1,238,1,238,
		1,238,1,238,3,238,2493,8,238,1,238,1,238,1,238,3,238,2498,8,238,1,238,
		1,238,1,238,3,238,2503,8,238,1,238,1,238,1,239,1,239,1,239,1,239,4,239,
		2511,8,239,11,239,12,239,2512,1,239,1,239,1,239,3,239,2518,8,239,1,239,
		1,239,1,240,1,240,1,240,1,240,3,240,2526,8,240,1,240,1,240,1,240,1,240,
		1,241,5,241,2533,8,241,10,241,12,241,2536,9,241,1,241,1,241,5,241,2540,
		8,241,10,241,12,241,2543,9,241,1,241,1,241,3,241,2547,8,241,1,241,1,241,
		5,241,2551,8,241,10,241,12,241,2554,9,241,3,241,2556,8,241,1,242,5,242,
		2559,8,242,10,242,12,242,2562,9,242,1,242,1,242,5,242,2566,8,242,10,242,
		12,242,2569,9,242,1,242,5,242,2572,8,242,10,242,12,242,2575,9,242,3,242,
		2577,8,242,1,243,1,243,1,244,1,244,1,244,1,244,5,244,2585,8,244,10,244,
		12,244,2588,9,244,1,244,1,244,1,245,5,245,2593,8,245,10,245,12,245,2596,
		9,245,1,245,1,245,1,246,1,246,1,246,1,247,1,247,3,247,2605,8,247,1,248,
		1,248,1,248,1,248,1,248,3,248,2612,8,248,1,249,1,249,3,249,2616,8,249,
		1,250,1,250,1,250,1,250,1,251,1,251,1,252,1,252,1,252,1,252,1,252,1,252,
		3,252,2630,8,252,1,252,3,252,2633,8,252,1,252,1,252,1,253,5,253,2638,8,
		253,10,253,12,253,2641,9,253,1,254,1,254,1,254,3,254,2646,8,254,1,255,
		1,255,1,255,1,255,5,255,2652,8,255,10,255,12,255,2655,9,255,1,255,1,255,
		1,256,1,256,1,256,0,3,4,312,314,257,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
		152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
		188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
		224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
		260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
		296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
		332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
		368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,
		404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,
		440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,
		476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,
		512,0,18,1,0,1,106,2,0,18,18,81,81,2,0,34,34,52,52,2,0,44,44,62,62,2,0,
		42,42,102,102,2,0,68,68,91,91,5,0,4,4,48,48,68,68,75,75,91,91,17,0,5,5,
		13,13,15,15,17,17,28,28,34,34,38,39,43,43,47,47,52,52,63,63,82,83,87,87,
		94,94,96,96,99,99,101,101,3,0,28,28,38,38,47,47,6,0,16,16,41,41,55,55,
		67,67,74,74,77,77,2,0,139,149,158,158,6,0,31,31,35,35,58,58,60,60,89,89,
		92,92,1,0,150,152,1,0,150,151,3,0,10,10,25,25,155,156,3,0,6,6,98,98,157,
		157,2,0,109,109,111,111,1,0,107,108,2787,0,514,1,0,0,0,2,519,1,0,0,0,4,
		524,1,0,0,0,6,539,1,0,0,0,8,544,1,0,0,0,10,549,1,0,0,0,12,554,1,0,0,0,
		14,556,1,0,0,0,16,560,1,0,0,0,18,568,1,0,0,0,20,604,1,0,0,0,22,609,1,0,
		0,0,24,616,1,0,0,0,26,646,1,0,0,0,28,648,1,0,0,0,30,680,1,0,0,0,32,682,
		1,0,0,0,34,700,1,0,0,0,36,710,1,0,0,0,38,714,1,0,0,0,40,716,1,0,0,0,42,
		738,1,0,0,0,44,743,1,0,0,0,46,745,1,0,0,0,48,760,1,0,0,0,50,779,1,0,0,
		0,52,788,1,0,0,0,54,790,1,0,0,0,56,792,1,0,0,0,58,794,1,0,0,0,60,818,1,
		0,0,0,62,820,1,0,0,0,64,833,1,0,0,0,66,850,1,0,0,0,68,880,1,0,0,0,70,882,
		1,0,0,0,72,902,1,0,0,0,74,916,1,0,0,0,76,918,1,0,0,0,78,923,1,0,0,0,80,
		925,1,0,0,0,82,927,1,0,0,0,84,940,1,0,0,0,86,942,1,0,0,0,88,944,1,0,0,
		0,90,958,1,0,0,0,92,961,1,0,0,0,94,966,1,0,0,0,96,970,1,0,0,0,98,974,1,
		0,0,0,100,976,1,0,0,0,102,990,1,0,0,0,104,995,1,0,0,0,106,1009,1,0,0,0,
		108,1011,1,0,0,0,110,1013,1,0,0,0,112,1026,1,0,0,0,114,1028,1,0,0,0,116,
		1039,1,0,0,0,118,1044,1,0,0,0,120,1052,1,0,0,0,122,1054,1,0,0,0,124,1065,
		1,0,0,0,126,1068,1,0,0,0,128,1071,1,0,0,0,130,1075,1,0,0,0,132,1081,1,
		0,0,0,134,1083,1,0,0,0,136,1099,1,0,0,0,138,1101,1,0,0,0,140,1117,1,0,
		0,0,142,1119,1,0,0,0,144,1130,1,0,0,0,146,1132,1,0,0,0,148,1139,1,0,0,
		0,150,1150,1,0,0,0,152,1154,1,0,0,0,154,1156,1,0,0,0,156,1158,1,0,0,0,
		158,1166,1,0,0,0,160,1169,1,0,0,0,162,1173,1,0,0,0,164,1177,1,0,0,0,166,
		1183,1,0,0,0,168,1185,1,0,0,0,170,1195,1,0,0,0,172,1208,1,0,0,0,174,1211,
		1,0,0,0,176,1223,1,0,0,0,178,1234,1,0,0,0,180,1242,1,0,0,0,182,1248,1,
		0,0,0,184,1254,1,0,0,0,186,1256,1,0,0,0,188,1268,1,0,0,0,190,1283,1,0,
		0,0,192,1294,1,0,0,0,194,1299,1,0,0,0,196,1301,1,0,0,0,198,1303,1,0,0,
		0,200,1306,1,0,0,0,202,1313,1,0,0,0,204,1315,1,0,0,0,206,1327,1,0,0,0,
		208,1345,1,0,0,0,210,1347,1,0,0,0,212,1365,1,0,0,0,214,1367,1,0,0,0,216,
		1375,1,0,0,0,218,1377,1,0,0,0,220,1383,1,0,0,0,222,1385,1,0,0,0,224,1391,
		1,0,0,0,226,1393,1,0,0,0,228,1407,1,0,0,0,230,1411,1,0,0,0,232,1424,1,
		0,0,0,234,1432,1,0,0,0,236,1434,1,0,0,0,238,1438,1,0,0,0,240,1442,1,0,
		0,0,242,1458,1,0,0,0,244,1460,1,0,0,0,246,1466,1,0,0,0,248,1484,1,0,0,
		0,250,1492,1,0,0,0,252,1500,1,0,0,0,254,1504,1,0,0,0,256,1513,1,0,0,0,
		258,1521,1,0,0,0,260,1523,1,0,0,0,262,1531,1,0,0,0,264,1535,1,0,0,0,266,
		1547,1,0,0,0,268,1549,1,0,0,0,270,1556,1,0,0,0,272,1560,1,0,0,0,274,1562,
		1,0,0,0,276,1571,1,0,0,0,278,1586,1,0,0,0,280,1600,1,0,0,0,282,1604,1,
		0,0,0,284,1623,1,0,0,0,286,1625,1,0,0,0,288,1629,1,0,0,0,290,1637,1,0,
		0,0,292,1643,1,0,0,0,294,1657,1,0,0,0,296,1661,1,0,0,0,298,1663,1,0,0,
		0,300,1673,1,0,0,0,302,1675,1,0,0,0,304,1688,1,0,0,0,306,1695,1,0,0,0,
		308,1705,1,0,0,0,310,1710,1,0,0,0,312,1721,1,0,0,0,314,1755,1,0,0,0,316,
		1776,1,0,0,0,318,1778,1,0,0,0,320,1780,1,0,0,0,322,1782,1,0,0,0,324,1784,
		1,0,0,0,326,1786,1,0,0,0,328,1788,1,0,0,0,330,1790,1,0,0,0,332,1801,1,
		0,0,0,334,1804,1,0,0,0,336,1808,1,0,0,0,338,1822,1,0,0,0,340,1826,1,0,
		0,0,342,1837,1,0,0,0,344,1839,1,0,0,0,346,1843,1,0,0,0,348,1851,1,0,0,
		0,350,1857,1,0,0,0,352,1874,1,0,0,0,354,1886,1,0,0,0,356,1889,1,0,0,0,
		358,1897,1,0,0,0,360,1900,1,0,0,0,362,1902,1,0,0,0,364,1905,1,0,0,0,366,
		1908,1,0,0,0,368,1918,1,0,0,0,370,1929,1,0,0,0,372,1934,1,0,0,0,374,1936,
		1,0,0,0,376,1944,1,0,0,0,378,1953,1,0,0,0,380,1961,1,0,0,0,382,1969,1,
		0,0,0,384,1973,1,0,0,0,386,1984,1,0,0,0,388,1996,1,0,0,0,390,2000,1,0,
		0,0,392,2002,1,0,0,0,394,2010,1,0,0,0,396,2028,1,0,0,0,398,2037,1,0,0,
		0,400,2057,1,0,0,0,402,2059,1,0,0,0,404,2073,1,0,0,0,406,2086,1,0,0,0,
		408,2101,1,0,0,0,410,2117,1,0,0,0,412,2119,1,0,0,0,414,2124,1,0,0,0,416,
		2129,1,0,0,0,418,2140,1,0,0,0,420,2143,1,0,0,0,422,2145,1,0,0,0,424,2172,
		1,0,0,0,426,2193,1,0,0,0,428,2199,1,0,0,0,430,2214,1,0,0,0,432,2216,1,
		0,0,0,434,2220,1,0,0,0,436,2230,1,0,0,0,438,2240,1,0,0,0,440,2246,1,0,
		0,0,442,2253,1,0,0,0,444,2264,1,0,0,0,446,2266,1,0,0,0,448,2303,1,0,0,
		0,450,2314,1,0,0,0,452,2351,1,0,0,0,454,2368,1,0,0,0,456,2373,1,0,0,0,
		458,2376,1,0,0,0,460,2381,1,0,0,0,462,2386,1,0,0,0,464,2392,1,0,0,0,466,
		2406,1,0,0,0,468,2423,1,0,0,0,470,2446,1,0,0,0,472,2451,1,0,0,0,474,2453,
		1,0,0,0,476,2464,1,0,0,0,478,2506,1,0,0,0,480,2521,1,0,0,0,482,2555,1,
		0,0,0,484,2576,1,0,0,0,486,2578,1,0,0,0,488,2580,1,0,0,0,490,2594,1,0,
		0,0,492,2599,1,0,0,0,494,2604,1,0,0,0,496,2611,1,0,0,0,498,2615,1,0,0,
		0,500,2617,1,0,0,0,502,2621,1,0,0,0,504,2623,1,0,0,0,506,2639,1,0,0,0,
		508,2645,1,0,0,0,510,2647,1,0,0,0,512,2658,1,0,0,0,514,515,7,0,0,0,515,
		1,1,0,0,0,516,520,3,512,256,0,517,520,3,54,27,0,518,520,5,112,0,0,519,
		516,1,0,0,0,519,517,1,0,0,0,519,518,1,0,0,0,520,3,1,0,0,0,521,522,6,2,
		-1,0,522,525,3,2,1,0,523,525,3,298,149,0,524,521,1,0,0,0,524,523,1,0,0,
		0,525,536,1,0,0,0,526,532,10,2,0,0,527,533,3,6,3,0,528,533,3,8,4,0,529,
		533,3,226,113,0,530,531,5,136,0,0,531,533,3,12,6,0,532,527,1,0,0,0,532,
		528,1,0,0,0,532,529,1,0,0,0,532,530,1,0,0,0,533,535,1,0,0,0,534,526,1,
		0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,5,1,0,0,0,538,
		536,1,0,0,0,539,540,5,126,0,0,540,541,3,14,7,0,541,542,5,127,0,0,542,7,
		1,0,0,0,543,545,3,64,32,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,
		0,0,546,547,5,130,0,0,547,548,3,296,148,0,548,9,1,0,0,0,549,550,3,4,2,
		0,550,551,3,8,4,0,551,11,1,0,0,0,552,555,3,2,1,0,553,555,5,64,0,0,554,
		552,1,0,0,0,554,553,1,0,0,0,555,13,1,0,0,0,556,557,3,314,157,0,557,558,
		3,80,40,0,558,559,3,314,157,0,559,15,1,0,0,0,560,565,3,512,256,0,561,562,
		5,136,0,0,562,564,3,12,6,0,563,561,1,0,0,0,564,567,1,0,0,0,565,563,1,0,
		0,0,565,566,1,0,0,0,566,17,1,0,0,0,567,565,1,0,0,0,568,569,5,13,0,0,569,
		570,3,512,256,0,570,572,5,93,0,0,571,573,3,218,109,0,572,571,1,0,0,0,572,
		573,1,0,0,0,573,575,1,0,0,0,574,576,3,222,111,0,575,574,1,0,0,0,575,576,
		1,0,0,0,576,580,1,0,0,0,577,579,3,20,10,0,578,577,1,0,0,0,579,582,1,0,
		0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,590,1,0,0,0,582,580,1,0,0,0,583,
		587,5,30,0,0,584,586,3,22,11,0,585,584,1,0,0,0,586,589,1,0,0,0,587,585,
		1,0,0,0,587,588,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,590,583,1,0,0,
		0,590,591,1,0,0,0,591,592,1,0,0,0,592,594,5,53,0,0,593,595,5,13,0,0,594,
		593,1,0,0,0,594,595,1,0,0,0,595,597,1,0,0,0,596,598,3,512,256,0,597,596,
		1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,5,125,0,0,600,19,1,0,0,
		0,601,605,3,170,85,0,602,605,3,456,228,0,603,605,3,290,145,0,604,601,1,
		0,0,0,604,602,1,0,0,0,604,603,1,0,0,0,605,21,1,0,0,0,606,607,3,486,243,
		0,607,608,5,138,0,0,608,610,1,0,0,0,609,606,1,0,0,0,609,610,1,0,0,0,610,
		614,1,0,0,0,611,615,3,460,230,0,612,615,3,458,229,0,613,615,3,450,225,
		0,614,611,1,0,0,0,614,612,1,0,0,0,614,613,1,0,0,0,615,23,1,0,0,0,616,617,
		5,101,0,0,617,618,3,512,256,0,618,619,5,33,0,0,619,620,3,4,2,0,620,624,
		5,93,0,0,621,623,3,26,13,0,622,621,1,0,0,0,623,626,1,0,0,0,624,622,1,0,
		0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,624,1,0,0,0,627,631,5,30,0,0,628,
		630,3,444,222,0,629,628,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,
		1,0,0,0,632,634,1,0,0,0,633,631,1,0,0,0,634,636,5,53,0,0,635,637,5,101,
		0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,640,3,512,256,
		0,639,638,1,0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,642,5,125,0,0,642,
		25,1,0,0,0,643,647,3,20,10,0,644,647,3,246,123,0,645,647,3,272,136,0,646,
		643,1,0,0,0,646,644,1,0,0,0,646,645,1,0,0,0,647,27,1,0,0,0,648,649,5,99,
		0,0,649,650,3,512,256,0,650,651,5,33,0,0,651,652,3,4,2,0,652,656,5,93,
		0,0,653,655,3,30,15,0,654,653,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,
		656,657,1,0,0,0,657,664,1,0,0,0,658,656,1,0,0,0,659,660,3,286,143,0,660,
		661,5,125,0,0,661,663,1,0,0,0,662,659,1,0,0,0,663,666,1,0,0,0,664,662,
		1,0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,666,664,1,0,0,0,667,668,3,32,16,
		0,668,670,5,53,0,0,669,671,5,99,0,0,670,669,1,0,0,0,670,671,1,0,0,0,671,
		673,1,0,0,0,672,674,3,512,256,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,
		1,0,0,0,675,676,5,125,0,0,676,29,1,0,0,0,677,681,3,488,244,0,678,681,3,
		260,130,0,679,681,3,254,127,0,680,677,1,0,0,0,680,678,1,0,0,0,680,679,
		1,0,0,0,681,31,1,0,0,0,682,683,5,88,0,0,683,687,3,34,17,0,684,686,3,488,
		244,0,685,684,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,1,0,0,0,
		688,693,1,0,0,0,689,687,1,0,0,0,690,692,3,38,19,0,691,690,1,0,0,0,692,
		695,1,0,0,0,693,691,1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,693,1,
		0,0,0,696,697,5,53,0,0,697,698,5,88,0,0,698,699,5,125,0,0,699,33,1,0,0,
		0,700,705,3,486,243,0,701,702,5,126,0,0,702,703,3,36,18,0,703,704,5,127,
		0,0,704,706,1,0,0,0,705,701,1,0,0,0,705,706,1,0,0,0,706,35,1,0,0,0,707,
		711,3,112,56,0,708,711,3,312,156,0,709,711,3,486,243,0,710,707,1,0,0,0,
		710,708,1,0,0,0,710,709,1,0,0,0,711,37,1,0,0,0,712,715,3,32,16,0,713,715,
		3,40,20,0,714,712,1,0,0,0,714,713,1,0,0,0,715,39,1,0,0,0,716,717,5,88,
		0,0,717,721,3,278,139,0,718,719,3,282,141,0,719,720,5,125,0,0,720,722,
		1,0,0,0,721,718,1,0,0,0,721,722,1,0,0,0,722,728,1,0,0,0,723,724,3,286,
		143,0,724,725,5,125,0,0,725,727,1,0,0,0,726,723,1,0,0,0,727,730,1,0,0,
		0,728,726,1,0,0,0,728,729,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,731,
		733,3,32,16,0,732,731,1,0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,735,
		5,53,0,0,735,736,5,88,0,0,736,737,5,125,0,0,737,41,1,0,0,0,738,739,3,44,
		22,0,739,740,5,125,0,0,740,43,1,0,0,0,741,744,3,46,23,0,742,744,3,48,24,
		0,743,741,1,0,0,0,743,742,1,0,0,0,744,45,1,0,0,0,745,746,5,34,0,0,746,
		748,3,52,26,0,747,749,3,50,25,0,748,747,1,0,0,0,748,749,1,0,0,0,749,757,
		1,0,0,0,750,752,5,85,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,
		0,753,754,5,126,0,0,754,755,3,56,28,0,755,756,5,127,0,0,756,758,1,0,0,
		0,757,751,1,0,0,0,757,758,1,0,0,0,758,47,1,0,0,0,759,761,7,1,0,0,760,759,
		1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,763,5,52,0,0,763,765,3,52,
		26,0,764,766,3,50,25,0,765,764,1,0,0,0,765,766,1,0,0,0,766,774,1,0,0,0,
		767,769,5,85,0,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,
		5,126,0,0,771,772,3,56,28,0,772,773,5,127,0,0,773,775,1,0,0,0,774,768,
		1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,5,71,0,0,777,778,3,160,
		80,0,778,49,1,0,0,0,779,780,5,20,0,0,780,781,5,126,0,0,781,782,3,220,110,
		0,782,784,5,127,0,0,783,785,3,236,118,0,784,783,1,0,0,0,784,785,1,0,0,
		0,785,51,1,0,0,0,786,789,3,512,256,0,787,789,3,54,27,0,788,786,1,0,0,0,
		788,787,1,0,0,0,789,53,1,0,0,0,790,791,5,113,0,0,791,55,1,0,0,0,792,793,
		3,214,107,0,793,57,1,0,0,0,794,795,3,44,22,0,795,799,5,93,0,0,796,798,
		3,456,228,0,797,796,1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,799,800,1,
		0,0,0,800,802,1,0,0,0,801,799,1,0,0,0,802,806,5,30,0,0,803,805,3,350,175,
		0,804,803,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,
		809,1,0,0,0,808,806,1,0,0,0,809,811,5,53,0,0,810,812,3,60,30,0,811,810,
		1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,815,3,52,26,0,814,813,1,0,
		0,0,814,815,1,0,0,0,815,816,1,0,0,0,816,817,5,125,0,0,817,59,1,0,0,0,818,
		819,7,2,0,0,819,61,1,0,0,0,820,821,3,60,30,0,821,822,3,52,26,0,822,823,
		5,93,0,0,823,824,5,45,0,0,824,826,3,4,2,0,825,827,3,64,32,0,826,825,1,
		0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,830,3,236,118,0,829,828,1,0,
		0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,5,125,0,0,832,63,1,0,0,0,833,
		842,5,128,0,0,834,839,3,160,80,0,835,836,5,135,0,0,836,838,3,160,80,0,
		837,835,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,843,
		1,0,0,0,841,839,1,0,0,0,842,834,1,0,0,0,842,843,1,0,0,0,843,846,1,0,0,
		0,844,845,5,71,0,0,845,847,3,160,80,0,846,844,1,0,0,0,846,847,1,0,0,0,
		847,848,1,0,0,0,848,849,5,129,0,0,849,65,1,0,0,0,850,851,5,82,0,0,851,
		852,3,512,256,0,852,859,5,93,0,0,853,857,3,218,109,0,854,855,3,236,118,
		0,855,856,5,125,0,0,856,858,1,0,0,0,857,854,1,0,0,0,857,858,1,0,0,0,858,
		860,1,0,0,0,859,853,1,0,0,0,859,860,1,0,0,0,860,864,1,0,0,0,861,863,3,
		68,34,0,862,861,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,
		0,865,867,1,0,0,0,866,864,1,0,0,0,867,869,5,53,0,0,868,870,5,82,0,0,869,
		868,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,873,3,512,256,0,872,871,
		1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,0,874,875,5,125,0,0,875,67,1,0,0,
		0,876,881,3,454,227,0,877,881,3,170,85,0,878,881,3,246,123,0,879,881,3,
		290,145,0,880,876,1,0,0,0,880,877,1,0,0,0,880,878,1,0,0,0,880,879,1,0,
		0,0,881,69,1,0,0,0,882,883,5,82,0,0,883,884,5,49,0,0,884,885,3,512,256,
		0,885,889,5,93,0,0,886,888,3,456,228,0,887,886,1,0,0,0,888,891,1,0,0,0,
		889,887,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,889,1,0,0,0,892,895,
		5,53,0,0,893,894,5,82,0,0,894,896,5,49,0,0,895,893,1,0,0,0,895,896,1,0,
		0,0,896,898,1,0,0,0,897,899,3,512,256,0,898,897,1,0,0,0,898,899,1,0,0,
		0,899,900,1,0,0,0,900,901,5,125,0,0,901,71,1,0,0,0,902,903,5,82,0,0,903,
		904,3,512,256,0,904,905,5,93,0,0,905,906,5,45,0,0,906,908,3,4,2,0,907,
		909,3,236,118,0,908,907,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,911,
		5,125,0,0,911,73,1,0,0,0,912,917,3,82,41,0,913,917,3,86,43,0,914,917,3,
		94,47,0,915,917,3,88,44,0,916,912,1,0,0,0,916,913,1,0,0,0,916,914,1,0,
		0,0,916,915,1,0,0,0,917,75,1,0,0,0,918,919,5,21,0,0,919,920,3,78,39,0,
		920,77,1,0,0,0,921,924,3,10,5,0,922,924,3,14,7,0,923,921,1,0,0,0,923,922,
		1,0,0,0,924,79,1,0,0,0,925,926,7,3,0,0,926,81,1,0,0,0,927,928,5,126,0,
		0,928,933,3,84,42,0,929,930,5,135,0,0,930,932,3,84,42,0,931,929,1,0,0,
		0,932,935,1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,936,1,0,0,0,935,
		933,1,0,0,0,936,937,5,127,0,0,937,83,1,0,0,0,938,941,3,512,256,0,939,941,
		5,112,0,0,940,938,1,0,0,0,940,939,1,0,0,0,941,85,1,0,0,0,942,943,3,76,
		38,0,943,87,1,0,0,0,944,945,3,76,38,0,945,946,5,83,0,0,946,950,3,90,45,
		0,947,949,3,92,46,0,948,947,1,0,0,0,949,952,1,0,0,0,950,948,1,0,0,0,950,
		951,1,0,0,0,951,953,1,0,0,0,952,950,1,0,0,0,953,954,5,53,0,0,954,956,5,
		83,0,0,955,957,3,512,256,0,956,955,1,0,0,0,956,957,1,0,0,0,957,89,1,0,
		0,0,958,959,3,512,256,0,959,960,5,125,0,0,960,91,1,0,0,0,961,962,3,512,
		256,0,962,963,5,139,0,0,963,964,3,334,167,0,964,965,5,125,0,0,965,93,1,
		0,0,0,966,967,3,76,38,0,967,95,1,0,0,0,968,971,3,98,49,0,969,971,3,114,
		57,0,970,968,1,0,0,0,970,969,1,0,0,0,971,97,1,0,0,0,972,975,3,100,50,0,
		973,975,3,102,51,0,974,972,1,0,0,0,974,973,1,0,0,0,975,99,1,0,0,0,976,
		977,5,78,0,0,977,978,5,126,0,0,978,983,3,104,52,0,979,980,5,135,0,0,980,
		982,3,104,52,0,981,979,1,0,0,0,982,985,1,0,0,0,983,981,1,0,0,0,983,984,
		1,0,0,0,984,986,1,0,0,0,985,983,1,0,0,0,986,987,5,127,0,0,987,988,5,33,
		0,0,988,989,3,148,74,0,989,101,1,0,0,0,990,991,5,78,0,0,991,992,3,110,
		55,0,992,993,5,33,0,0,993,994,3,148,74,0,994,103,1,0,0,0,995,996,3,160,
		80,0,996,997,5,21,0,0,997,998,5,162,0,0,998,105,1,0,0,0,999,1001,3,110,
		55,0,1000,1002,3,108,54,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1010,
		1,0,0,0,1003,1004,5,126,0,0,1004,1005,5,100,0,0,1005,1007,5,127,0,0,1006,
		1008,3,108,54,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1010,1,0,0,0,
		1009,999,1,0,0,0,1009,1003,1,0,0,0,1010,107,1,0,0,0,1011,1012,3,164,82,
		0,1012,109,1,0,0,0,1013,1014,5,126,0,0,1014,1019,3,112,56,0,1015,1016,
		5,135,0,0,1016,1018,3,112,56,0,1017,1015,1,0,0,0,1018,1021,1,0,0,0,1019,
		1017,1,0,0,0,1019,1020,1,0,0,0,1020,1022,1,0,0,0,1021,1019,1,0,0,0,1022,
		1023,5,127,0,0,1023,111,1,0,0,0,1024,1027,3,148,74,0,1025,1027,3,78,39,
		0,1026,1024,1,0,0,0,1026,1025,1,0,0,0,1027,113,1,0,0,0,1028,1030,5,27,
		0,0,1029,1031,3,116,58,0,1030,1029,1,0,0,0,1031,1032,1,0,0,0,1032,1030,
		1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1035,5,53,0,0,1035,1037,
		5,27,0,0,1036,1038,3,512,256,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,
		115,1,0,0,0,1039,1040,3,118,59,0,1040,1041,5,138,0,0,1041,1042,3,120,60,
		0,1042,1043,5,125,0,0,1043,117,1,0,0,0,1044,1049,3,512,256,0,1045,1046,
		5,135,0,0,1046,1048,3,512,256,0,1047,1045,1,0,0,0,1048,1051,1,0,0,0,1049,
		1047,1,0,0,0,1049,1050,1,0,0,0,1050,119,1,0,0,0,1051,1049,1,0,0,0,1052,
		1053,3,148,74,0,1053,121,1,0,0,0,1054,1055,5,126,0,0,1055,1060,3,124,62,
		0,1056,1057,5,135,0,0,1057,1059,3,124,62,0,1058,1056,1,0,0,0,1059,1062,
		1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,0,1062,1060,
		1,0,0,0,1063,1064,5,127,0,0,1064,123,1,0,0,0,1065,1066,3,512,256,0,1066,
		1067,3,164,82,0,1067,125,1,0,0,0,1068,1069,5,103,0,0,1069,1070,3,148,74,
		0,1070,127,1,0,0,0,1071,1072,5,96,0,0,1072,1073,3,512,256,0,1073,1074,
		5,125,0,0,1074,129,1,0,0,0,1075,1076,5,17,0,0,1076,1077,5,33,0,0,1077,
		1078,3,160,80,0,1078,131,1,0,0,0,1079,1082,3,134,67,0,1080,1082,3,138,
		69,0,1081,1079,1,0,0,0,1081,1080,1,0,0,0,1082,133,1,0,0,0,1083,1087,5,
		61,0,0,1084,1086,3,136,68,0,1085,1084,1,0,0,0,1086,1089,1,0,0,0,1087,1085,
		1,0,0,0,1087,1088,1,0,0,0,1088,1090,1,0,0,0,1089,1087,1,0,0,0,1090,1091,
		5,53,0,0,1091,1093,5,61,0,0,1092,1094,3,512,256,0,1093,1092,1,0,0,0,1093,
		1094,1,0,0,0,1094,135,1,0,0,0,1095,1100,3,42,21,0,1096,1100,3,62,31,0,
		1097,1100,3,260,130,0,1098,1100,3,488,244,0,1099,1095,1,0,0,0,1099,1096,
		1,0,0,0,1099,1097,1,0,0,0,1099,1098,1,0,0,0,1100,137,1,0,0,0,1101,1102,
		5,61,0,0,1102,1106,5,49,0,0,1103,1105,3,456,228,0,1104,1103,1,0,0,0,1105,
		1108,1,0,0,0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,1109,1,0,0,0,1108,
		1106,1,0,0,0,1109,1110,5,53,0,0,1110,1111,5,61,0,0,1111,1113,5,49,0,0,
		1112,1114,3,512,256,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,139,1,0,
		0,0,1115,1118,3,142,71,0,1116,1118,3,128,64,0,1117,1115,1,0,0,0,1117,1116,
		1,0,0,0,1118,141,1,0,0,0,1119,1120,5,96,0,0,1120,1121,3,512,256,0,1121,
		1122,5,93,0,0,1122,1123,3,144,72,0,1123,1124,5,125,0,0,1124,143,1,0,0,
		0,1125,1131,3,74,37,0,1126,1131,3,96,48,0,1127,1131,3,126,63,0,1128,1131,
		3,130,65,0,1129,1131,3,132,66,0,1130,1125,1,0,0,0,1130,1126,1,0,0,0,1130,
		1127,1,0,0,0,1130,1128,1,0,0,0,1130,1129,1,0,0,0,1131,145,1,0,0,0,1132,
		1133,5,43,0,0,1133,1134,3,512,256,0,1134,1135,5,93,0,0,1135,1136,3,148,
		74,0,1136,1137,5,125,0,0,1137,147,1,0,0,0,1138,1140,3,150,75,0,1139,1138,
		1,0,0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1143,3,160,80,0,1142,
		1144,3,162,81,0,1143,1142,1,0,0,0,1143,1144,1,0,0,0,1144,149,1,0,0,0,1145,
		1151,3,4,2,0,1146,1147,5,126,0,0,1147,1148,3,152,76,0,1148,1149,5,127,
		0,0,1149,1151,1,0,0,0,1150,1145,1,0,0,0,1150,1146,1,0,0,0,1151,151,1,0,
		0,0,1152,1155,3,154,77,0,1153,1155,3,156,78,0,1154,1152,1,0,0,0,1154,1153,
		1,0,0,0,1155,153,1,0,0,0,1156,1157,3,150,75,0,1157,155,1,0,0,0,1158,1163,
		3,158,79,0,1159,1160,5,135,0,0,1160,1162,3,158,79,0,1161,1159,1,0,0,0,
		1162,1165,1,0,0,0,1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,157,1,0,0,0,
		1165,1163,1,0,0,0,1166,1167,3,512,256,0,1167,1168,3,150,75,0,1168,159,
		1,0,0,0,1169,1170,3,4,2,0,1170,161,1,0,0,0,1171,1174,3,76,38,0,1172,1174,
		3,164,82,0,1173,1171,1,0,0,0,1173,1172,1,0,0,0,1174,163,1,0,0,0,1175,1178,
		3,106,53,0,1176,1178,3,122,61,0,1177,1175,1,0,0,0,1177,1176,1,0,0,0,1178,
		165,1,0,0,0,1179,1184,3,168,84,0,1180,1184,3,170,85,0,1181,1184,3,174,
		87,0,1182,1184,3,176,88,0,1183,1179,1,0,0,0,1183,1180,1,0,0,0,1183,1181,
		1,0,0,0,1183,1182,1,0,0,0,1184,167,1,0,0,0,1185,1186,5,47,0,0,1186,1187,
		3,118,59,0,1187,1188,5,138,0,0,1188,1191,3,148,74,0,1189,1190,5,161,0,
		0,1190,1192,3,312,156,0,1191,1189,1,0,0,0,1191,1192,1,0,0,0,1192,1193,
		1,0,0,0,1193,1194,5,125,0,0,1194,169,1,0,0,0,1195,1196,5,28,0,0,1196,1197,
		3,118,59,0,1197,1198,5,138,0,0,1198,1200,3,148,74,0,1199,1201,3,172,86,
		0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,1204,1,0,0,0,1202,1203,5,161,
		0,0,1203,1205,3,312,156,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,1206,
		1,0,0,0,1206,1207,5,125,0,0,1207,171,1,0,0,0,1208,1209,7,4,0,0,1209,173,
		1,0,0,0,1210,1212,5,24,0,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,
		1,0,0,0,1213,1214,5,38,0,0,1214,1215,3,118,59,0,1215,1216,5,138,0,0,1216,
		1219,3,148,74,0,1217,1218,5,161,0,0,1218,1220,3,312,156,0,1219,1217,1,
		0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,0,0,1221,1222,5,125,0,0,1222,175,
		1,0,0,0,1223,1224,5,17,0,0,1224,1225,3,118,59,0,1225,1226,5,138,0,0,1226,
		1228,3,148,74,0,1227,1229,3,178,89,0,1228,1227,1,0,0,0,1228,1229,1,0,0,
		0,1229,1230,1,0,0,0,1230,1231,5,125,0,0,1231,177,1,0,0,0,1232,1233,5,100,
		0,0,1233,1235,3,312,156,0,1234,1232,1,0,0,0,1234,1235,1,0,0,0,1235,1236,
		1,0,0,0,1236,1238,5,93,0,0,1237,1239,7,5,0,0,1238,1237,1,0,0,0,1238,1239,
		1,0,0,0,1239,1240,1,0,0,0,1240,1241,3,180,90,0,1241,179,1,0,0,0,1242,1243,
		3,312,156,0,1243,181,1,0,0,0,1244,1249,3,184,92,0,1245,1249,3,196,98,0,
		1246,1249,3,200,100,0,1247,1249,3,210,105,0,1248,1244,1,0,0,0,1248,1245,
		1,0,0,0,1248,1246,1,0,0,0,1248,1247,1,0,0,0,1249,183,1,0,0,0,1250,1255,
		3,186,93,0,1251,1255,3,188,94,0,1252,1255,3,190,95,0,1253,1255,3,192,96,
		0,1254,1250,1,0,0,0,1254,1251,1,0,0,0,1254,1252,1,0,0,0,1254,1253,1,0,
		0,0,1255,185,1,0,0,0,1256,1257,5,47,0,0,1257,1258,3,118,59,0,1258,1260,
		5,138,0,0,1259,1261,5,68,0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,
		1262,1,0,0,0,1262,1265,3,148,74,0,1263,1264,5,161,0,0,1264,1266,3,312,
		156,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,187,1,0,0,0,1267,1269,5,
		28,0,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1270,1,0,0,0,1270,1271,
		3,118,59,0,1271,1273,5,138,0,0,1272,1274,3,194,97,0,1273,1272,1,0,0,0,
		1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1277,3,148,74,0,1276,1278,5,102,
		0,0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,1278,1281,1,0,0,0,1279,1280,5,
		161,0,0,1280,1282,3,312,156,0,1281,1279,1,0,0,0,1281,1282,1,0,0,0,1282,
		189,1,0,0,0,1283,1284,5,38,0,0,1284,1285,3,118,59,0,1285,1287,5,138,0,
		0,1286,1288,3,194,97,0,1287,1286,1,0,0,0,1287,1288,1,0,0,0,1288,1289,1,
		0,0,0,1289,1292,3,148,74,0,1290,1291,5,161,0,0,1291,1293,3,312,156,0,1292,
		1290,1,0,0,0,1292,1293,1,0,0,0,1293,191,1,0,0,0,1294,1295,5,17,0,0,1295,
		1296,3,118,59,0,1296,1297,5,138,0,0,1297,1298,3,148,74,0,1298,193,1,0,
		0,0,1299,1300,7,6,0,0,1300,195,1,0,0,0,1301,1302,3,198,99,0,1302,197,1,
		0,0,0,1303,1304,5,96,0,0,1304,1305,3,512,256,0,1305,199,1,0,0,0,1306,1309,
		3,202,101,0,1307,1308,5,93,0,0,1308,1310,3,208,104,0,1309,1307,1,0,0,0,
		1309,1310,1,0,0,0,1310,201,1,0,0,0,1311,1314,3,204,102,0,1312,1314,3,206,
		103,0,1313,1311,1,0,0,0,1313,1312,1,0,0,0,1314,203,1,0,0,0,1315,1316,5,
		34,0,0,1316,1324,3,52,26,0,1317,1319,5,85,0,0,1318,1317,1,0,0,0,1318,1319,
		1,0,0,0,1319,1320,1,0,0,0,1320,1321,5,126,0,0,1321,1322,3,56,28,0,1322,
		1323,5,127,0,0,1323,1325,1,0,0,0,1324,1318,1,0,0,0,1324,1325,1,0,0,0,1325,
		205,1,0,0,0,1326,1328,7,1,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,
		1329,1,0,0,0,1329,1330,5,52,0,0,1330,1338,3,52,26,0,1331,1333,5,85,0,0,
		1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,0,0,1334,1335,5,126,
		0,0,1335,1336,3,56,28,0,1336,1337,5,127,0,0,1337,1339,1,0,0,0,1338,1332,
		1,0,0,0,1338,1339,1,0,0,0,1339,1340,1,0,0,0,1340,1341,5,71,0,0,1341,1342,
		3,160,80,0,1342,207,1,0,0,0,1343,1346,3,4,2,0,1344,1346,5,162,0,0,1345,
		1343,1,0,0,0,1345,1344,1,0,0,0,1346,209,1,0,0,0,1347,1348,5,82,0,0,1348,
		1349,3,512,256,0,1349,1350,5,93,0,0,1350,1351,5,45,0,0,1351,1352,3,4,2,
		0,1352,1353,3,212,106,0,1353,211,1,0,0,0,1354,1366,3,236,118,0,1355,1356,
		5,20,0,0,1356,1357,5,59,0,0,1357,1358,5,126,0,0,1358,1359,5,162,0,0,1359,
		1366,5,127,0,0,1360,1361,5,20,0,0,1361,1362,5,59,0,0,1362,1363,5,126,0,
		0,1363,1364,5,7,0,0,1364,1366,5,127,0,0,1365,1354,1,0,0,0,1365,1355,1,
		0,0,0,1365,1360,1,0,0,0,1366,213,1,0,0,0,1367,1372,3,216,108,0,1368,1369,
		5,125,0,0,1369,1371,3,216,108,0,1370,1368,1,0,0,0,1371,1374,1,0,0,0,1372,
		1370,1,0,0,0,1372,1373,1,0,0,0,1373,215,1,0,0,0,1374,1372,1,0,0,0,1375,
		1376,3,182,91,0,1376,217,1,0,0,0,1377,1378,5,20,0,0,1378,1379,5,126,0,
		0,1379,1380,3,220,110,0,1380,1381,5,127,0,0,1381,1382,5,125,0,0,1382,219,
		1,0,0,0,1383,1384,3,214,107,0,1384,221,1,0,0,0,1385,1386,5,105,0,0,1386,
		1387,5,126,0,0,1387,1388,3,224,112,0,1388,1389,5,127,0,0,1389,1390,5,125,
		0,0,1390,223,1,0,0,0,1391,1392,3,214,107,0,1392,225,1,0,0,0,1393,1394,
		5,126,0,0,1394,1399,3,228,114,0,1395,1396,5,135,0,0,1396,1398,3,228,114,
		0,1397,1395,1,0,0,0,1398,1401,1,0,0,0,1399,1397,1,0,0,0,1399,1400,1,0,
		0,0,1400,1402,1,0,0,0,1401,1399,1,0,0,0,1402,1403,5,127,0,0,1403,227,1,
		0,0,0,1404,1405,3,230,115,0,1405,1406,5,163,0,0,1406,1408,1,0,0,0,1407,
		1404,1,0,0,0,1407,1408,1,0,0,0,1408,1409,1,0,0,0,1409,1410,3,232,116,0,
		1410,229,1,0,0,0,1411,1416,3,4,2,0,1412,1413,5,126,0,0,1413,1414,3,4,2,
		0,1414,1415,5,127,0,0,1415,1417,1,0,0,0,1416,1412,1,0,0,0,1416,1417,1,
		0,0,0,1417,231,1,0,0,0,1418,1419,3,4,2,0,1419,1420,5,126,0,0,1420,1421,
		3,234,117,0,1421,1422,5,127,0,0,1422,1425,1,0,0,0,1423,1425,3,234,117,
		0,1424,1418,1,0,0,0,1424,1423,1,0,0,0,1425,233,1,0,0,0,1426,1428,5,11,
		0,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1433,3,
		312,156,0,1430,1433,3,148,74,0,1431,1433,5,100,0,0,1432,1427,1,0,0,0,1432,
		1430,1,0,0,0,1432,1431,1,0,0,0,1433,235,1,0,0,0,1434,1435,5,20,0,0,1435,
		1436,5,59,0,0,1436,1437,3,226,113,0,1437,237,1,0,0,0,1438,1439,5,105,0,
		0,1439,1440,5,59,0,0,1440,1441,3,226,113,0,1441,239,1,0,0,0,1442,1443,
		5,65,0,0,1443,1446,3,242,121,0,1444,1445,5,138,0,0,1445,1447,3,148,74,
		0,1446,1444,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,1449,5,93,
		0,0,1449,1451,3,4,2,0,1450,1452,3,64,32,0,1451,1450,1,0,0,0,1451,1452,
		1,0,0,0,1452,1453,1,0,0,0,1453,1454,5,125,0,0,1454,241,1,0,0,0,1455,1459,
		3,512,256,0,1456,1459,5,112,0,0,1457,1459,3,54,27,0,1458,1455,1,0,0,0,
		1458,1456,1,0,0,0,1458,1457,1,0,0,0,1459,243,1,0,0,0,1460,1461,5,37,0,
		0,1461,1462,3,512,256,0,1462,1463,5,138,0,0,1463,1464,3,160,80,0,1464,
		1465,5,125,0,0,1465,245,1,0,0,0,1466,1467,5,5,0,0,1467,1469,3,512,256,
		0,1468,1470,5,93,0,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,1472,1,0,
		0,0,1471,1473,3,218,109,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1475,
		1,0,0,0,1474,1476,3,222,111,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,
		1477,1,0,0,0,1477,1478,5,53,0,0,1478,1480,5,5,0,0,1479,1481,3,512,256,
		0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,1482,1,0,0,0,1482,1483,5,125,
		0,0,1483,247,1,0,0,0,1484,1485,5,15,0,0,1485,1486,3,512,256,0,1486,1487,
		5,93,0,0,1487,1488,5,126,0,0,1488,1489,3,250,125,0,1489,1490,5,127,0,0,
		1490,1491,5,125,0,0,1491,249,1,0,0,0,1492,1497,3,252,126,0,1493,1494,5,
		135,0,0,1494,1496,3,252,126,0,1495,1493,1,0,0,0,1496,1499,1,0,0,0,1497,
		1495,1,0,0,0,1497,1498,1,0,0,0,1498,251,1,0,0,0,1499,1497,1,0,0,0,1500,
		1502,3,264,132,0,1501,1503,5,162,0,0,1502,1501,1,0,0,0,1502,1503,1,0,0,
		0,1503,253,1,0,0,0,1504,1505,5,15,0,0,1505,1506,3,512,256,0,1506,1507,
		5,138,0,0,1507,1508,3,4,2,0,1508,1509,5,126,0,0,1509,1510,3,256,128,0,
		1510,1511,5,127,0,0,1511,1512,5,125,0,0,1512,255,1,0,0,0,1513,1518,3,258,
		129,0,1514,1515,5,135,0,0,1515,1517,3,258,129,0,1516,1514,1,0,0,0,1517,
		1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,1519,257,1,0,0,0,1520,
		1518,1,0,0,0,1521,1522,3,4,2,0,1522,259,1,0,0,0,1523,1524,5,37,0,0,1524,
		1525,3,296,148,0,1525,1526,5,33,0,0,1526,1527,3,262,131,0,1527,1528,5,
		93,0,0,1528,1529,3,312,156,0,1529,1530,5,125,0,0,1530,261,1,0,0,0,1531,
		1532,3,266,133,0,1532,1533,5,138,0,0,1533,1534,3,264,132,0,1534,263,1,
		0,0,0,1535,1536,7,7,0,0,1536,265,1,0,0,0,1537,1542,3,268,134,0,1538,1539,
		5,135,0,0,1539,1541,3,268,134,0,1540,1538,1,0,0,0,1541,1544,1,0,0,0,1542,
		1540,1,0,0,0,1542,1543,1,0,0,0,1543,1548,1,0,0,0,1544,1542,1,0,0,0,1545,
		1548,5,95,0,0,1546,1548,5,64,0,0,1547,1537,1,0,0,0,1547,1545,1,0,0,0,1547,
		1546,1,0,0,0,1548,267,1,0,0,0,1549,1551,3,270,135,0,1550,1552,3,64,32,
		0,1551,1550,1,0,0,0,1551,1552,1,0,0,0,1552,269,1,0,0,0,1553,1557,3,512,
		256,0,1554,1557,5,112,0,0,1555,1557,3,54,27,0,1556,1553,1,0,0,0,1556,1554,
		1,0,0,0,1556,1555,1,0,0,0,1557,271,1,0,0,0,1558,1561,3,274,137,0,1559,
		1561,3,276,138,0,1560,1558,1,0,0,0,1560,1559,1,0,0,0,1561,273,1,0,0,0,
		1562,1563,5,88,0,0,1563,1564,3,278,139,0,1564,1565,3,282,141,0,1565,1569,
		5,125,0,0,1566,1567,5,53,0,0,1567,1568,5,88,0,0,1568,1570,5,125,0,0,1569,
		1566,1,0,0,0,1569,1570,1,0,0,0,1570,275,1,0,0,0,1571,1572,5,88,0,0,1572,
		1573,3,278,139,0,1573,1574,3,282,141,0,1574,1578,5,125,0,0,1575,1576,3,
		286,143,0,1576,1577,5,125,0,0,1577,1579,1,0,0,0,1578,1575,1,0,0,0,1579,
		1580,1,0,0,0,1580,1578,1,0,0,0,1580,1581,1,0,0,0,1581,1582,1,0,0,0,1582,
		1583,5,53,0,0,1583,1584,5,88,0,0,1584,1585,5,125,0,0,1585,277,1,0,0,0,
		1586,1587,3,280,140,0,1587,1588,5,138,0,0,1588,1589,3,4,2,0,1589,279,1,
		0,0,0,1590,1595,3,486,243,0,1591,1592,5,135,0,0,1592,1594,3,486,243,0,
		1593,1591,1,0,0,0,1594,1597,1,0,0,0,1595,1593,1,0,0,0,1595,1596,1,0,0,
		0,1596,1601,1,0,0,0,1597,1595,1,0,0,0,1598,1601,5,95,0,0,1599,1601,5,64,
		0,0,1600,1590,1,0,0,0,1600,1598,1,0,0,0,1600,1599,1,0,0,0,1601,281,1,0,
		0,0,1602,1603,5,23,0,0,1603,1605,3,284,142,0,1604,1602,1,0,0,0,1604,1605,
		1,0,0,0,1605,1607,1,0,0,0,1606,1608,3,236,118,0,1607,1606,1,0,0,0,1607,
		1608,1,0,0,0,1608,1610,1,0,0,0,1609,1611,3,238,119,0,1610,1609,1,0,0,0,
		1610,1611,1,0,0,0,1611,283,1,0,0,0,1612,1613,5,13,0,0,1613,1618,3,4,2,
		0,1614,1615,5,126,0,0,1615,1616,3,512,256,0,1616,1617,5,127,0,0,1617,1619,
		1,0,0,0,1618,1614,1,0,0,0,1618,1619,1,0,0,0,1619,1624,1,0,0,0,1620,1621,
		5,99,0,0,1621,1624,3,4,2,0,1622,1624,5,100,0,0,1623,1612,1,0,0,0,1623,
		1620,1,0,0,0,1623,1622,1,0,0,0,1624,285,1,0,0,0,1625,1626,5,23,0,0,1626,
		1627,5,36,0,0,1627,1628,3,288,144,0,1628,287,1,0,0,0,1629,1634,3,4,2,0,
		1630,1631,5,135,0,0,1631,1633,3,4,2,0,1632,1630,1,0,0,0,1633,1636,1,0,
		0,0,1634,1632,1,0,0,0,1634,1635,1,0,0,0,1635,289,1,0,0,0,1636,1634,1,0,
		0,0,1637,1638,5,32,0,0,1638,1639,3,292,146,0,1639,1640,5,50,0,0,1640,1641,
		3,312,156,0,1641,1642,5,125,0,0,1642,291,1,0,0,0,1643,1644,3,294,147,0,
		1644,1645,5,138,0,0,1645,1646,3,160,80,0,1646,293,1,0,0,0,1647,1652,3,
		4,2,0,1648,1649,5,135,0,0,1649,1651,3,4,2,0,1650,1648,1,0,0,0,1651,1654,
		1,0,0,0,1652,1650,1,0,0,0,1652,1653,1,0,0,0,1653,1658,1,0,0,0,1654,1652,
		1,0,0,0,1655,1658,5,95,0,0,1656,1658,5,64,0,0,1657,1647,1,0,0,0,1657,1655,
		1,0,0,0,1657,1656,1,0,0,0,1658,295,1,0,0,0,1659,1662,3,512,256,0,1660,
		1662,3,0,0,0,1661,1659,1,0,0,0,1661,1660,1,0,0,0,1662,297,1,0,0,0,1663,
		1664,5,131,0,0,1664,1665,7,8,0,0,1665,1666,3,300,150,0,1666,1667,5,138,
		0,0,1667,1668,3,148,74,0,1668,1669,5,132,0,0,1669,299,1,0,0,0,1670,1674,
		3,302,151,0,1671,1674,3,304,152,0,1672,1674,3,306,153,0,1673,1670,1,0,
		0,0,1673,1671,1,0,0,0,1673,1672,1,0,0,0,1674,301,1,0,0,0,1675,1676,5,133,
		0,0,1676,1677,3,512,256,0,1677,1678,5,136,0,0,1678,1679,3,512,256,0,1679,
		1680,5,136,0,0,1680,1685,3,512,256,0,1681,1682,5,136,0,0,1682,1684,3,512,
		256,0,1683,1681,1,0,0,0,1684,1687,1,0,0,0,1685,1683,1,0,0,0,1685,1686,
		1,0,0,0,1686,303,1,0,0,0,1687,1685,1,0,0,0,1688,1689,5,136,0,0,1689,1690,
		3,308,154,0,1690,305,1,0,0,0,1691,1692,5,160,0,0,1692,1694,5,136,0,0,1693,
		1691,1,0,0,0,1694,1697,1,0,0,0,1695,1693,1,0,0,0,1695,1696,1,0,0,0,1696,
		1698,1,0,0,0,1697,1695,1,0,0,0,1698,1699,3,308,154,0,1699,307,1,0,0,0,
		1700,1701,3,310,155,0,1701,1702,5,136,0,0,1702,1704,1,0,0,0,1703,1700,
		1,0,0,0,1704,1707,1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,1708,
		1,0,0,0,1707,1705,1,0,0,0,1708,1709,3,512,256,0,1709,309,1,0,0,0,1710,
		1715,3,486,243,0,1711,1712,5,126,0,0,1712,1713,3,312,156,0,1713,1714,5,
		127,0,0,1714,1716,1,0,0,0,1715,1711,1,0,0,0,1715,1716,1,0,0,0,1716,311,
		1,0,0,0,1717,1718,6,156,-1,0,1718,1719,5,164,0,0,1719,1722,3,316,158,0,
		1720,1722,3,314,157,0,1721,1717,1,0,0,0,1721,1720,1,0,0,0,1722,1737,1,
		0,0,0,1723,1724,10,3,0,0,1724,1725,3,322,161,0,1725,1726,3,312,156,4,1726,
		1736,1,0,0,0,1727,1728,10,2,0,0,1728,1729,3,320,160,0,1729,1730,3,312,
		156,3,1730,1736,1,0,0,0,1731,1732,10,1,0,0,1732,1733,3,318,159,0,1733,
		1734,3,312,156,2,1734,1736,1,0,0,0,1735,1723,1,0,0,0,1735,1727,1,0,0,0,
		1735,1731,1,0,0,0,1736,1739,1,0,0,0,1737,1735,1,0,0,0,1737,1738,1,0,0,
		0,1738,313,1,0,0,0,1739,1737,1,0,0,0,1740,1741,6,157,-1,0,1741,1744,3,
		316,158,0,1742,1743,5,157,0,0,1743,1745,3,316,158,0,1744,1742,1,0,0,0,
		1744,1745,1,0,0,0,1745,1756,1,0,0,0,1746,1750,5,6,0,0,1747,1750,5,98,0,
		0,1748,1750,3,318,159,0,1749,1746,1,0,0,0,1749,1747,1,0,0,0,1749,1748,
		1,0,0,0,1750,1751,1,0,0,0,1751,1756,3,314,157,4,1752,1753,3,326,163,0,
		1753,1754,3,314,157,2,1754,1756,1,0,0,0,1755,1740,1,0,0,0,1755,1749,1,
		0,0,0,1755,1752,1,0,0,0,1756,1767,1,0,0,0,1757,1758,10,3,0,0,1758,1759,
		3,328,164,0,1759,1760,3,314,157,4,1760,1766,1,0,0,0,1761,1762,10,1,0,0,
		1762,1763,3,324,162,0,1763,1764,3,314,157,2,1764,1766,1,0,0,0,1765,1757,
		1,0,0,0,1765,1761,1,0,0,0,1766,1769,1,0,0,0,1767,1765,1,0,0,0,1767,1768,
		1,0,0,0,1768,315,1,0,0,0,1769,1767,1,0,0,0,1770,1777,3,332,166,0,1771,
		1777,5,114,0,0,1772,1777,5,106,0,0,1773,1777,3,346,173,0,1774,1777,3,336,
		168,0,1775,1777,3,344,172,0,1776,1770,1,0,0,0,1776,1771,1,0,0,0,1776,1772,
		1,0,0,0,1776,1773,1,0,0,0,1776,1774,1,0,0,0,1776,1775,1,0,0,0,1777,317,
		1,0,0,0,1778,1779,7,9,0,0,1779,319,1,0,0,0,1780,1781,7,10,0,0,1781,321,
		1,0,0,0,1782,1783,7,11,0,0,1783,323,1,0,0,0,1784,1785,7,12,0,0,1785,325,
		1,0,0,0,1786,1787,7,13,0,0,1787,327,1,0,0,0,1788,1789,7,14,0,0,1789,329,
		1,0,0,0,1790,1791,7,15,0,0,1791,331,1,0,0,0,1792,1794,5,109,0,0,1793,1795,
		3,4,2,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1802,1,0,0,0,1796,1798,
		5,111,0,0,1797,1799,3,4,2,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,1802,
		1,0,0,0,1800,1802,3,4,2,0,1801,1792,1,0,0,0,1801,1796,1,0,0,0,1801,1800,
		1,0,0,0,1802,333,1,0,0,0,1803,1805,7,16,0,0,1804,1803,1,0,0,0,1804,1805,
		1,0,0,0,1805,1806,1,0,0,0,1806,1807,3,4,2,0,1807,335,1,0,0,0,1808,1809,
		5,126,0,0,1809,1814,3,338,169,0,1810,1811,5,135,0,0,1811,1813,3,338,169,
		0,1812,1810,1,0,0,0,1813,1816,1,0,0,0,1814,1812,1,0,0,0,1814,1815,1,0,
		0,0,1815,1817,1,0,0,0,1816,1814,1,0,0,0,1817,1818,5,127,0,0,1818,337,1,
		0,0,0,1819,1820,3,340,170,0,1820,1821,5,163,0,0,1821,1823,1,0,0,0,1822,
		1819,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1825,3,312,156,0,
		1825,339,1,0,0,0,1826,1831,3,342,171,0,1827,1828,5,153,0,0,1828,1830,3,
		342,171,0,1829,1827,1,0,0,0,1830,1833,1,0,0,0,1831,1829,1,0,0,0,1831,1832,
		1,0,0,0,1832,341,1,0,0,0,1833,1831,1,0,0,0,1834,1838,3,112,56,0,1835,1838,
		3,314,157,0,1836,1838,5,95,0,0,1837,1834,1,0,0,0,1837,1835,1,0,0,0,1837,
		1836,1,0,0,0,1838,343,1,0,0,0,1839,1840,3,160,80,0,1840,1841,5,130,0,0,
		1841,1842,3,336,168,0,1842,345,1,0,0,0,1843,1846,5,45,0,0,1844,1847,3,
		148,74,0,1845,1847,3,344,172,0,1846,1844,1,0,0,0,1846,1845,1,0,0,0,1847,
		347,1,0,0,0,1848,1850,3,350,175,0,1849,1848,1,0,0,0,1850,1853,1,0,0,0,
		1851,1849,1,0,0,0,1851,1852,1,0,0,0,1852,349,1,0,0,0,1853,1851,1,0,0,0,
		1854,1855,3,486,243,0,1855,1856,5,138,0,0,1856,1858,1,0,0,0,1857,1854,
		1,0,0,0,1857,1858,1,0,0,0,1858,1872,1,0,0,0,1859,1873,3,352,176,0,1860,
		1873,3,364,182,0,1861,1873,3,368,184,0,1862,1873,3,370,185,0,1863,1873,
		3,410,205,0,1864,1873,3,418,209,0,1865,1873,3,422,211,0,1866,1873,3,424,
		212,0,1867,1873,3,428,214,0,1868,1873,3,434,217,0,1869,1873,3,436,218,
		0,1870,1873,3,438,219,0,1871,1873,3,440,220,0,1872,1859,1,0,0,0,1872,1860,
		1,0,0,0,1872,1861,1,0,0,0,1872,1862,1,0,0,0,1872,1863,1,0,0,0,1872,1864,
		1,0,0,0,1872,1865,1,0,0,0,1872,1866,1,0,0,0,1872,1867,1,0,0,0,1872,1868,
		1,0,0,0,1872,1869,1,0,0,0,1872,1870,1,0,0,0,1872,1871,1,0,0,0,1873,351,
		1,0,0,0,1874,1876,5,76,0,0,1875,1877,3,354,177,0,1876,1875,1,0,0,0,1876,
		1877,1,0,0,0,1877,1879,1,0,0,0,1878,1880,3,358,179,0,1879,1878,1,0,0,0,
		1879,1880,1,0,0,0,1880,1882,1,0,0,0,1881,1883,3,362,181,0,1882,1881,1,
		0,0,0,1882,1883,1,0,0,0,1883,1884,1,0,0,0,1884,1885,5,125,0,0,1885,353,
		1,0,0,0,1886,1887,5,14,0,0,1887,1888,3,356,178,0,1888,355,1,0,0,0,1889,
		1894,3,4,2,0,1890,1891,5,135,0,0,1891,1893,3,4,2,0,1892,1890,1,0,0,0,1893,
		1896,1,0,0,0,1894,1892,1,0,0,0,1894,1895,1,0,0,0,1895,357,1,0,0,0,1896,
		1894,1,0,0,0,1897,1898,5,73,0,0,1898,1899,3,360,180,0,1899,359,1,0,0,0,
		1900,1901,3,312,156,0,1901,361,1,0,0,0,1902,1903,5,88,0,0,1903,1904,3,
		312,156,0,1904,363,1,0,0,0,1905,1906,3,366,183,0,1906,1907,5,125,0,0,1907,
		365,1,0,0,0,1908,1909,5,84,0,0,1909,1912,3,360,180,0,1910,1911,5,46,0,
		0,1911,1913,3,312,156,0,1912,1910,1,0,0,0,1912,1913,1,0,0,0,1913,1916,
		1,0,0,0,1914,1915,5,86,0,0,1915,1917,3,312,156,0,1916,1914,1,0,0,0,1916,
		1917,1,0,0,0,1917,367,1,0,0,0,1918,1919,5,46,0,0,1919,1922,3,312,156,0,
		1920,1921,5,86,0,0,1921,1923,3,312,156,0,1922,1920,1,0,0,0,1922,1923,1,
		0,0,0,1923,1924,1,0,0,0,1924,1925,5,125,0,0,1925,369,1,0,0,0,1926,1930,
		3,372,186,0,1927,1930,3,390,195,0,1928,1930,3,400,200,0,1929,1926,1,0,
		0,0,1929,1927,1,0,0,0,1929,1928,1,0,0,0,1930,371,1,0,0,0,1931,1935,3,374,
		187,0,1932,1935,3,376,188,0,1933,1935,3,378,189,0,1934,1931,1,0,0,0,1934,
		1932,1,0,0,0,1934,1933,1,0,0,0,1935,373,1,0,0,0,1936,1937,3,384,192,0,
		1937,1939,5,158,0,0,1938,1940,3,382,191,0,1939,1938,1,0,0,0,1939,1940,
		1,0,0,0,1940,1941,1,0,0,0,1941,1942,3,386,193,0,1942,1943,5,125,0,0,1943,
		375,1,0,0,0,1944,1945,3,384,192,0,1945,1946,5,158,0,0,1946,1948,5,79,0,
		0,1947,1949,3,380,190,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1950,
		1,0,0,0,1950,1951,3,312,156,0,1951,1952,5,125,0,0,1952,377,1,0,0,0,1953,
		1954,3,384,192,0,1954,1955,5,158,0,0,1955,1957,5,69,0,0,1956,1958,3,380,
		190,0,1957,1956,1,0,0,0,1957,1958,1,0,0,0,1958,1959,1,0,0,0,1959,1960,
		5,125,0,0,1960,379,1,0,0,0,1961,1962,7,5,0,0,1962,381,1,0,0,0,1963,1970,
		5,51,0,0,1964,1965,5,29,0,0,1965,1967,3,312,156,0,1966,1964,1,0,0,0,1966,
		1967,1,0,0,0,1967,1968,1,0,0,0,1968,1970,5,11,0,0,1969,1963,1,0,0,0,1969,
		1966,1,0,0,0,1970,383,1,0,0,0,1971,1974,3,4,2,0,1972,1974,3,336,168,0,
		1973,1971,1,0,0,0,1973,1972,1,0,0,0,1974,385,1,0,0,0,1975,1980,3,388,194,
		0,1976,1977,5,135,0,0,1977,1979,3,388,194,0,1978,1976,1,0,0,0,1979,1982,
		1,0,0,0,1980,1978,1,0,0,0,1980,1981,1,0,0,0,1981,1985,1,0,0,0,1982,1980,
		1,0,0,0,1983,1985,5,40,0,0,1984,1975,1,0,0,0,1984,1983,1,0,0,0,1985,387,
		1,0,0,0,1986,1989,3,312,156,0,1987,1988,5,50,0,0,1988,1990,3,312,156,0,
		1989,1987,1,0,0,0,1989,1990,1,0,0,0,1990,1997,1,0,0,0,1991,1994,5,106,
		0,0,1992,1993,5,50,0,0,1993,1995,3,312,156,0,1994,1992,1,0,0,0,1994,1995,
		1,0,0,0,1995,1997,1,0,0,0,1996,1986,1,0,0,0,1996,1991,1,0,0,0,1997,389,
		1,0,0,0,1998,2001,3,392,196,0,1999,2001,3,396,198,0,2000,1998,1,0,0,0,
		2000,1999,1,0,0,0,2001,391,1,0,0,0,2002,2003,3,384,192,0,2003,2005,5,158,
		0,0,2004,2006,3,382,191,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2007,
		1,0,0,0,2007,2008,3,394,197,0,2008,2009,5,125,0,0,2009,393,1,0,0,0,2010,
		2011,3,386,193,0,2011,2012,5,104,0,0,2012,2020,3,360,180,0,2013,2014,5,
		22,0,0,2014,2015,3,386,193,0,2015,2016,5,104,0,0,2016,2017,3,360,180,0,
		2017,2019,1,0,0,0,2018,2013,1,0,0,0,2019,2022,1,0,0,0,2020,2018,1,0,0,
		0,2020,2021,1,0,0,0,2021,2026,1,0,0,0,2022,2020,1,0,0,0,2023,2024,5,22,
		0,0,2024,2027,3,386,193,0,2025,2027,4,197,6,0,2026,2023,1,0,0,0,2026,2025,
		1,0,0,0,2027,395,1,0,0,0,2028,2029,3,384,192,0,2029,2030,5,158,0,0,2030,
		2032,5,79,0,0,2031,2033,3,380,190,0,2032,2031,1,0,0,0,2032,2033,1,0,0,
		0,2033,2034,1,0,0,0,2034,2035,3,398,199,0,2035,2036,5,125,0,0,2036,397,
		1,0,0,0,2037,2038,3,312,156,0,2038,2039,5,104,0,0,2039,2047,3,360,180,
		0,2040,2041,5,22,0,0,2041,2042,3,312,156,0,2042,2043,5,104,0,0,2043,2044,
		3,360,180,0,2044,2046,1,0,0,0,2045,2040,1,0,0,0,2046,2049,1,0,0,0,2047,
		2045,1,0,0,0,2047,2048,1,0,0,0,2048,2053,1,0,0,0,2049,2047,1,0,0,0,2050,
		2051,5,22,0,0,2051,2054,3,312,156,0,2052,2054,4,199,7,0,2053,2050,1,0,
		0,0,2053,2052,1,0,0,0,2054,399,1,0,0,0,2055,2058,3,402,201,0,2056,2058,
		3,406,203,0,2057,2055,1,0,0,0,2057,2056,1,0,0,0,2058,401,1,0,0,0,2059,
		2060,5,72,0,0,2060,2061,3,312,156,0,2061,2063,5,54,0,0,2062,2064,5,137,
		0,0,2063,2062,1,0,0,0,2063,2064,1,0,0,0,2064,2065,1,0,0,0,2065,2066,3,
		384,192,0,2066,2068,5,158,0,0,2067,2069,3,382,191,0,2068,2067,1,0,0,0,
		2068,2069,1,0,0,0,2069,2070,1,0,0,0,2070,2071,3,404,202,0,2071,2072,5,
		125,0,0,2072,403,1,0,0,0,2073,2074,3,386,193,0,2074,2075,5,104,0,0,2075,
		2083,3,340,170,0,2076,2077,5,135,0,0,2077,2078,3,386,193,0,2078,2079,5,
		104,0,0,2079,2080,3,340,170,0,2080,2082,1,0,0,0,2081,2076,1,0,0,0,2082,
		2085,1,0,0,0,2083,2081,1,0,0,0,2083,2084,1,0,0,0,2084,405,1,0,0,0,2085,
		2083,1,0,0,0,2086,2087,5,72,0,0,2087,2088,3,312,156,0,2088,2090,5,54,0,
		0,2089,2091,5,137,0,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,2092,1,
		0,0,0,2092,2093,3,384,192,0,2093,2094,5,158,0,0,2094,2096,5,79,0,0,2095,
		2097,3,380,190,0,2096,2095,1,0,0,0,2096,2097,1,0,0,0,2097,2098,1,0,0,0,
		2098,2099,3,408,204,0,2099,2100,5,125,0,0,2100,407,1,0,0,0,2101,2102,3,
		312,156,0,2102,2103,5,104,0,0,2103,2111,3,340,170,0,2104,2105,5,135,0,
		0,2105,2106,3,312,156,0,2106,2107,5,104,0,0,2107,2108,3,340,170,0,2108,
		2110,1,0,0,0,2109,2104,1,0,0,0,2110,2113,1,0,0,0,2111,2109,1,0,0,0,2111,
		2112,1,0,0,0,2112,409,1,0,0,0,2113,2111,1,0,0,0,2114,2118,3,412,206,0,
		2115,2118,3,414,207,0,2116,2118,3,416,208,0,2117,2114,1,0,0,0,2117,2115,
		1,0,0,0,2117,2116,1,0,0,0,2118,411,1,0,0,0,2119,2120,3,384,192,0,2120,
		2121,5,161,0,0,2121,2122,3,312,156,0,2122,2123,5,125,0,0,2123,413,1,0,
		0,0,2124,2125,3,384,192,0,2125,2126,5,161,0,0,2126,2127,3,398,199,0,2127,
		2128,5,125,0,0,2128,415,1,0,0,0,2129,2130,5,72,0,0,2130,2131,3,312,156,
		0,2131,2133,5,54,0,0,2132,2134,5,137,0,0,2133,2132,1,0,0,0,2133,2134,1,
		0,0,0,2134,2135,1,0,0,0,2135,2136,3,384,192,0,2136,2137,5,161,0,0,2137,
		2138,3,408,204,0,2138,2139,5,125,0,0,2139,417,1,0,0,0,2140,2141,3,420,
		210,0,2141,2142,5,125,0,0,2142,419,1,0,0,0,2143,2144,3,4,2,0,2144,421,
		1,0,0,0,2145,2146,5,90,0,0,2146,2147,3,360,180,0,2147,2148,5,8,0,0,2148,
		2156,3,348,174,0,2149,2150,5,57,0,0,2150,2151,3,360,180,0,2151,2152,5,
		8,0,0,2152,2153,3,348,174,0,2153,2155,1,0,0,0,2154,2149,1,0,0,0,2155,2158,
		1,0,0,0,2156,2154,1,0,0,0,2156,2157,1,0,0,0,2157,2163,1,0,0,0,2158,2156,
		1,0,0,0,2159,2160,5,22,0,0,2160,2164,3,348,174,0,2161,2164,1,0,0,0,2162,
		2164,4,211,8,0,2163,2159,1,0,0,0,2163,2161,1,0,0,0,2163,2162,1,0,0,0,2164,
		2165,1,0,0,0,2165,2166,5,53,0,0,2166,2168,5,90,0,0,2167,2169,3,486,243,
		0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,2169,2170,1,0,0,0,2170,2171,5,125,
		0,0,2171,423,1,0,0,0,2172,2174,5,97,0,0,2173,2175,5,137,0,0,2174,2173,
		1,0,0,0,2174,2175,1,0,0,0,2175,2176,1,0,0,0,2176,2177,3,312,156,0,2177,
		2179,5,93,0,0,2178,2180,3,426,213,0,2179,2178,1,0,0,0,2180,2181,1,0,0,
		0,2181,2179,1,0,0,0,2181,2182,1,0,0,0,2182,2183,1,0,0,0,2183,2184,5,53,
		0,0,2184,2186,5,97,0,0,2185,2187,5,137,0,0,2186,2185,1,0,0,0,2186,2187,
		1,0,0,0,2187,2189,1,0,0,0,2188,2190,3,486,243,0,2189,2188,1,0,0,0,2189,
		2190,1,0,0,0,2190,2191,1,0,0,0,2191,2192,5,125,0,0,2192,425,1,0,0,0,2193,
		2194,5,104,0,0,2194,2195,3,340,170,0,2195,2196,5,163,0,0,2196,2197,3,348,
		174,0,2197,427,1,0,0,0,2198,2200,3,430,215,0,2199,2198,1,0,0,0,2199,2200,
		1,0,0,0,2200,2201,1,0,0,0,2201,2202,5,26,0,0,2202,2203,3,348,174,0,2203,
		2204,5,53,0,0,2204,2206,5,26,0,0,2205,2207,3,486,243,0,2206,2205,1,0,0,
		0,2206,2207,1,0,0,0,2207,2208,1,0,0,0,2208,2209,5,125,0,0,2209,429,1,0,
		0,0,2210,2211,5,80,0,0,2211,2215,3,360,180,0,2212,2213,5,88,0,0,2213,2215,
		3,432,216,0,2214,2210,1,0,0,0,2214,2212,1,0,0,0,2215,431,1,0,0,0,2216,
		2217,3,512,256,0,2217,2218,5,68,0,0,2218,2219,3,112,56,0,2219,433,1,0,
		0,0,2220,2222,5,12,0,0,2221,2223,3,486,243,0,2222,2221,1,0,0,0,2222,2223,
		1,0,0,0,2223,2226,1,0,0,0,2224,2225,5,104,0,0,2225,2227,3,360,180,0,2226,
		2224,1,0,0,0,2226,2227,1,0,0,0,2227,2228,1,0,0,0,2228,2229,5,125,0,0,2229,
		435,1,0,0,0,2230,2232,5,70,0,0,2231,2233,3,486,243,0,2232,2231,1,0,0,0,
		2232,2233,1,0,0,0,2233,2236,1,0,0,0,2234,2235,5,104,0,0,2235,2237,3,360,
		180,0,2236,2234,1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,0,0,0,2238,2239,
		5,125,0,0,2239,437,1,0,0,0,2240,2242,5,71,0,0,2241,2243,3,312,156,0,2242,
		2241,1,0,0,0,2242,2243,1,0,0,0,2243,2244,1,0,0,0,2244,2245,5,125,0,0,2245,
		439,1,0,0,0,2246,2247,5,106,0,0,2247,2248,5,125,0,0,2248,441,1,0,0,0,2249,
		2254,3,450,225,0,2250,2254,3,458,229,0,2251,2254,3,460,230,0,2252,2254,
		3,462,231,0,2253,2249,1,0,0,0,2253,2250,1,0,0,0,2253,2251,1,0,0,0,2253,
		2252,1,0,0,0,2254,443,1,0,0,0,2255,2256,3,486,243,0,2256,2261,5,138,0,
		0,2257,2262,3,446,223,0,2258,2262,3,468,234,0,2259,2262,3,472,236,0,2260,
		2262,3,442,221,0,2261,2257,1,0,0,0,2261,2258,1,0,0,0,2261,2259,1,0,0,0,
		2261,2260,1,0,0,0,2262,2265,1,0,0,0,2263,2265,3,442,221,0,2264,2255,1,
		0,0,0,2264,2263,1,0,0,0,2265,445,1,0,0,0,2266,2271,5,9,0,0,2267,2268,5,
		126,0,0,2268,2269,3,360,180,0,2269,2270,5,127,0,0,2270,2272,1,0,0,0,2271,
		2267,1,0,0,0,2271,2272,1,0,0,0,2272,2274,1,0,0,0,2273,2275,5,93,0,0,2274,
		2273,1,0,0,0,2274,2275,1,0,0,0,2275,2276,1,0,0,0,2276,2280,3,448,224,0,
		2277,2279,3,26,13,0,2278,2277,1,0,0,0,2279,2282,1,0,0,0,2280,2278,1,0,
		0,0,2280,2281,1,0,0,0,2281,2283,1,0,0,0,2282,2280,1,0,0,0,2283,2287,5,
		30,0,0,2284,2286,3,444,222,0,2285,2284,1,0,0,0,2286,2289,1,0,0,0,2287,
		2285,1,0,0,0,2287,2288,1,0,0,0,2288,2290,1,0,0,0,2289,2287,1,0,0,0,2290,
		2291,5,53,0,0,2291,2293,5,9,0,0,2292,2294,3,486,243,0,2293,2292,1,0,0,
		0,2293,2294,1,0,0,0,2294,2295,1,0,0,0,2295,2296,5,125,0,0,2296,447,1,0,
		0,0,2297,2301,3,218,109,0,2298,2299,3,236,118,0,2299,2300,5,125,0,0,2300,
		2302,1,0,0,0,2301,2298,1,0,0,0,2301,2302,1,0,0,0,2302,2304,1,0,0,0,2303,
		2297,1,0,0,0,2303,2304,1,0,0,0,2304,2311,1,0,0,0,2305,2309,3,222,111,0,
		2306,2307,3,238,119,0,2307,2308,5,125,0,0,2308,2310,1,0,0,0,2309,2306,
		1,0,0,0,2309,2310,1,0,0,0,2310,2312,1,0,0,0,2311,2305,1,0,0,0,2311,2312,
		1,0,0,0,2312,449,1,0,0,0,2313,2315,5,3,0,0,2314,2313,1,0,0,0,2314,2315,
		1,0,0,0,2315,2316,1,0,0,0,2316,2321,5,1,0,0,2317,2318,5,126,0,0,2318,2319,
		3,452,226,0,2319,2320,5,127,0,0,2320,2322,1,0,0,0,2321,2317,1,0,0,0,2321,
		2322,1,0,0,0,2322,2324,1,0,0,0,2323,2325,5,93,0,0,2324,2323,1,0,0,0,2324,
		2325,1,0,0,0,2325,2329,1,0,0,0,2326,2328,3,456,228,0,2327,2326,1,0,0,0,
		2328,2331,1,0,0,0,2329,2327,1,0,0,0,2329,2330,1,0,0,0,2330,2332,1,0,0,
		0,2331,2329,1,0,0,0,2332,2336,5,30,0,0,2333,2335,3,350,175,0,2334,2333,
		1,0,0,0,2335,2338,1,0,0,0,2336,2334,1,0,0,0,2336,2337,1,0,0,0,2337,2339,
		1,0,0,0,2338,2336,1,0,0,0,2339,2341,5,53,0,0,2340,2342,5,3,0,0,2341,2340,
		1,0,0,0,2341,2342,1,0,0,0,2342,2343,1,0,0,0,2343,2345,5,1,0,0,2344,2346,
		3,486,243,0,2345,2344,1,0,0,0,2345,2346,1,0,0,0,2346,2347,1,0,0,0,2347,
		2348,5,125,0,0,2348,451,1,0,0,0,2349,2352,5,64,0,0,2350,2352,3,356,178,
		0,2351,2349,1,0,0,0,2351,2350,1,0,0,0,2352,453,1,0,0,0,2353,2369,3,42,
		21,0,2354,2369,3,62,31,0,2355,2369,3,66,33,0,2356,2369,3,72,36,0,2357,
		2369,3,140,70,0,2358,2369,3,146,73,0,2359,2369,3,168,84,0,2360,2369,3,
		174,87,0,2361,2369,3,176,88,0,2362,2369,3,240,120,0,2363,2369,3,244,122,
		0,2364,2369,3,260,130,0,2365,2369,3,488,244,0,2366,2369,3,248,124,0,2367,
		2369,3,254,127,0,2368,2353,1,0,0,0,2368,2354,1,0,0,0,2368,2355,1,0,0,0,
		2368,2356,1,0,0,0,2368,2357,1,0,0,0,2368,2358,1,0,0,0,2368,2359,1,0,0,
		0,2368,2360,1,0,0,0,2368,2361,1,0,0,0,2368,2362,1,0,0,0,2368,2363,1,0,
		0,0,2368,2364,1,0,0,0,2368,2365,1,0,0,0,2368,2366,1,0,0,0,2368,2367,1,
		0,0,0,2369,455,1,0,0,0,2370,2374,3,454,227,0,2371,2374,3,58,29,0,2372,
		2374,3,70,35,0,2373,2370,1,0,0,0,2373,2371,1,0,0,0,2373,2372,1,0,0,0,2374,
		457,1,0,0,0,2375,2377,5,3,0,0,2376,2375,1,0,0,0,2376,2377,1,0,0,0,2377,
		2378,1,0,0,0,2378,2379,3,418,209,0,2379,459,1,0,0,0,2380,2382,5,3,0,0,
		2381,2380,1,0,0,0,2381,2382,1,0,0,0,2382,2383,1,0,0,0,2383,2384,3,364,
		182,0,2384,461,1,0,0,0,2385,2387,5,3,0,0,2386,2385,1,0,0,0,2386,2387,1,
		0,0,0,2387,2390,1,0,0,0,2388,2391,3,464,232,0,2389,2391,3,466,233,0,2390,
		2388,1,0,0,0,2390,2389,1,0,0,0,2391,463,1,0,0,0,2392,2393,3,384,192,0,
		2393,2395,5,158,0,0,2394,2396,5,19,0,0,2395,2394,1,0,0,0,2395,2396,1,0,
		0,0,2396,2398,1,0,0,0,2397,2399,3,382,191,0,2398,2397,1,0,0,0,2398,2399,
		1,0,0,0,2399,2402,1,0,0,0,2400,2403,3,386,193,0,2401,2403,3,394,197,0,
		2402,2400,1,0,0,0,2402,2401,1,0,0,0,2403,2404,1,0,0,0,2404,2405,5,125,
		0,0,2405,465,1,0,0,0,2406,2407,5,72,0,0,2407,2408,3,312,156,0,2408,2410,
		5,54,0,0,2409,2411,5,137,0,0,2410,2409,1,0,0,0,2410,2411,1,0,0,0,2411,
		2412,1,0,0,0,2412,2413,3,384,192,0,2413,2415,5,158,0,0,2414,2416,5,19,
		0,0,2415,2414,1,0,0,0,2415,2416,1,0,0,0,2416,2418,1,0,0,0,2417,2419,3,
		382,191,0,2418,2417,1,0,0,0,2418,2419,1,0,0,0,2419,2420,1,0,0,0,2420,2421,
		3,404,202,0,2421,2422,5,125,0,0,2422,467,1,0,0,0,2423,2425,3,470,235,0,
		2424,2426,3,236,118,0,2425,2424,1,0,0,0,2425,2426,1,0,0,0,2426,2428,1,
		0,0,0,2427,2429,3,238,119,0,2428,2427,1,0,0,0,2428,2429,1,0,0,0,2429,2430,
		1,0,0,0,2430,2431,5,125,0,0,2431,469,1,0,0,0,2432,2434,5,5,0,0,2433,2432,
		1,0,0,0,2433,2434,1,0,0,0,2434,2435,1,0,0,0,2435,2447,3,4,2,0,2436,2437,
		5,13,0,0,2437,2442,3,4,2,0,2438,2439,5,126,0,0,2439,2440,3,512,256,0,2440,
		2441,5,127,0,0,2441,2443,1,0,0,0,2442,2438,1,0,0,0,2442,2443,1,0,0,0,2443,
		2447,1,0,0,0,2444,2445,5,99,0,0,2445,2447,3,4,2,0,2446,2433,1,0,0,0,2446,
		2436,1,0,0,0,2446,2444,1,0,0,0,2447,471,1,0,0,0,2448,2452,3,474,237,0,
		2449,2452,3,476,238,0,2450,2452,3,478,239,0,2451,2448,1,0,0,0,2451,2449,
		1,0,0,0,2451,2450,1,0,0,0,2452,473,1,0,0,0,2453,2454,5,88,0,0,2454,2455,
		3,432,216,0,2455,2456,5,66,0,0,2456,2457,3,484,242,0,2457,2458,5,53,0,
		0,2458,2460,5,66,0,0,2459,2461,3,486,243,0,2460,2459,1,0,0,0,2460,2461,
		1,0,0,0,2461,2462,1,0,0,0,2462,2463,5,125,0,0,2463,475,1,0,0,0,2464,2468,
		5,90,0,0,2465,2466,3,486,243,0,2466,2467,5,138,0,0,2467,2469,1,0,0,0,2468,
		2465,1,0,0,0,2468,2469,1,0,0,0,2469,2470,1,0,0,0,2470,2471,3,360,180,0,
		2471,2472,5,66,0,0,2472,2485,3,484,242,0,2473,2477,5,57,0,0,2474,2475,
		3,486,243,0,2475,2476,5,138,0,0,2476,2478,1,0,0,0,2477,2474,1,0,0,0,2477,
		2478,1,0,0,0,2478,2479,1,0,0,0,2479,2480,3,360,180,0,2480,2481,5,66,0,
		0,2481,2482,3,484,242,0,2482,2484,1,0,0,0,2483,2473,1,0,0,0,2484,2487,
		1,0,0,0,2485,2483,1,0,0,0,2485,2486,1,0,0,0,2486,2497,1,0,0,0,2487,2485,
		1,0,0,0,2488,2492,5,22,0,0,2489,2490,3,486,243,0,2490,2491,5,138,0,0,2491,
		2493,1,0,0,0,2492,2489,1,0,0,0,2492,2493,1,0,0,0,2493,2494,1,0,0,0,2494,
		2495,5,66,0,0,2495,2498,3,484,242,0,2496,2498,4,238,9,0,2497,2488,1,0,
		0,0,2497,2496,1,0,0,0,2498,2499,1,0,0,0,2499,2500,5,53,0,0,2500,2502,5,
		66,0,0,2501,2503,3,486,243,0,2502,2501,1,0,0,0,2502,2503,1,0,0,0,2503,
		2504,1,0,0,0,2504,2505,5,125,0,0,2505,477,1,0,0,0,2506,2507,5,97,0,0,2507,
		2508,3,312,156,0,2508,2510,5,66,0,0,2509,2511,3,480,240,0,2510,2509,1,
		0,0,0,2511,2512,1,0,0,0,2512,2510,1,0,0,0,2512,2513,1,0,0,0,2513,2514,
		1,0,0,0,2514,2515,5,53,0,0,2515,2517,5,66,0,0,2516,2518,3,486,243,0,2517,
		2516,1,0,0,0,2517,2518,1,0,0,0,2518,2519,1,0,0,0,2519,2520,5,125,0,0,2520,
		479,1,0,0,0,2521,2525,5,104,0,0,2522,2523,3,486,243,0,2523,2524,5,138,
		0,0,2524,2526,1,0,0,0,2525,2522,1,0,0,0,2525,2526,1,0,0,0,2526,2527,1,
		0,0,0,2527,2528,3,340,170,0,2528,2529,5,163,0,0,2529,2530,3,482,241,0,
		2530,481,1,0,0,0,2531,2533,3,26,13,0,2532,2531,1,0,0,0,2533,2536,1,0,0,
		0,2534,2532,1,0,0,0,2534,2535,1,0,0,0,2535,2537,1,0,0,0,2536,2534,1,0,
		0,0,2537,2541,5,30,0,0,2538,2540,3,444,222,0,2539,2538,1,0,0,0,2540,2543,
		1,0,0,0,2541,2539,1,0,0,0,2541,2542,1,0,0,0,2542,2544,1,0,0,0,2543,2541,
		1,0,0,0,2544,2546,5,53,0,0,2545,2547,3,486,243,0,2546,2545,1,0,0,0,2546,
		2547,1,0,0,0,2547,2548,1,0,0,0,2548,2556,5,125,0,0,2549,2551,3,444,222,
		0,2550,2549,1,0,0,0,2551,2554,1,0,0,0,2552,2550,1,0,0,0,2552,2553,1,0,
		0,0,2553,2556,1,0,0,0,2554,2552,1,0,0,0,2555,2534,1,0,0,0,2555,2552,1,
		0,0,0,2556,483,1,0,0,0,2557,2559,3,26,13,0,2558,2557,1,0,0,0,2559,2562,
		1,0,0,0,2560,2558,1,0,0,0,2560,2561,1,0,0,0,2561,2563,1,0,0,0,2562,2560,
		1,0,0,0,2563,2567,5,30,0,0,2564,2566,3,444,222,0,2565,2564,1,0,0,0,2566,
		2569,1,0,0,0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,2577,1,0,0,0,2569,
		2567,1,0,0,0,2570,2572,3,444,222,0,2571,2570,1,0,0,0,2572,2575,1,0,0,0,
		2573,2571,1,0,0,0,2573,2574,1,0,0,0,2574,2577,1,0,0,0,2575,2573,1,0,0,
		0,2576,2560,1,0,0,0,2576,2573,1,0,0,0,2577,485,1,0,0,0,2578,2579,3,512,
		256,0,2579,487,1,0,0,0,2580,2581,5,23,0,0,2581,2586,3,16,8,0,2582,2583,
		5,135,0,0,2583,2585,3,16,8,0,2584,2582,1,0,0,0,2585,2588,1,0,0,0,2586,
		2584,1,0,0,0,2586,2587,1,0,0,0,2587,2589,1,0,0,0,2588,2586,1,0,0,0,2589,
		2590,5,125,0,0,2590,489,1,0,0,0,2591,2593,3,492,246,0,2592,2591,1,0,0,
		0,2593,2596,1,0,0,0,2594,2592,1,0,0,0,2594,2595,1,0,0,0,2595,2597,1,0,
		0,0,2596,2594,1,0,0,0,2597,2598,5,0,0,1,2598,491,1,0,0,0,2599,2600,3,506,
		253,0,2600,2601,3,494,247,0,2601,493,1,0,0,0,2602,2605,3,496,248,0,2603,
		2605,3,498,249,0,2604,2602,1,0,0,0,2604,2603,1,0,0,0,2605,495,1,0,0,0,
		2606,2612,3,18,9,0,2607,2612,3,28,14,0,2608,2612,3,66,33,0,2609,2612,3,
		72,36,0,2610,2612,3,504,252,0,2611,2606,1,0,0,0,2611,2607,1,0,0,0,2611,
		2608,1,0,0,0,2611,2609,1,0,0,0,2611,2610,1,0,0,0,2612,497,1,0,0,0,2613,
		2616,3,24,12,0,2614,2616,3,70,35,0,2615,2613,1,0,0,0,2615,2614,1,0,0,0,
		2616,499,1,0,0,0,2617,2618,5,56,0,0,2618,2619,3,502,251,0,2619,2620,5,
		125,0,0,2620,501,1,0,0,0,2621,2622,3,118,59,0,2622,503,1,0,0,0,2623,2624,
		5,2,0,0,2624,2625,3,512,256,0,2625,2626,5,93,0,0,2626,2627,3,506,253,0,
		2627,2629,5,53,0,0,2628,2630,5,2,0,0,2629,2628,1,0,0,0,2629,2630,1,0,0,
		0,2630,2632,1,0,0,0,2631,2633,3,512,256,0,2632,2631,1,0,0,0,2632,2633,
		1,0,0,0,2633,2634,1,0,0,0,2634,2635,5,125,0,0,2635,505,1,0,0,0,2636,2638,
		3,508,254,0,2637,2636,1,0,0,0,2638,2641,1,0,0,0,2639,2637,1,0,0,0,2639,
		2640,1,0,0,0,2640,507,1,0,0,0,2641,2639,1,0,0,0,2642,2646,3,500,250,0,
		2643,2646,3,488,244,0,2644,2646,3,510,255,0,2645,2642,1,0,0,0,2645,2643,
		1,0,0,0,2645,2644,1,0,0,0,2646,509,1,0,0,0,2647,2648,5,2,0,0,2648,2653,
		3,16,8,0,2649,2650,5,135,0,0,2650,2652,3,16,8,0,2651,2649,1,0,0,0,2652,
		2655,1,0,0,0,2653,2651,1,0,0,0,2653,2654,1,0,0,0,2654,2656,1,0,0,0,2655,
		2653,1,0,0,0,2656,2657,5,125,0,0,2657,511,1,0,0,0,2658,2659,7,17,0,0,2659,
		513,1,0,0,0,304,519,524,532,536,544,554,565,572,575,580,587,590,594,597,
		604,609,614,624,631,636,639,646,656,664,670,673,680,687,693,705,710,714,
		721,728,732,743,748,751,757,760,765,768,774,784,788,799,806,811,814,826,
		829,839,842,846,857,859,864,869,872,880,889,895,898,908,916,923,933,940,
		950,956,970,974,983,1001,1007,1009,1019,1026,1032,1037,1049,1060,1081,
		1087,1093,1099,1106,1113,1117,1130,1139,1143,1150,1154,1163,1173,1177,
		1183,1191,1200,1204,1211,1219,1228,1234,1238,1248,1254,1260,1265,1268,
		1273,1277,1281,1287,1292,1309,1313,1318,1324,1327,1332,1338,1345,1365,
		1372,1399,1407,1416,1424,1427,1432,1446,1451,1458,1469,1472,1475,1480,
		1497,1502,1518,1542,1547,1551,1556,1560,1569,1580,1595,1600,1604,1607,
		1610,1618,1623,1634,1652,1657,1661,1673,1685,1695,1705,1715,1721,1735,
		1737,1744,1749,1755,1765,1767,1776,1794,1798,1801,1804,1814,1822,1831,
		1837,1846,1851,1857,1872,1876,1879,1882,1894,1912,1916,1922,1929,1934,
		1939,1948,1957,1966,1969,1973,1980,1984,1989,1994,1996,2000,2005,2020,
		2026,2032,2047,2053,2057,2063,2068,2083,2090,2096,2111,2117,2133,2156,
		2163,2168,2174,2181,2186,2189,2199,2206,2214,2222,2226,2232,2236,2242,
		2253,2261,2264,2271,2274,2280,2287,2293,2301,2303,2309,2311,2314,2321,
		2324,2329,2336,2341,2345,2351,2368,2373,2376,2381,2386,2390,2395,2398,
		2402,2410,2415,2418,2425,2428,2433,2442,2446,2451,2460,2468,2477,2485,
		2492,2497,2502,2512,2517,2525,2534,2541,2546,2552,2555,2560,2567,2573,
		2576,2586,2594,2604,2611,2615,2629,2632,2639,2645,2653
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace VHDL
